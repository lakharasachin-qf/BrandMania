Index: app/src/main/res/layout/item_footer_five.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<androidx.constraintlayout.widget.ConstraintLayout\r\n    xmlns:android=\"http://schemas.android.com/apk/res/android\" android:layout_width=\"match_parent\"\r\n    android:layout_height=\"match_parent\">\r\n\r\n</androidx.constraintlayout.widget.ConstraintLayout>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/layout/item_footer_five.xml	(revision f3a7fcbea448bd07a109743f0d2c9e65ef6ecb56)
+++ app/src/main/res/layout/item_footer_five.xml	(date 1608797262604)
@@ -1,6 +1,15 @@
 <?xml version="1.0" encoding="utf-8"?>
-<androidx.constraintlayout.widget.ConstraintLayout
-    xmlns:android="http://schemas.android.com/apk/res/android" android:layout_width="match_parent"
+<LinearLayout
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
     android:layout_height="match_parent">
 
-</androidx.constraintlayout.widget.ConstraintLayout>
\ No newline at end of file
+    <ImageView
+        android:layout_width="@dimen/_24sdp"
+        android:layout_height="@dimen/_24sdp"/>
+    <TextView
+        android:text="Website"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"/>
+
+</LinearLayout>
\ No newline at end of file
Index: app/src/main/java/com/app/brandmania/Connection/BaseActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.app.brandmania.Connection;\r\n\r\nimport android.app.Activity;\r\nimport android.app.Dialog;\r\nimport android.content.BroadcastReceiver;\r\nimport android.content.Context;\r\nimport android.content.IntentFilter;\r\nimport android.graphics.drawable.ColorDrawable;\r\nimport android.net.ConnectivityManager;\r\nimport android.os.Build;\r\nimport android.os.Bundle;\r\nimport android.view.View;\r\nimport android.view.Window;\r\nimport android.view.WindowManager;\r\n\r\nimport androidx.appcompat.app.AppCompatActivity;\r\n\r\nimport com.google.gson.Gson;\r\nimport com.app.brandmania.Common.MakeMyBrandApp;\r\nimport com.app.brandmania.Common.PreafManager;\r\nimport com.app.brandmania.R;\r\nimport com.app.brandmania.Common.ResponseHandler;\r\nimport com.app.brandmania.Utils.CodeReUse;\r\n\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\nimport java.util.Observable;\r\nimport java.util.Observer;\r\n\r\npublic class BaseActivity extends AppCompatActivity implements Observer {\r\n    private static final String TAG = BaseActivity.class.getSimpleName();\r\n    private static Dialog noconnectionAlertDialog;\r\n    Activity act;\r\n    PreafManager prefManager;\r\n    MakeMyBrandApp myBrandApp;\r\n    private BroadcastReceiver mNetworkReceiver;\r\n    /*public FirebaseAuth mAuth;*/\r\n    private ResponseHandler responseHandler;\r\n    private boolean isLoading = false;\r\n    Gson gson;\r\n    private static void showNoConnectionDialog() {\r\n        if (!noconnectionAlertDialog.isShowing()) {\r\n            noconnectionAlertDialog.setContentView(R.layout.dialog_no_internet_connection);\r\n            noconnectionAlertDialog.setCancelable(false);\r\n            noconnectionAlertDialog.show();\r\n        }\r\n    }\r\n    public static void InternetError(boolean value) {\r\n        if (value) {\r\n            if (noconnectionAlertDialog.isShowing()) {\r\n                noconnectionAlertDialog.dismiss();\r\n\r\n            }\r\n        } else {\r\n            showNoConnectionDialog();\r\n\r\n        }\r\n    }\r\n    public void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n\r\n        act = this;\r\n// In Activity's onCreate() for instance\r\n        Window w = getWindow();\r\n        w.setFlags(WindowManager.LayoutParams.FLAG_LAYOUT_IN_SCREEN, WindowManager.LayoutParams.FLAG_LAYOUT_IN_SCREEN);\r\n\r\n     //   getWindow().getDecorView().setSystemUiVisibility(View.SYSTEM_UI_FLAG_LAYOUT_STABLE | View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN);\r\n\r\n       // getWindow().setFlags(WindowManager.LayoutParams.FLAG_SECURE, WindowManager.LayoutParams.FLAG_SECURE);\r\n        prefManager = new PreafManager(this);\r\n        // responseHandler = new ResponseHandler();\r\n      //  profileModel = prefManager.getUsers();\r\n        gson = new Gson();\r\n        /*profileObject = new StoreUserData().getUsers(this);\r\n        prefManager = new PrefManager(this);\r\n        responseHandler = new ResponseHandler(this);*/\r\n        myBrandApp = (MakeMyBrandApp) this.getApplication();\r\n        myBrandApp.getObserver().addObserver(this);\r\n\r\n\r\n\r\n\r\n        noconnectionAlertDialog = new Dialog(this);\r\n        noconnectionAlertDialog.getWindow().setBackgroundDrawable(new ColorDrawable(android.graphics.Color.TRANSPARENT));\r\n\r\n        ConnectivityManager connectivityManager = (ConnectivityManager) getSystemService(Context.CONNECTIVITY_SERVICE);\r\n\r\n        mNetworkReceiver = new NetworkChangeReceiver();\r\n        registerNetworkBroadcastForNougat();\r\n\r\n       /* if(prefManager.getUserToken() != null)\r\n            updateUser();*/\r\n\r\n    }\r\n    private void registerNetworkBroadcastForNougat() {\r\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {\r\n            registerReceiver(mNetworkReceiver, new IntentFilter(ConnectivityManager.CONNECTIVITY_ACTION));\r\n        }\r\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\r\n            registerReceiver(mNetworkReceiver, new IntentFilter(ConnectivityManager.CONNECTIVITY_ACTION));\r\n        }\r\n    }\r\n    protected Map<String, String> getHeader(int flag) {\r\n        Map<String, String> headers = new HashMap<>();\r\n        if (flag == CodeReUse.GET_JSON_HEADER) {\r\n            headers.put(\"Accept\", \"application/json\");\r\n            headers.put(\"Content-Type\", \"application/json\");\r\n        } else {\r\n            headers.put(\"Accept\", \"application/x-www-form-urlencoded\");\r\n            headers.put(\"Content-Type\", \"application/x-www-form-urlencoded\");\r\n        }\r\n\r\n        if (prefManager.getUserToken() != null) {\r\n            headers.put(\"Authorization\",\"Bearer\"+prefManager.getUserToken());\r\n        }\r\n        return headers;\r\n    }\r\n    private void unregisterNetworkChanges() {\r\n        try {\r\n            unregisterReceiver(mNetworkReceiver);\r\n        } catch (IllegalArgumentException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n    @Override protected void onDestroy() {\r\n        super.onDestroy();\r\n        unregisterNetworkChanges();\r\n    }\r\n    @Override public void onResume() {\r\n        super.onResume();\r\n    }\r\n    @Override public void update(Observable observable, Object data) {\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/app/brandmania/Connection/BaseActivity.java	(revision f3a7fcbea448bd07a109743f0d2c9e65ef6ecb56)
+++ app/src/main/java/com/app/brandmania/Connection/BaseActivity.java	(date 1608796777428)
@@ -37,6 +37,7 @@
     /*public FirebaseAuth mAuth;*/
     private ResponseHandler responseHandler;
     private boolean isLoading = false;
+    private boolean LIVE_MODE=false;
     Gson gson;
     private static void showNoConnectionDialog() {
         if (!noconnectionAlertDialog.isShowing()) {
@@ -58,22 +59,13 @@
     }
     public void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
-
         act = this;
-// In Activity's onCreate() for instance
         Window w = getWindow();
         w.setFlags(WindowManager.LayoutParams.FLAG_LAYOUT_IN_SCREEN, WindowManager.LayoutParams.FLAG_LAYOUT_IN_SCREEN);
-
      //   getWindow().getDecorView().setSystemUiVisibility(View.SYSTEM_UI_FLAG_LAYOUT_STABLE | View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN);
-
-       // getWindow().setFlags(WindowManager.LayoutParams.FLAG_SECURE, WindowManager.LayoutParams.FLAG_SECURE);
+       //
         prefManager = new PreafManager(this);
-        // responseHandler = new ResponseHandler();
-      //  profileModel = prefManager.getUsers();
         gson = new Gson();
-        /*profileObject = new StoreUserData().getUsers(this);
-        prefManager = new PrefManager(this);
-        responseHandler = new ResponseHandler(this);*/
         myBrandApp = (MakeMyBrandApp) this.getApplication();
         myBrandApp.getObserver().addObserver(this);
 
@@ -88,8 +80,9 @@
         mNetworkReceiver = new NetworkChangeReceiver();
         registerNetworkBroadcastForNougat();
 
-       /* if(prefManager.getUserToken() != null)
-            updateUser();*/
+        if (LIVE_MODE){
+            getWindow().setFlags(WindowManager.LayoutParams.FLAG_SECURE, WindowManager.LayoutParams.FLAG_SECURE);
+        }
 
     }
     private void registerNetworkBroadcastForNougat() {
Index: app/src/main/java/com/app/brandmania/Activity/ViewAllImage.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.app.brandmania.Activity;\r\n\r\nimport androidx.annotation.RequiresApi;\r\nimport androidx.core.app.ActivityCompat;\r\nimport androidx.core.content.ContextCompat;\r\nimport androidx.databinding.DataBindingUtil;\r\nimport androidx.recyclerview.widget.GridLayoutManager;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\nimport androidx.viewpager.widget.ViewPager;\r\n\r\nimport android.Manifest;\r\nimport android.app.Activity;\r\nimport android.app.AlertDialog;\r\nimport android.app.ProgressDialog;\r\nimport android.content.DialogInterface;\r\nimport android.content.Intent;\r\nimport android.content.pm.PackageManager;\r\nimport android.content.res.ColorStateList;\r\nimport android.graphics.Bitmap;\r\nimport android.graphics.BitmapFactory;\r\nimport android.graphics.Canvas;\r\nimport android.graphics.Color;\r\nimport android.graphics.Paint;\r\nimport android.graphics.PorterDuff;\r\nimport android.graphics.Typeface;\r\nimport android.graphics.drawable.BitmapDrawable;\r\nimport android.graphics.drawable.Drawable;\r\nimport android.net.Uri;\r\nimport android.os.AsyncTask;\r\nimport android.os.Build;\r\nimport android.os.Bundle;\r\nimport android.os.Environment;\r\nimport android.provider.MediaStore;\r\nimport android.util.Log;\r\nimport android.view.View;\r\nimport android.view.WindowManager;\r\nimport android.widget.Button;\r\nimport android.widget.ImageView;\r\nimport android.widget.LinearLayout;\r\nimport android.widget.TextView;\r\nimport android.widget.Toast;\r\n\r\nimport com.android.volley.AuthFailureError;\r\nimport com.android.volley.Request;\r\nimport com.android.volley.RequestQueue;\r\nimport com.android.volley.Response;\r\nimport com.android.volley.VolleyError;\r\nimport com.android.volley.toolbox.StringRequest;\r\nimport com.android.volley.toolbox.Volley;\r\nimport com.androidnetworking.AndroidNetworking;\r\nimport com.androidnetworking.common.ANRequest;\r\nimport com.androidnetworking.common.Priority;\r\nimport com.androidnetworking.error.ANError;\r\nimport com.androidnetworking.interfaces.JSONObjectRequestListener;\r\nimport com.androidnetworking.interfaces.UploadProgressListener;\r\nimport com.app.brandmania.Adapter.ViewAllTopTabAdapter;\r\nimport com.app.brandmania.Connection.BaseActivity;\r\nimport com.app.brandmania.Interface.IColorChange;\r\nimport com.app.brandmania.Interface.IItaliTextEvent;\r\nimport com.app.brandmania.Interface.ITextBoldEvent;\r\nimport com.app.brandmania.Interface.ITextColorChangeEvent;\r\nimport com.app.brandmania.Interface.ITextSizeEvent;\r\nimport com.app.brandmania.Interface.IUnderLineTextEvent;\r\nimport com.app.brandmania.Model.BrandListItem;\r\nimport com.app.brandmania.Model.SliderItem;\r\nimport com.app.brandmania.Utils.IFontChangeEvent;\r\nimport com.bumptech.glide.Glide;\r\nimport com.google.android.material.tabs.TabLayout;\r\nimport com.google.gson.Gson;\r\nimport com.app.brandmania.Adapter.ImageCateItemeInterFace;\r\nimport com.app.brandmania.Adapter.ImageCategoryAddaptor;\r\nimport com.app.brandmania.Adapter.ViewPagerAdapterFrame;\r\nimport com.app.brandmania.Common.PreafManager;\r\nimport com.app.brandmania.Common.ResponseHandler;\r\nimport com.app.brandmania.Model.DashBoardItem;\r\nimport com.app.brandmania.Model.FrameItem;\r\nimport com.app.brandmania.Model.ImageList;\r\nimport com.app.brandmania.R;\r\nimport com.app.brandmania.Utils.APIs;\r\nimport com.app.brandmania.Utils.CodeReUse;\r\nimport com.app.brandmania.Utils.Utility;\r\nimport com.app.brandmania.databinding.ActivityViewAllImageBinding;\r\nimport com.jaredrummler.android.colorpicker.ColorPickerDialogListener;\r\nimport com.jaredrummler.android.colorpicker.ColorPickerView;\r\nimport com.theartofdev.edmodo.cropper.CropImage;\r\nimport com.theartofdev.edmodo.cropper.CropImageView;\r\n\r\nimport org.json.JSONArray;\r\nimport org.json.JSONException;\r\nimport org.json.JSONObject;\r\n\r\nimport java.io.File;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.FileOutputStream;\r\nimport java.io.IOException;\r\nimport java.io.InputStream;\r\nimport java.net.HttpURLConnection;\r\nimport java.net.URL;\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.ArrayList;\r\nimport java.util.Date;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\n\r\nimport smartdevelop.ir.eram.showcaseviewlib.GuideView;\r\nimport smartdevelop.ir.eram.showcaseviewlib.config.DismissType;\r\nimport smartdevelop.ir.eram.showcaseviewlib.config.Gravity;\r\nimport smartdevelop.ir.eram.showcaseviewlib.listener.GuideListener;\r\n\r\nimport static android.view.WindowManager.LayoutParams.SOFT_INPUT_ADJUST_PAN;\r\nimport static com.app.brandmania.Adapter.ImageCategoryAddaptor.FROM_VIEWALL;\r\n\r\npublic class ViewAllImage extends BaseActivity implements ImageCateItemeInterFace,alertListenerCallback, ITextColorChangeEvent, IFontChangeEvent,ITextBoldEvent, IItaliTextEvent, ColorPickerDialogListener, IUnderLineTextEvent, IColorChange, ColorPickerView.OnColorChangedListener, ITextSizeEvent {\r\n    Activity act;\r\n    ViewPager viewPager;\r\n    private boolean isLoading = false;\r\n    ArrayList<ImageList> AddFavorite=new ArrayList<>();\r\n    private ActivityViewAllImageBinding binding;\r\n    ArrayList<BrandListItem> multiListItems=new ArrayList<>();\r\n    ArrayList<ImageList> menuModels = new ArrayList<>();\r\n    ArrayList<FrameItem> brandListItems = new ArrayList<>();\r\n    public static final int DOWLOAD = 1;\r\n    public static final int ADDFAV = 3;\r\n    private static final int REQUEST_CALL = 1;\r\n    public static final int REMOVEFAV = 3;\r\n    private String is_frame=\"\";\r\n    private String is_payment_pending=\"\";\r\n    private String packagee=\"\";\r\n    ArrayList<FrameItem> viewPagerItems = new ArrayList<>();\r\n    PreafManager preafManager;\r\n    Gson gson;\r\n    String Website;\r\n\r\n    private ProgressDialog simpleWaitDialog;\r\n    private DashBoardItem imageList;\r\n    private ImageList selectedObject;\r\n    LinearLayout sliderDotspanel;\r\n    private int dotscount;\r\n    private ImageView[] dots;\r\n    Drawable drawable;\r\n    FrameItem selectedModelFromView;\r\n    AlertDialog.Builder alertDialogBuilder;\r\n    File new_file;\r\n    private Uri mCropImageUri;\r\n    ImageView imageView;\r\n    TextView selectedForEdit;\r\n    View selectedForBackgroundChange;\r\n    int editorFragment;\r\n\r\n\r\n    int FramePrimaryOrSecondary=0;\r\n    @Override\r\n    public void onCreate(Bundle savedInstanceState) {\r\n        setTheme(R.style.AppTheme_material_theme);\r\n        super.onCreate(savedInstanceState);\r\n        act = this;\r\n        captureScreenShort();\r\n        act.getWindow().setSoftInputMode(SOFT_INPUT_ADJUST_PAN);\r\n        binding = DataBindingUtil.setContentView(act, R.layout.activity_view_all_image);\r\n        getWindow().setFlags(WindowManager.LayoutParams.FLAG_SECURE, WindowManager.LayoutParams.FLAG_SECURE);\r\n        preafManager = new PreafManager(this);\r\n        binding.titleName.setSelected(true);\r\n        gson = new Gson();\r\n        Log.e(\"PHONE_NUMBER\",gson.toJson(preafManager.getActiveBrand()));\r\n        selectedObject = gson.fromJson(getIntent().getStringExtra(\"selectedimage\"), ImageList.class);\r\n        Log.e(\"selectedObject\",gson.toJson(selectedObject));\r\n        getFrame();\r\n        //showAlertDialogButtonClicked();\r\n        //getBrandList();\r\n        getBrandList();\r\n        //   Toast.makeText(act,binding.customFrameWebsite.getText().toString(),Toast.LENGTH_LONG).show();\r\n\r\n        Website=preafManager.getActiveBrand().getWebsite();\r\n\r\n       /* binding.swipeContainer.setColorSchemeResources(R.color.colorPrimary, R.color.colorsecond, R.color.colorthird);\r\n        binding.swipeContainer.setOnRefreshListener(new SwipeRefreshLayout.OnRefreshListener() {\r\n            @Override\r\n            public void onRefresh() {\r\n\r\n                startAnimation();\r\n\r\n                getImageCtegory();\r\n                // startAnimation();\r\n                //getNotice(startDate, endDate);\r\n\r\n            }\r\n        });*/\r\n\r\n        imageList = gson.fromJson(getIntent().getStringExtra(\"detailsObj\"), DashBoardItem.class);\r\n        binding.titleName.setText(imageList.getName());\r\n        getImageCtegory();\r\n        binding.backIcon.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                onBackPressed();\r\n            }\r\n        });\r\n        binding.fabroutIcon.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                selectedObject.setFrameId(selectedModelFromView.getFrameId());\r\n                Log.e(\"FrameIdWithImage\",selectedObject.getFrameId());\r\n                preafManager.AddToMyFavorites(selectedObject);\r\n                if (binding.fabroutIcon.getVisibility()==View.VISIBLE)\r\n                {\r\n                    binding.fabroutIcon.setVisibility(View.GONE);\r\n                    binding.addfabroutIcon.setVisibility(View.VISIBLE);\r\n                }\r\n                Log.e(\"FAVVV\",gson.toJson(preafManager.getSavedFavorites()));\r\n\r\n                dowloadAndShare(ADDFAV);\r\n            }\r\n        });\r\n        binding.addfabroutIcon.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                selectedObject.setFrameId(selectedModelFromView.getFrameId());\r\n                preafManager.removeFromMyFavorites(selectedObject);\r\n                if (binding.addfabroutIcon.getVisibility()==View.VISIBLE)\r\n                {\r\n                    binding.addfabroutIcon.setVisibility(View.GONE);\r\n                    binding.fabroutIcon.setVisibility(View.VISIBLE);\r\n                }\r\n                Log.e(\"FAVVV\",gson.toJson(preafManager.getSavedFavorites()));\r\n                removeFavourit(REMOVEFAV);\r\n            }\r\n        });\r\n        binding.downloadIcon.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                alertDialogBuilder = new AlertDialog.Builder(act);\r\n                alertDialogBuilder.setTitle(\"Save image\");\r\n                alertDialogBuilder.setMessage(\"You sure to save your image?\");\r\n                alertDialogBuilder.setPositiveButton(\"yes\",\r\n                        new DialogInterface.OnClickListener() {\r\n                            @Override\r\n                            public void onClick(DialogInterface arg0, int arg1) {\r\n\r\n                                requestAgain();\r\n                                // startSave();\r\n                                //checkPermisionForDontAskAgain();\r\n                                Log.e(\"CSelectedImg\",gson.toJson(selectedModelFromView.getFrame1()));\r\n                                new DownloadImageTask(selectedModelFromView.getFrame1()).execute(selectedModelFromView.getFrame1());\r\n                                dowloadAndShare(DOWLOAD);\r\n                            }\r\n                        });\r\n                alertDialogBuilder.setNegativeButton(\"No\", new DialogInterface.OnClickListener() {\r\n                    public void onClick(DialogInterface dialog, int which) {\r\n                        dialog.dismiss();\r\n                    }\r\n                });\r\n\r\n                AlertDialog alertDialog = alertDialogBuilder.create();\r\n                alertDialog.setCancelable(false);\r\n                alertDialog.show();\r\n\r\n            }\r\n        });\r\n        binding.shareIcon.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                requestAgain();\r\n                Log.e(\"CSelectedImg\",gson.toJson(selectedModelFromView.getFrame1()));\r\n                new ShareImageTask(selectedModelFromView.getFrame1()).execute(selectedModelFromView.getFrame1());\r\n                //checkPermisionForDontAskAgain();\r\n                dowloadAndShare(DOWLOAD);\r\n            }\r\n        });\r\n        binding.imgEmptyStateFirst.setVisibility(View.VISIBLE);\r\n        fetchAutomaticCustomeFrame();\r\n\r\n\r\n        if (preafManager.getActiveBrand().getLogo() != null && !preafManager.getActiveBrand().getLogo().isEmpty() ) {\r\n            binding.imgEmptyStateFirst.setVisibility(View.GONE);\r\n            binding.logoCustom.setVisibility(View.VISIBLE);\r\n            binding.logoCustom.setVisibility(View.VISIBLE);\r\n            Glide.with(act)\r\n                    .load(preafManager.getActiveBrand().getLogo())\r\n                    .into(binding.logoCustom);\r\n            binding.logoCustom.setOnClickListener(new View.OnClickListener() {\r\n                @Override\r\n                public void onClick(View view) {\r\n                    onSelectImageClick(view);\r\n                }\r\n            });\r\n        }\r\n        else\r\n        {\r\n            //  Toast.makeText(act,\"jdfhdsjhfkdsjfhdsjkds\",Toast.LENGTH_LONG).show();\r\n            binding.imgEmptyStateFirst.setVisibility(View.VISIBLE);\r\n            binding.logoCustom.setVisibility(View.GONE);\r\n\r\n\r\n            binding.logoCustom.setOnClickListener(new View.OnClickListener() {\r\n                @Override\r\n                public void onClick(View view) {\r\n                    onSelectImageClick(view);\r\n                }\r\n            });\r\n            binding.logoCard.setOnClickListener(new View.OnClickListener() {\r\n                @Override\r\n                public void onClick(View view) {\r\n                    onSelectImageClick(view);\r\n                }\r\n            });\r\n        }\r\n\r\n\r\n    }\r\n\r\n    public void checkPermisionForDontAskAgain(){\r\n        AlertDialog.Builder alertDialog;\r\n        AlertDialog dialog = null;\r\n        if (ActivityCompat.shouldShowRequestPermissionRationale(act,\r\n                Manifest.permission.WRITE_EXTERNAL_STORAGE)) {\r\n            ActivityCompat.requestPermissions(act,\r\n                    new String[]{Manifest.permission.WRITE_EXTERNAL_STORAGE},\r\n                    CodeReUse.ASK_PERMISSSION);\r\n\r\n        } else {\r\n            alertDialog=new AlertDialog.Builder(act)\r\n                    .setMessage(\"Click ok to allow permission from settings\")\r\n                    .setCancelable(true)\r\n                    .setPositiveButton(\"OK\", new DialogInterface.OnClickListener() {\r\n                        @Override\r\n                        public void onClick(DialogInterface dialogInterface, int i) {\r\n                            dialogInterface.dismiss();\r\n\r\n                            isPermissionGranted(false);\r\n                        }\r\n                    });\r\n            dialog=alertDialog.create();\r\n            dialog.show();\r\n        }\r\n\r\n        if (ActivityCompat.shouldShowRequestPermissionRationale(act,\r\n                Manifest.permission.READ_EXTERNAL_STORAGE)) {\r\n            ActivityCompat.requestPermissions(act,\r\n                    new String[]{Manifest.permission.READ_EXTERNAL_STORAGE},\r\n                    CodeReUse.ASK_PERMISSSION);\r\n\r\n        } else {\r\n        if (dialog!=null && !dialog.isShowing()) {\r\n            alertDialog = new AlertDialog.Builder(act)\r\n                    .setMessage(\"You have denied permission\")\r\n                    .setCancelable(true)\r\n                    .setPositiveButton(\"OK\", new DialogInterface.OnClickListener() {\r\n                        @Override\r\n                        public void onClick(DialogInterface dialogInterface, int i) {\r\n                            dialogInterface.dismiss();\r\n                            isPermissionGranted(false);\r\n                        }\r\n                    });\r\n\r\n            dialog = alertDialog.create();\r\n            dialog.show();\r\n        }\r\n        }\r\n\r\n    }\r\n    public void isPermissionGranted(boolean permission) {\r\n        if (!permission) {\r\n            startActivity(new Intent(android.provider.Settings.ACTION_APPLICATION_DETAILS_SETTINGS,\r\n                    Uri.fromParts(\"package\", act.getPackageName(), null)));\r\n        }\r\n    }\r\n    private int IntroCounter = 0;\r\n    public void startIntro(View view, String title, String desc) {\r\n\r\n        new GuideView.Builder(this)\r\n                .setTitle(title)\r\n                .setContentText(desc)\r\n                .setGravity(Gravity.center)\r\n                .setDismissType(DismissType.anywhere)\r\n                .setTargetView(view)\r\n                .setContentTextSize(12)\r\n                .setTitleTextSize(14)\r\n                .setGuideListener(new GuideListener() {\r\n                    @Override\r\n                    public void onDismiss(View view) {\r\n                        IntroCounter++;\r\n\r\n                            if (IntroCounter == 1) {\r\n                                startIntro(binding.shareIcon, \"Share\", \"Share Your Image Directly\");\r\n                            }\r\n                            if (IntroCounter == 2) {\r\n                                startIntro(binding.fabroutIcon, \"Save\", \"Save To Your Brand\");\r\n                            }\r\n                            if (IntroCounter == 3) {\r\n                                startIntro(binding.viewPager.getChildAt(0), \"Catogery\", \"List of images\");\r\n                            }\r\n/*\r\n                        if (!is_frame.equalsIgnoreCase(\"1\") && preafManager.getFrameIntro()) {\r\n                            preafManager.setFrameIntro(false);\r\n                            if (IntroCounter == 4) {\r\n                                startIntro(binding.logoCard, \"Logo\", \"Change Your Logo\");\r\n                            }\r\n                            if (IntroCounter == 5) {\r\n                                startIntro(binding.customAddressEdit1, \"AddressText\", \"Change Your Address Text color\");\r\n                            }\r\n                            if (IntroCounter == 6) {\r\n                                startIntro(binding.customeContactEdit1, \"ContactText\", \"Change Your Contact Text color\");\r\n                            }\r\n                            if (IntroCounter == 7) {\r\n                                startIntro(binding.bottomBarView1, \"Address Background\", \"Change Your Address Background color\");\r\n                            }\r\n                            if (IntroCounter == 8) {\r\n                                startIntro(binding.bottomBarView2, \"Contac Background\", \"Change Your Contact Background color\");\r\n                            }\r\n                        }*/\r\n                    }\r\n                })\r\n                .build()\r\n                .show();\r\n    }\r\n\r\n    public void startIntroForFrameOnly(View view, String title, String desc) {\r\n\r\n        new GuideView.Builder(this)\r\n                .setTitle(title)\r\n                .setContentText(desc)\r\n                .setGravity(Gravity.center)\r\n                .setDismissType(DismissType.anywhere)\r\n                .setTargetView(view)\r\n                .setContentTextSize(12)\r\n                .setTitleTextSize(14)\r\n                .setGuideListener(new GuideListener() {\r\n                    @Override\r\n                    public void onDismiss(View view) {\r\n                            IntroCounter++;\r\n\r\n                            if (IntroCounter == 1) {\r\n                                startIntroForFrameOnly(binding.customAddressEdit1, \"Add Text\", \"Add text like email-id or address\");\r\n                            }\r\n                            if (IntroCounter == 2) {\r\n                                startIntroForFrameOnly(binding.customeContactEdit1, \"Add Text\", \"Add your contact no. here\");\r\n                            }\r\n                            if (IntroCounter == 3) {\r\n                                startIntroForFrameOnly(binding.bottomBarView1, \"Background\", \"Change background color as you want\");\r\n                            }\r\n                            if (IntroCounter == 4) {\r\n                                startIntroForFrameOnly(binding.bottomBarView2, \"Background\", \"Change background color as you want\");\r\n                            }\r\n\r\n                    }\r\n                })\r\n                .build()\r\n                .show();\r\n    }\r\n    public void bottomFramgment(){\r\n        binding.tabLayout.addTab(binding.tabLayout.newTab().setText(convertFirstUpper(\"Category\")));\r\n\r\n        if (!is_frame.equalsIgnoreCase(\"1\")) {\r\n            binding.tabLayout.addTab(binding.tabLayout.newTab().setText(convertFirstUpper(\"Background\")));\r\n            binding.tabLayout.addTab(binding.tabLayout.newTab().setText(convertFirstUpper(\"Text\")));\r\n\r\n                IntroCounter=0;\r\n                preafManager.setFrameIntro(false);\r\n                startIntroForFrameOnly(binding.logoCard, \"Logo\", \"you can upload logo here\");\r\n            binding.tabLayout.addTab(binding.tabLayout.newTab().setText(convertFirstUpper(\"Footer\")));\r\n\r\n        }else{\r\n            if (preafManager.getViewAllActivityIntro()) {\r\n                startIntro(binding.downloadIcon,\"Download\",\"Download Image From here\");\r\n                preafManager.setViewAllActivityIntro(false);\r\n            }\r\n        }\r\n\r\n\r\n        binding.tabLayout.setTabTextColors(Color.parseColor(\"#727272\"), Color.parseColor(\"#ad2753\"));\r\n        binding.tabLayout.setTabGravity(TabLayout.GRAVITY_FILL);\r\n        final ViewAllTopTabAdapter adapter = new ViewAllTopTabAdapter(act, getSupportFragmentManager(), binding.tabLayout.getTabCount());\r\n        binding.viewPager.setAdapter(adapter);\r\n        binding.viewPager.addOnPageChangeListener(new TabLayout.TabLayoutOnPageChangeListener(binding.tabLayout));\r\n        binding.tabLayout.addOnTabSelectedListener(new TabLayout.OnTabSelectedListener() {\r\n            @Override\r\n            public void onTabSelected(TabLayout.Tab tab) {\r\n                binding.viewPager.setCurrentItem(tab.getPosition());\r\n                editorFragment=tab.getPosition();\r\n              //  handler(editorFragment);\r\n            }\r\n\r\n            @Override\r\n            public void onTabUnselected(TabLayout.Tab tab) {\r\n            }\r\n\r\n            @Override\r\n            public void onTabReselected(TabLayout.Tab tab) {\r\n            }\r\n        });\r\n        binding.customAddressEdit1.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                binding.viewPager.setCurrentItem(3);\r\n            }\r\n        });\r\n        binding.customeContactEdit1.setOnFocusChangeListener(new View.OnFocusChangeListener() {\r\n            @Override\r\n            public void onFocusChange(View view, boolean b) {\r\n                if (b==true)\r\n                {\r\n                    selectedForEdit=binding.customeContactEdit1;\r\n                    binding.viewPager.setCurrentItem(2);\r\n                    editorFragment=2;\r\n                }\r\n            }\r\n        });\r\n        binding.customAddressEdit1.setOnFocusChangeListener(new View.OnFocusChangeListener() {\r\n            @Override\r\n            public void onFocusChange(View view, boolean b) {\r\n                if (b==true)\r\n                {\r\n                    selectedForEdit=binding.customAddressEdit1;\r\n                    binding.viewPager.setCurrentItem(2);\r\n                    editorFragment=2;\r\n                }\r\n            }\r\n        });\r\n        binding.customFrameWebsite.setOnFocusChangeListener(new View.OnFocusChangeListener() {\r\n            @Override\r\n            public void onFocusChange(View view, boolean b) {\r\n                if (b==true)\r\n                {\r\n                    selectedForEdit=binding.customFrameWebsite;\r\n                    binding.viewPager.setCurrentItem(2);\r\n                    editorFragment=2;\r\n                }\r\n            }\r\n        });\r\n        binding.bottomBarView1.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                FramePrimaryOrSecondary=0;\r\n                selectedForBackgroundChange=binding.bottomBarView1;\r\n                binding.customAddressEdit1.clearFocus();\r\n                binding.customeContactEdit1.clearFocus();\r\n                binding.customFrameWebsite.clearFocus();\r\n                binding.viewPager.setCurrentItem(1);\r\n            }\r\n        });\r\n        binding.bottomBarView2.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                FramePrimaryOrSecondary=1;\r\n                selectedForBackgroundChange=binding.bottomBarView2;\r\n                binding.customAddressEdit1.clearFocus();\r\n                binding.customeContactEdit1.clearFocus();\r\n                binding.customFrameWebsite.clearFocus();\r\n                binding.viewPager.setCurrentItem(1);\r\n            }\r\n        });\r\n        binding.bottomBarView3.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                FramePrimaryOrSecondary=0;\r\n                selectedForBackgroundChange=binding.bottomBarView1;\r\n                binding.customAddressEdit1.clearFocus();\r\n                binding.customeContactEdit1.clearFocus();\r\n                binding.customFrameWebsite.clearFocus();\r\n                binding.viewPager.setCurrentItem(1);\r\n            }\r\n        });\r\n\r\n\r\n    }\r\n\r\n    //For CustomFrame\r\n    public void onSelectImageClick(View view) {\r\n        CropImage.startPickImageActivity(this);\r\n    }\r\n    public void LoadDataToUI(){\r\n        preafManager=new PreafManager(act);\r\n        if (selectedObject != null) {\r\n            binding.simpleProgressBar.setVisibility(View.GONE);\r\n            Glide.with(getApplicationContext()).load(selectedObject.getFrame()).into(binding.backgrounImageDuplicate);\r\n            Glide.with(getApplicationContext()).load(selectedObject.getFrame()).into(binding.recoImage);\r\n\r\n            AddFavorite= preafManager.getSavedFavorites();\r\n\r\n            if (AddFavorite!=null) {\r\n                for (int i = 0; i < AddFavorite.size(); i++) {\r\n                    Log.e(\"Fav--\",new Gson().toJson(AddFavorite.get(i)));\r\n                    Log.e(\"Print--\",new Gson().toJson(selectedModelFromView));\r\n\r\n                    if (AddFavorite.get(i).getId().equals(selectedObject.getId()) && AddFavorite.get(i).getFrameId().equalsIgnoreCase(selectedModelFromView.getFrameId())) {\r\n                        binding.addfabroutIcon.setVisibility(View.VISIBLE);\r\n                        binding.fabroutIcon.setVisibility(View.GONE);\r\n                        break;\r\n                    } else {\r\n                        binding.addfabroutIcon.setVisibility(View.GONE);\r\n                        binding.fabroutIcon.setVisibility(View.VISIBLE);\r\n\r\n                    }\r\n                }\r\n            }\r\n\r\n        }\r\n        else\r\n        {\r\n            binding.simpleProgressBar.setVisibility(View.VISIBLE);\r\n        }\r\n    }\r\n    public void  reloadSaved(){\r\n        AddFavorite= preafManager.getSavedFavorites();\r\n\r\n        if (AddFavorite!=null) {\r\n            for (int i = 0; i < AddFavorite.size(); i++) {\r\n\r\n                Log.e(\"Print-\",AddFavorite.get(i).getFrameId()+\"s\");\r\n                Log.e(\"Print--\",selectedModelFromView.getFrameId()+\"s\");\r\n\r\n                if (!AddFavorite.get(i).getId().equals(selectedObject.getId()) || !AddFavorite.get(i).getFrameId().equalsIgnoreCase(selectedModelFromView.getFrameId())) {\r\n                    binding.addfabroutIcon.setVisibility(View.GONE);\r\n                    binding.fabroutIcon.setVisibility(View.VISIBLE);\r\n                } else {\r\n                    binding.addfabroutIcon.setVisibility(View.VISIBLE);\r\n                    binding.fabroutIcon.setVisibility(View.GONE);\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    public void startShare(File new_file) {\r\n\r\n        Uri uri= Uri.parse(MediaStore.Images.Media.insertImage(getContentResolver(), BitmapFactory.decodeFile(new_file.getPath()),null,null));\r\n        Intent share = new Intent(Intent.ACTION_SEND);\r\n        share.setType(\"image/*\");\r\n        share.putExtra(Intent.EXTRA_STREAM, uri);\r\n        startActivity(Intent.createChooser(share, \"Share Image\"));\r\n\r\n    }\r\n    private void startAnimation() {\r\n        binding.shimmerViewContainer.startShimmer();\r\n        binding.shimmerViewContainer.setVisibility(View.VISIBLE);\r\n        binding.viewRecoRecycler.setVisibility(View.GONE);\r\n\r\n    }\r\n    Bitmap drawableFromUrl(String url)  {\r\n\r\n        HttpURLConnection connection = null;\r\n        InputStream input=null;\r\n        try {\r\n            connection = (HttpURLConnection)new URL(url) .openConnection();\r\n            connection.setRequestProperty(\"User-agent\",\"Mozilla/4.0\");\r\n            connection.connect();\r\n            input = connection.getInputStream();\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n        return BitmapFactory.decodeStream(input);\r\n    }\r\n    BitmapDrawable FrameDrawbable;\r\n    public void startSave() {\r\n        //Bitmap FrameDrawbable = drawableFromUrl(selectedModelFromView.getFrame1());\r\n        Drawable d = FrameDrawbable;\r\n        Drawable ImageDrawable = (BitmapDrawable) binding.backgrounImageDuplicate.getDrawable();\r\n        Bitmap merged = Bitmap.createBitmap(1000, 1000, Bitmap.Config.ARGB_8888);\r\n        Canvas canvas = new Canvas(merged);\r\n        d.setBounds(0, 0, 1000, 1000);\r\n        ImageDrawable.setBounds(0, 0, 1000, 1000);\r\n        ImageDrawable.draw(canvas);\r\n        d.draw(canvas);\r\n        binding.allSetImage.setImageBitmap(merged);\r\n\r\n        FileOutputStream fileOutputStream = null;\r\n        File file = getDisc();\r\n        if (!file.exists() && !file.mkdirs()) {\r\n            return;\r\n        }\r\n        SimpleDateFormat simpleDateFormat = new SimpleDateFormat(\"yyyymmsshhmmss\");\r\n        String date = simpleDateFormat.format(new Date());\r\n        String name = \"Img\" + date + \".jpg\";\r\n        String file_name = file.getAbsolutePath() + \"/\" + name;\r\n        new_file = new File(file_name);\r\n        try {\r\n            fileOutputStream = new FileOutputStream(new_file);\r\n            Bitmap bitmap = merged;//viewToBitmap(binding.allSetImage,binding.allSetImage.getWidth(),binding.recoImage.getHeight());\r\n            bitmap.compress(Bitmap.CompressFormat.JPEG, 100, fileOutputStream);\r\n\r\n            fileOutputStream.flush();\r\n            fileOutputStream.close();\r\n            Toast.makeText(act, \"Your image is downloaded\", Toast.LENGTH_SHORT).show();\r\n            // startShare(new_file);\r\n        } catch (FileNotFoundException e) {\r\n            e.printStackTrace();\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n        refreshgallery(new_file);\r\n    }\r\n    public void startsShare() {\r\n        //Bitmap FrameDrawbable = drawableFromUrl(selectedModelFromView.getFrame1());\r\n        Drawable d = FrameDrawbable;\r\n        Drawable ImageDrawable = (BitmapDrawable) binding.backgrounImageDuplicate.getDrawable();\r\n        Bitmap merged = Bitmap.createBitmap(1000, 1000, Bitmap.Config.ARGB_8888);\r\n        Canvas canvas = new Canvas(merged);\r\n        d.setBounds(0, 0, 1000, 1000);\r\n        ImageDrawable.setBounds(0, 0, 1000, 1000);\r\n        ImageDrawable.draw(canvas);\r\n        d.draw(canvas);\r\n        binding.allSetImage.setImageBitmap(merged);\r\n\r\n        FileOutputStream fileOutputStream = null;\r\n        File file = getDisc();\r\n        if (!file.exists() && !file.mkdirs()) {\r\n            return;\r\n        }\r\n        SimpleDateFormat simpleDateFormat = new SimpleDateFormat(\"yyyymmsshhmmss\");\r\n        String date = simpleDateFormat.format(new Date());\r\n        String name = \"Img\" + date + \".jpg\";\r\n        String file_name = file.getAbsolutePath() + \"/\" + name;\r\n        new_file = new File(file_name);\r\n        try {\r\n            fileOutputStream = new FileOutputStream(new_file);\r\n            Bitmap bitmap = merged;//viewToBitmap(binding.allSetImage,binding.allSetImage.getWidth(),binding.recoImage.getHeight());\r\n            bitmap.compress(Bitmap.CompressFormat.JPEG, 100, fileOutputStream);\r\n\r\n            fileOutputStream.flush();\r\n            fileOutputStream.close();\r\n            startShare(new_file);\r\n        } catch (FileNotFoundException e) {\r\n            e.printStackTrace();\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n        refreshgallery(new_file);\r\n    }\r\n    //For RefresGalary........................\r\n    public void refreshgallery(File file) {\r\n        Intent intent = new Intent(Intent.ACTION_MEDIA_SCANNER_SCAN_FILE);\r\n        intent.setData(Uri.fromFile(file));\r\n        sendBroadcast(intent);\r\n    }\r\n    //For CreatFileeDisc For Download Image.........................\r\n    private File getDisc() {\r\n        File file = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DCIM);\r\n        return new File(file, \"Image Demo\");\r\n    }\r\n    //For SetAddaptor.................................\r\n    public void setAdapter() {\r\n        ImageCategoryAddaptor menuAddaptor = new ImageCategoryAddaptor(menuModels, act);\r\n        menuAddaptor.setLayoutType(FROM_VIEWALL);\r\n        RecyclerView.LayoutManager mLayoutManager = new GridLayoutManager(this, 4);\r\n        binding.viewRecoRecycler.setLayoutManager(mLayoutManager);\r\n        binding.viewRecoRecycler.setHasFixedSize(true);\r\n        binding.viewRecoRecycler.setAdapter(menuAddaptor);\r\n\r\n        if (getIntent().hasExtra(\"viewAll\")) {\r\n            binding.simpleProgressBar.setVisibility(View.GONE);\r\n            selectedObject = menuModels.get(0);\r\n            LoadDataToUI();\r\n        }\r\n        else\r\n        {\r\n            binding.simpleProgressBar.setVisibility(View.VISIBLE);\r\n        }\r\n\r\n\r\n    }\r\n    //For GetImageCategory..............................\r\n    private void getImageCtegory() {\r\n      //  binding.swipeContainer.setRefreshing(true);\r\n        Utility.Log(\"API : \", APIs.GET_IMAGEBUID_CATEGORY);\r\n        StringRequest stringRequest = new StringRequest(Request.Method.POST, APIs.GET_IMAGEBUID_CATEGORY + \"/1\", new Response.Listener<String>() {\r\n            @Override\r\n            public void onResponse(String response) {\r\n             //   binding.swipeContainer.setRefreshing(false);\r\n                Utility.Log(\"GET_IMAGE_CATEGORY : \", response);\r\n\r\n                try {\r\n                    JSONObject jsonObject = new JSONObject(response);\r\n\r\n                    menuModels = ResponseHandler.HandleGetImageByIdCategory(jsonObject);\r\n\r\n                    if (menuModels != null && menuModels.size() != 0) {\r\n                        setAdapter();\r\n                        binding.shimmerViewContainer.stopShimmer();\r\n                        binding.shimmerViewContainer.setVisibility(View.GONE);\r\n                        binding.viewRecoRecycler.setVisibility(View.VISIBLE);\r\n                        binding.emptyStateLayout.setVisibility(View.GONE);\r\n                    }\r\n                    if (menuModels == null || menuModels.size() == 0) {\r\n                        binding.emptyStateLayout.setVisibility(View.VISIBLE);\r\n                        binding.viewRecoRecycler.setVisibility(View.GONE);\r\n                        binding.shimmerViewContainer.stopShimmer();\r\n                        binding.shimmerViewContainer.setVisibility(View.GONE);\r\n                    }\r\n                } catch (JSONException e) {\r\n                    e.printStackTrace();\r\n                }\r\n\r\n            }\r\n        },\r\n                new Response.ErrorListener() {\r\n                    @Override\r\n                    public void onErrorResponse(VolleyError error) {\r\n                      //  binding.swipeContainer.setRefreshing(false);\r\n                        error.printStackTrace();\r\n//                        String body;\r\n//                        body = new String(error.networkResponse.data, StandardCharsets.UTF_8);\r\n//                        Log.e(\"Load-Get_Exam \", body);\r\n\r\n                    }\r\n                }\r\n        ) {\r\n            /**\r\n             * Passing some request headers*\r\n             */\r\n            @Override\r\n            public Map<String, String> getHeaders() throws AuthFailureError {\r\n                Map<String, String> params = new HashMap<String, String>();\r\n                params.put(\"Accept\", \"application/x-www-form-urlencoded\");//application/json\r\n                params.put(\"Content-Type\", \"application/x-www-form-urlencoded\");\r\n                params.put(\"Authorization\", \"Bearer\" + preafManager.getUserToken());\r\n                Log.e(\"Token\", params.toString());\r\n                return params;\r\n            }\r\n\r\n            @Override\r\n            protected Map<String, String> getParams() {\r\n                Map<String, String> params = new HashMap<>();\r\n\r\n                if (imageList != null)\r\n                    params.put(\"image_category_id\", imageList.getId());\r\n                else\r\n                    params.put(\"image_category_id\", selectedObject.getId());\r\n\r\n                Utility.Log(\"POSTED-PARAMS-\", params.toString());\r\n                return params;\r\n            }\r\n\r\n        };\r\n\r\n        RequestQueue queue = Volley.newRequestQueue(act);\r\n        queue.add(stringRequest);\r\n    }\r\n    //For Download,Share and Faviorit Api...............\r\n    private void dowloadAndShare(final int download) {\r\n\r\n        Utility.Log(\"API : \", APIs.DOWNLOAD_SHARE);\r\n        StringRequest stringRequest = new StringRequest(Request.Method.POST, APIs.DOWNLOAD_SHARE, new Response.Listener<String>() {\r\n            @Override\r\n            public void onResponse(String response) {\r\n                Utility.Log(\"DOWNLOAD_SHARE : \", response);\r\n                try {\r\n                    JSONObject jsonObject = new JSONObject(response);\r\n                } catch (JSONException e) {\r\n                    e.printStackTrace();\r\n                }\r\n\r\n            }\r\n        },\r\n                new Response.ErrorListener() {\r\n                    @Override\r\n                    public void onErrorResponse(VolleyError error) {\r\n\r\n                        error.printStackTrace();\r\n\r\n                    }\r\n                }\r\n        ) {\r\n            /**\r\n             * Passing some request headers*\r\n             */\r\n            @Override\r\n            public Map<String, String> getHeaders() throws AuthFailureError {\r\n                Map<String, String> params = new HashMap<String, String>();\r\n                params.put(\"Accept\", \"application/x-www-form-urlencoded\");//application/json\r\n                params.put(\"Content-Type\", \"application/x-www-form-urlencoded\");\r\n                params.put(\"Authorization\", \"Bearer\" + preafManager.getUserToken());\r\n                Log.e(\"Token\", params.toString());\r\n                return params;\r\n            }\r\n\r\n            @Override\r\n            protected Map<String, String> getParams() {\r\n                Map<String, String> params = new HashMap<>();\r\n                if (imageList != null) {\r\n                    params.put(\"brand_id\", preafManager.getActiveBrand().getId());\r\n                    params.put(\"image_id\", selectedObject.getImageid());\r\n                    params.put(\"frame_id\", selectedModelFromView.getFrameId());\r\n\r\n                } else {\r\n                    params.put(\"brand_id\",  preafManager.getActiveBrand().getId());\r\n                    params.put(\"image_id\", selectedObject.getImageid());\r\n\r\n\r\n                }\r\n                params.put(\"type\", String.valueOf(download));\r\n                Utility.Log(\"POSTED-PARAMS-\", params.toString());\r\n                return params;\r\n            }\r\n\r\n        };\r\n\r\n        RequestQueue queue = Volley.newRequestQueue(act);\r\n        queue.add(stringRequest);\r\n    }\r\n    //For ImageSelectInterface.......................\r\n    @Override public void ImageCateonItemSelection(int position, ImageList listModel) {\r\n\r\n        if (selectedObject!=null) {\r\n            binding.simpleProgressBar.setVisibility(View.GONE);\r\n            selectedObject = listModel;\r\n            LoadDataToUI();\r\n        }\r\n        else\r\n        {\r\n            binding.simpleProgressBar.setVisibility(View.VISIBLE);\r\n        }\r\n    }\r\n    // For Frmae Loade ..................................\r\n    public void frameViewPager() {\r\n        viewPager = (ViewPager) findViewById(R.id.recoframe);\r\n        sliderDotspanel = (LinearLayout) findViewById(R.id.SliderDots);\r\n\r\n        viewPagerItems =brandListItems;// preafManager.getActiveBrand().getFrame();\r\n        Log.e(\"Frames\",gson.toJson(preafManager.getActiveBrand().getFrame()));\r\n        if (viewPagerItems!=null && viewPagerItems.size()!=0) {\r\n            Log.e(\"BrandListSize\", String.valueOf(viewPagerItems.size()) + \"kkl\");\r\n            Gson gson = new Gson();\r\n            Log.e(\"Viewwwjhfjkdhsjk\", gson.toJson(viewPagerItems));\r\n            ViewPagerAdapterFrame viewPagerAdapter = new ViewPagerAdapterFrame(viewPagerItems, this);\r\n            viewPager.setAdapter(viewPagerAdapter);\r\n            dotscount = viewPagerAdapter.getCount();\r\n            int h = viewPager.getCurrentItem();\r\n            if (dotscount > 0) {\r\n                dots = new ImageView[dotscount];\r\n                for (int i = 0; i < dotscount; i++) {\r\n\r\n                    dots[i] = new ImageView(this);\r\n                    dots[i].setImageDrawable(ContextCompat.getDrawable(getApplicationContext(), R.drawable.non_active_dot));\r\n\r\n                    LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(LinearLayout.LayoutParams.WRAP_CONTENT, LinearLayout.LayoutParams.WRAP_CONTENT);\r\n\r\n                    params.setMargins(8, 0, 8, 0);\r\n\r\n                    sliderDotspanel.addView(dots[i], params);\r\n                }\r\n                dots[0].setImageDrawable(ContextCompat.getDrawable(getApplicationContext(), R.drawable.active_dot));\r\n            }\r\n            viewPager.addOnPageChangeListener(new ViewPager.OnPageChangeListener() {\r\n                @Override\r\n                public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) {\r\n\r\n\r\n                }\r\n\r\n                @Override\r\n                public void onPageSelected(int position) {\r\n\r\n                    for (int i = 0; i < dotscount; i++) {\r\n                        dots[i].setImageDrawable(ContextCompat.getDrawable(getApplicationContext(), R.drawable.non_active_dot));\r\n                    }\r\n                    try {\r\n                        selectedModelFromView = (FrameItem) viewPagerItems.get(position).clone();\r\n\r\n                    } catch (CloneNotSupportedException e) {\r\n                        e.printStackTrace();\r\n                    }\r\n                    reloadSaved();\r\n                    //drawable = drawableFromUrl(selectedModelFromView.getFrame1());\r\n                    dots[position].setImageDrawable(ContextCompat.getDrawable(getApplicationContext(), R.drawable.active_dot));\r\n                }\r\n\r\n                @Override\r\n                public void onPageScrollStateChanged(int state) {\r\n                    reloadSaved();\r\n                }\r\n            });\r\n            try {\r\n                selectedModelFromView = (FrameItem) viewPagerItems.get(viewPager.getCurrentItem()).clone();\r\n            } catch (CloneNotSupportedException e) {\r\n                e.printStackTrace();\r\n            }\r\n        }\r\n        else{\r\n            // showAlertDialogButtonClicked();\r\n        }\r\n\r\n        LoadDataToUI();\r\n\r\n    }\r\n    public void AlertBoxForSaveFrame() {\r\n        alertDialogBuilder = new AlertDialog.Builder(act);\r\n        alertDialogBuilder.setTitle(\"Save Frame\");\r\n        alertDialogBuilder.setMessage(\"Do you want to save your template, you will not able to change once save.\");\r\n        alertDialogBuilder.setPositiveButton(\"yes\",\r\n                new DialogInterface.OnClickListener() {\r\n                    @Override\r\n                    public void onClick(DialogInterface arg0, int arg1) {\r\n                        binding.customFrameRelative.setVisibility(View.GONE);\r\n                        binding.FrameImageDuplicate.setVisibility(View.GONE);\r\n                        if (binding.customeContactEdit1.getText().toString().length()==0)\r\n                        {\r\n                            binding.customeContactEdit1.setVisibility(View.GONE);\r\n                        }\r\n                        if (binding.customFrameWebsite.getText().toString().length()==0)\r\n                        {\r\n                            binding.customFrameWebsite.setVisibility(View.GONE);\r\n                        }\r\n                        if (binding.customAddressEdit1.getText().toString().length()==0)\r\n                        {\r\n                            binding.customAddressEdit1.setVisibility(View.GONE);\r\n                        }\r\n                        getBitmapFromView();\r\n\r\n                    }\r\n                });\r\n        alertDialogBuilder.setNegativeButton(\"No\", new DialogInterface.OnClickListener() {\r\n            public void onClick(DialogInterface dialog, int which) {\r\n                dialog.dismiss();\r\n            }\r\n        });\r\n\r\n        AlertDialog alertDialog = alertDialogBuilder.create();\r\n        alertDialog.setCancelable(false);\r\n        alertDialog.show();\r\n\r\n\r\n\r\n    }\r\n    //For GetFrame\r\n    @Override public void alertListenerClick() {\r\n        requestAgain();\r\n    }\r\n    private void requestAgain() {\r\n        ActivityCompat.requestPermissions(act,\r\n                new String[]{Manifest.permission.CAMERA, Manifest.permission.WRITE_EXTERNAL_STORAGE,\r\n                        Manifest.permission.READ_EXTERNAL_STORAGE},\r\n                CodeReUse.ASK_PERMISSSION);\r\n    }\r\n    private void getFrame() {\r\n        Utility.Log(\"API : \", APIs.GET_FRAME);\r\n        StringRequest stringRequest = new StringRequest(Request.Method.POST, APIs.GET_FRAME,new Response.Listener<String>() {\r\n            @Override\r\n            public void onResponse(String response) {\r\n\r\n                Utility.Log(\"GET_FRAME : \", response);\r\n\r\n                try {\r\n                    JSONObject jsonObject = new JSONObject(response);\r\n                    brandListItems = ResponseHandler.HandleGetFrame(jsonObject);\r\n                    JSONObject datajsonobjecttt =ResponseHandler.getJSONObject(jsonObject, \"data\");\r\n                    is_frame= datajsonobjecttt.getString(\"is_frame\");\r\n                    if (is_frame.equals(\"1\")) {\r\n                        binding.customFrameRelative.setVisibility(View.GONE);\r\n                        // Toast.makeText(act,brandListItems.size()+\"\",Toast.LENGTH_LONG).show();\r\n                        frameViewPager();\r\n                        is_payment_pending= datajsonobjecttt.getString(\"is_payment_pending\");\r\n                        packagee=datajsonobjecttt.getString(\"package\");\r\n                        if (packagee.equals(\"\")) {\r\n                            binding.shareIcon.setOnClickListener(new View.OnClickListener() {\r\n                                @Override\r\n                                public void onClick(View view) {\r\n                                    Utility.showAlertForPackage(act,ResponseHandler.getString(datajsonobjecttt,\"package_message\"));\r\n                                }\r\n                            });\r\n                            binding.fabroutIcon.setOnClickListener(new View.OnClickListener() {\r\n                                @Override\r\n                                public void onClick(View view) {\r\n                                    Utility.showAlertForPackage(act,ResponseHandler.getString(datajsonobjecttt,\"package_message\"));\r\n                                }\r\n                            });\r\n                            binding.downloadIcon.setOnClickListener(new View.OnClickListener() {\r\n                                @Override\r\n                                public void onClick(View view) {\r\n                                    Utility.showAlertForPackage(act,ResponseHandler.getString(datajsonobjecttt,\"package_message\"));\r\n\r\n                                }\r\n                            });\r\n\r\n\r\n                        }\r\n                        else if (is_payment_pending.equals(\"1\"))\r\n                        {\r\n\r\n                            binding.shareIcon.setOnClickListener(new View.OnClickListener() {\r\n                                @Override\r\n                                public void onClick(View view) {\r\n                                    Utility.showAlertForPayment(act,ResponseHandler.getString(datajsonobjecttt,\"payment_message\"));\r\n                                }\r\n                            });\r\n                            binding.fabroutIcon.setOnClickListener(new View.OnClickListener() {\r\n                                @Override\r\n                                public void onClick(View view) {\r\n                                    Utility.showAlertForPayment(act,ResponseHandler.getString(datajsonobjecttt,\"payment_message\"));\r\n                                }\r\n                            });\r\n                            binding.downloadIcon.setOnClickListener(new View.OnClickListener() {\r\n                                @Override\r\n                                public void onClick(View view) {\r\n                                    Utility.showAlertForPayment(act,ResponseHandler.getString(datajsonobjecttt,\"payment_message\"));\r\n                                }\r\n                            });\r\n                        }\r\n                        else\r\n                        {\r\n                            // Toast.makeText(act,\"TTTTTTTT\",Toast.LENGTH_LONG).show();\r\n                        }\r\n\r\n                    }\r\n                    else\r\n                    {\r\n                        LoadDataToUI();\r\n                        //fetchAutomaticCustomeFrame();\r\n                        binding.customFrameRelative.setVisibility(View.VISIBLE);\r\n                        binding.recoframe.setVisibility(View.GONE);\r\n                        binding.shareIcon.setOnClickListener(new View.OnClickListener() {\r\n                            @Override\r\n                            public void onClick(View view) {\r\n                                AlertBoxForSaveFrame();                            }\r\n                        });\r\n                        binding.fabroutIcon.setOnClickListener(new View.OnClickListener() {\r\n                            @Override\r\n                            public void onClick(View view) {\r\n                                AlertBoxForSaveFrame();                            }\r\n                        });\r\n                        binding.downloadIcon.setOnClickListener(new View.OnClickListener() {\r\n                            @Override\r\n                            public void onClick(View view) {\r\n                                AlertBoxForSaveFrame();\r\n                            }\r\n                        });\r\n                    }\r\n\r\n                    bottomFramgment();\r\n\r\n                } catch (JSONException e) {\r\n                    e.printStackTrace();\r\n                }\r\n\r\n            }\r\n        },\r\n                new Response.ErrorListener() {\r\n                    @Override\r\n                    public void onErrorResponse(VolleyError error) {\r\n\r\n                        error.printStackTrace();\r\n//                        String body;\r\n//                        body = new String(error.networkResponse.data, StandardCharsets.UTF_8);\r\n//                        Log.e(\"Load-Get_Exam \", body);\r\n\r\n                    }\r\n                }\r\n        ) {\r\n            /**\r\n             * Passing some request headers*\r\n             */\r\n            @Override\r\n            public Map<String, String> getHeaders() throws AuthFailureError {\r\n                Map<String, String> params = new HashMap<String, String>();\r\n                params.put(\"Accept\", \"application/x-www-form-urlencoded\");//application/json\r\n                params.put(\"Content-Type\", \"application/x-www-form-urlencoded\");\r\n                params.put(\"Authorization\", \"Bearer\" + preafManager.getUserToken());\r\n                Log.e(\"Token\", params.toString());\r\n                return params;\r\n            }\r\n\r\n            @Override\r\n            protected Map<String, String> getParams() {\r\n                Map<String, String> params = new HashMap<>();\r\n                params.put(\"brand_id\",preafManager.getActiveBrand().getId());\r\n                Utility.Log(\"POSTED-PARAMS-\", params.toString());\r\n                return params;\r\n            }\r\n\r\n        };\r\n\r\n        RequestQueue queue = Volley.newRequestQueue(act);\r\n        queue.add(stringRequest);\r\n    }\r\n    @Override public void onBackPressed() {CodeReUse.activityBackPress(act); }\r\n\r\n    @Override\r\n    public void onChooseColor(int colorCode) {\r\n        if (editorFragment==2 && selectedForEdit!=null) {\r\n            selectedForEdit.setTextColor(colorCode);\r\n        }\r\n        if (editorFragment==1 && selectedForBackgroundChange!=null){\r\n            if (FramePrimaryOrSecondary==0){\r\n                binding.bottomBarView1.setBackgroundColor(colorCode);\r\n                binding.bottomBarView3.setBackgroundTintList(ColorStateList.valueOf(colorCode));\r\n                binding.topBarView2.setBackgroundColor(colorCode);\r\n                binding.rightBarView1.setBackgroundColor(colorCode);\r\n                binding.leftBarView2.setBackgroundColor(colorCode);\r\n            }else {\r\n                binding.bottomBarView2.setBackgroundColor(colorCode);\r\n                binding.topBarView1.setBackgroundColor(colorCode);\r\n                binding.leftBarView1.setBackgroundColor(colorCode);\r\n                binding.rightBarView2.setBackgroundColor(colorCode);\r\n            }\r\n            selectedForBackgroundChange.setBackgroundColor(colorCode);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void onColorChanged(int colorCode) {\r\n        if (editorFragment==2 && selectedForEdit!=null) {\r\n            selectedForEdit.setTextColor(colorCode);\r\n        }\r\n         if (editorFragment==1 && selectedForBackgroundChange!=null){\r\n            if (FramePrimaryOrSecondary==0){\r\n                binding.bottomBarView1.setBackgroundColor(colorCode);\r\n                binding.bottomBarView3.setBackgroundTintList(ColorStateList.valueOf(colorCode));\r\n                binding.topBarView2.setBackgroundColor(colorCode);\r\n                binding.rightBarView1.setBackgroundColor(colorCode);\r\n                binding.leftBarView2.setBackgroundColor(colorCode);\r\n            }else {\r\n                binding.bottomBarView2.setBackgroundColor(colorCode);\r\n                binding.topBarView1.setBackgroundColor(colorCode);\r\n                binding.leftBarView1.setBackgroundColor(colorCode);\r\n                binding.rightBarView2.setBackgroundColor(colorCode);\r\n            }\r\n            selectedForBackgroundChange.setBackgroundColor(colorCode);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void onColorSelected(int dialogId, int colorCode) {\r\n        if (editorFragment==2 && selectedForEdit!=null) {\r\n            selectedForEdit.setTextColor(colorCode);\r\n        }\r\n        if (editorFragment==1 && selectedForBackgroundChange!=null){\r\n            if (FramePrimaryOrSecondary==0){\r\n                binding.bottomBarView1.setBackgroundColor(colorCode);\r\n                binding.bottomBarView3.setBackgroundTintList(ColorStateList.valueOf(colorCode));\r\n                binding.topBarView2.setBackgroundColor(colorCode);\r\n                binding.rightBarView1.setBackgroundColor(colorCode);\r\n                binding.leftBarView2.setBackgroundColor(colorCode);\r\n            }else {\r\n                binding.bottomBarView2.setBackgroundColor(colorCode);\r\n                binding.topBarView1.setBackgroundColor(colorCode);\r\n                binding.leftBarView1.setBackgroundColor(colorCode);\r\n                binding.rightBarView2.setBackgroundColor(colorCode);\r\n            }\r\n            selectedForBackgroundChange.setBackgroundColor(colorCode);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void onDialogDismissed(int dialogId) {\r\n\r\n    }\r\n\r\n    private class DownloadImageTask extends AsyncTask<String, Void, BitmapDrawable> {\r\n        String url;\r\n        public DownloadImageTask(String url) {\r\n            this.url = url;\r\n        }\r\n        protected BitmapDrawable doInBackground(String... urls) {\r\n            String urldisplay = urls[0];\r\n            Bitmap mIcon11 = null;\r\n            try {\r\n                Log.e(\"ErrorImage\", url);\r\n                InputStream in = new java.net.URL(url).openStream();\r\n                mIcon11 = BitmapFactory.decodeStream(in);\r\n            } catch (Exception e) {\r\n                Log.e(\"ErrorImage\", e.getMessage());\r\n                e.printStackTrace();\r\n            }\r\n            return new BitmapDrawable(getResources(), mIcon11);\r\n        }\r\n        protected void onPostExecute(BitmapDrawable result) {\r\n            //bmImage.setImageBitmap(result);\r\n            FrameDrawbable=result;\r\n            startSave();\r\n\r\n\r\n        }\r\n    }\r\n    class ShareImageTask extends AsyncTask<String, Void, BitmapDrawable> {\r\n        String url;\r\n        public ShareImageTask(String url) {\r\n            this.url = url;\r\n        }\r\n        protected BitmapDrawable doInBackground(String... urls) {\r\n            String urldisplay = urls[0];\r\n            Bitmap mIcon11 = null;\r\n            try {\r\n                Log.e(\"ErrorImage\", url);\r\n                InputStream in = new java.net.URL(url).openStream();\r\n                mIcon11 = BitmapFactory.decodeStream(in);\r\n            } catch (Exception e) {\r\n                Log.e(\"ErrorImage\", e.getMessage());\r\n                e.printStackTrace();\r\n            }\r\n            return new BitmapDrawable(getResources(), mIcon11);\r\n        }\r\n        protected void onPostExecute(BitmapDrawable result) {\r\n            //bmImage.setImageBitmap(result);\r\n            FrameDrawbable=result;\r\n            startsShare();\r\n            isLoading = false;\r\n            Utility.dismissProgress();\r\n\r\n        }\r\n\r\n        @Override\r\n        protected void onPreExecute() {\r\n            if (isLoading)\r\n                return;\r\n            isLoading = true;\r\n            Utility.showProgress(act);\r\n            super.onPreExecute();\r\n        }\r\n    }\r\n    private void removeFavourit(final int removeFav) {\r\n\r\n        Utility.Log(\"API : \", APIs.REMOVE_FAVOURIT);\r\n        StringRequest stringRequest = new StringRequest(Request.Method.POST, APIs.REMOVE_FAVOURIT, new Response.Listener<String>() {\r\n            @Override\r\n            public void onResponse(String response) {\r\n\r\n                Utility.Log(\"REMOVE_FAVOURIT : \", response);\r\n\r\n                try {\r\n                    JSONObject jsonObject = new JSONObject(response);\r\n\r\n\r\n                } catch (JSONException e) {\r\n                    e.printStackTrace();\r\n                }\r\n\r\n            }\r\n        },\r\n                new Response.ErrorListener() {\r\n                    @Override\r\n                    public void onErrorResponse(VolleyError error) {\r\n\r\n                        error.printStackTrace();\r\n\r\n                    }\r\n                }\r\n        ) {\r\n            /**\r\n             * Passing some request headers*\r\n             */\r\n            @Override\r\n            public Map<String, String> getHeaders() throws AuthFailureError {\r\n                Map<String, String> params = new HashMap<String, String>();\r\n                params.put(\"Accept\", \"application/x-www-form-urlencoded\");//application/json\r\n                params.put(\"Content-Type\", \"application/x-www-form-urlencoded\");\r\n                params.put(\"Authorization\", \"Bearer\" + preafManager.getUserToken());\r\n                Log.e(\"Token\", params.toString());\r\n                return params;\r\n            }\r\n\r\n            @Override\r\n            protected Map<String, String> getParams() {\r\n                Map<String, String> params = new HashMap<>();\r\n                if (imageList != null) {\r\n                    params.put(\"brand_id\", preafManager.getActiveBrand().getId());\r\n                    params.put(\"image_id\", selectedObject.getImageid());\r\n                } else {\r\n                    params.put(\"brand_id\",  preafManager.getActiveBrand().getId());\r\n                    params.put(\"image_id\", selectedObject.getImageid());\r\n\r\n                }\r\n                params.put(\"type\", String.valueOf(removeFav));\r\n                Utility.Log(\"POSTED-PARAMS-\", params.toString());\r\n                return params;\r\n            }\r\n\r\n        };\r\n\r\n        RequestQueue queue = Volley.newRequestQueue(act);\r\n        queue.add(stringRequest);\r\n    }\r\n    public void captureScreenShort() {\r\n        getWindow().setFlags(WindowManager.LayoutParams.FLAG_SECURE, WindowManager.LayoutParams.FLAG_SECURE);\r\n    }\r\n    public void showAlertDialogButtonClicked() {\r\n\r\n        // Create an alert builder\r\n        AlertDialog.Builder builder = new AlertDialog.Builder(this);\r\n        // set the custom layout\r\n        final View customLayout = getLayoutInflater().inflate(R.layout.frame_alert_box, null);\r\n        builder.setView(customLayout);\r\n        // add a button\r\n        builder.setPositiveButton(\"OK\", new DialogInterface.OnClickListener() {\r\n            @Override\r\n            public void onClick(\r\n                    DialogInterface dialog, int which)\r\n            {\r\n                dialog.dismiss();\r\n                onBackPressed();\r\n\r\n            }\r\n        });\r\n\r\n        // create and show\r\n        // the alert dialog\r\n        AlertDialog dialog\r\n                = builder.create();\r\n        dialog.getWindow().setBackgroundDrawableResource(R.color.colorNavText);\r\n        dialog.setCancelable(false);\r\n        dialog.show();\r\n        Button pbutton = dialog.getButton(DialogInterface.BUTTON_POSITIVE);\r\n        pbutton.setBackgroundColor(Color.WHITE);\r\n    }\r\n    @RequiresApi(api = Build.VERSION_CODES.M)\r\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\r\n\r\n        // handle result of pick image chooser\r\n        super.onActivityResult(requestCode, resultCode, data);\r\n        if (requestCode == CropImage.PICK_IMAGE_CHOOSER_REQUEST_CODE && resultCode == Activity.RESULT_OK) {\r\n            Uri imageUri = CropImage.getPickImageResultUri(this, data);\r\n\r\n            // For API >= 23 we need to check specifically that we have permissions to read external storage.\r\n            if (CropImage.isReadExternalStoragePermissionsRequired(this, imageUri)) {\r\n                // request permissions and handle the result in onRequestPermissionsResult()\r\n                mCropImageUri = imageUri;\r\n                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\r\n                    requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, 0);\r\n                }\r\n            } else {\r\n                // no permissions required or already grunted, can start crop image activity\r\n                startCropImageActivity(imageUri);\r\n            }\r\n        }\r\n\r\n        // handle result of CropImageActivity\r\n        if (requestCode == CropImage.CROP_IMAGE_ACTIVITY_REQUEST_CODE) {\r\n            CropImage.ActivityResult result = CropImage.getActivityResult(data);\r\n            if (resultCode == RESULT_OK) {\r\n\r\n                binding.logoCustom.setVisibility(View.VISIBLE);\r\n                binding.imgEmptyStateFirst.setVisibility(View.GONE);\r\n                ((ImageView) findViewById(R.id.logoCustom)).setImageURI(result.getUri());\r\n                //  Toast.makeText(this, \"Cropping successful, Sample: \" + result.getSampleSize(), Toast.LENGTH_LONG).show();\r\n            } else if (resultCode == CropImage.CROP_IMAGE_ACTIVITY_RESULT_ERROR_CODE) {\r\n                //  Toast.makeText(this, \"Cropping failed: \" + result.getError(), Toast.LENGTH_LONG).show();\r\n            }\r\n        }\r\n    }\r\n    @Override public void onRequestPermissionsResult(int requestCode, String permissions[], int[] grantResults) {\r\n        if (mCropImageUri != null && grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {\r\n            // required permissions granted, start crop image activity\r\n            startCropImageActivity(mCropImageUri);\r\n        } else {\r\n            //   Toast.makeText(this, \"Cancelling, required permissions are not granted\", Toast.LENGTH_LONG).show();\r\n        }\r\n    }\r\n    private void startCropImageActivity(Uri imageUri) {\r\n        CropImage.activity(imageUri)\r\n                .setGuidelines(CropImageView.Guidelines.ON)\r\n                .setMultiTouchEnabled(true)\r\n                .start(this);\r\n    }\r\n    private void getBrandList() {\r\n\r\n        Utility.Log(\"API : \", APIs.GET_BRAND);\r\n        StringRequest stringRequest = new StringRequest(Request.Method.POST, APIs.GET_BRAND, new Response.Listener<String>() {\r\n            @Override\r\n            public void onResponse(String response) {\r\n               // binding.swipeContainer.setRefreshing(false);\r\n                Utility.Log(\"GET_BRAND : \", response);\r\n                ArrayList<BrandListItem> brandListItems=new ArrayList<>();\r\n                try {\r\n\r\n                    JSONObject jsonObject = new JSONObject(response);\r\n                    multiListItems = ResponseHandler.HandleGetBrandList(jsonObject);\r\n                    JSONArray dataJsonArray = ResponseHandler.getJSONArray(jsonObject, \"data\");\r\n                } catch (JSONException e) {\r\n                    e.printStackTrace();\r\n                }\r\n\r\n\r\n            }\r\n        },\r\n                new Response.ErrorListener() {\r\n                    @Override\r\n                    public void onErrorResponse(VolleyError error) {\r\n                       // binding.swipeContainer.setRefreshing(false);\r\n                        error.printStackTrace();\r\n\r\n\r\n\r\n                    }\r\n                }\r\n        ) {\r\n            /**\r\n             * Passing some request headers*\r\n             */\r\n\r\n            @Override\r\n            public Map<String, String> getHeaders() throws AuthFailureError {\r\n                Map<String, String> params = new HashMap<String, String>();\r\n                params.put(\"Accept\", \"application/json\");\r\n                params.put(\"Content-Type\", \"application/json\");\r\n                params.put(\"Authorization\",\"Bearer \"+preafManager.getUserToken());\r\n                Log.e(\"Token\",params.toString());\r\n                return params;\r\n            }\r\n\r\n\r\n            @Override\r\n            protected Map<String, String> getParams() {\r\n                Map<String, String> params = new HashMap<>();\r\n\r\n                Log.e(\"DateNdClass\", params.toString());\r\n                //params.put(\"upload_type_id\", String.valueOf(Constant.ADD_NOTICE));\r\n                Utility.Log(\"POSTED-PARAMS-\", params.toString());\r\n                return params;\r\n            }\r\n\r\n        };\r\n\r\n        RequestQueue queue = Volley.newRequestQueue(getApplicationContext());\r\n        queue.add(stringRequest);\r\n    }\r\n    private void getBitmapFromView() {\r\n        //Define a bitmap with the same size as the view\r\n        Bitmap newFinal;\r\n        Bitmap returnedBitmap = Bitmap.createBitmap(binding.customFrameRelative.getWidth(), binding.customFrameRelative.getHeight(),Bitmap.Config.ARGB_8888);\r\n        //Bind a canvas to it\r\n        Canvas canvas = new Canvas(returnedBitmap);\r\n        //Get the view's background\r\n        Drawable bgDrawable =binding.customFrameRelative.getBackground();\r\n        if (bgDrawable!=null) {\r\n            bgDrawable.draw(canvas);\r\n        }   else{\r\n            canvas.drawColor(Color.TRANSPARENT, PorterDuff.Mode.CLEAR);\r\n\r\n        }\r\n        Log.e(\"logggg\",\"lkhjkgbjhmn\");\r\n\r\n        // draw the view on the canvas\r\n        binding.customFrameRelative.draw(canvas);\r\n\r\n        binding.FrameImageDuplicate.setVisibility(View.VISIBLE);\r\n        binding.FrameImageDuplicate.setImageBitmap(returnedBitmap);\r\n        BitmapDrawable drawable = (BitmapDrawable) binding.FrameImageDuplicate.getDrawable();\r\n        newFinal = drawable.getBitmap();\r\n\r\n        FileOutputStream fileOutputStream = null;\r\n        File file = getDisc();\r\n        if (!file.exists() && !file.mkdirs()) {\r\n            return;\r\n        }\r\n        SimpleDateFormat simpleDateFormat = new SimpleDateFormat(\"yyyymmsshhmmss\");\r\n        String date = simpleDateFormat.format(new Date());\r\n        String name = \"Img\" + date + \".jpg\";\r\n        String file_name = file.getAbsolutePath() + \"/\" + name;\r\n        new_file = new File(file_name);\r\n        try {\r\n            fileOutputStream = new FileOutputStream(new_file);\r\n            Bitmap bitmap = newFinal;//viewToBitmap(binding.allSetImage,binding.allSetImage.getWidth(),binding.recoImage.getHeight());\r\n            bitmap.compress(Bitmap.CompressFormat.PNG, 100, fileOutputStream);\r\n            // canvas.compress(Bitmap.CompressFormat.PNG, 90, out);\r\n            fileOutputStream.flush();\r\n            fileOutputStream.close();\r\n          //  Toast.makeText(act, \"Your image is downloaded\", Toast.LENGTH_SHORT).show()  ;\r\n            // startShare(new_file);\r\n        } catch (FileNotFoundException e) {\r\n            e.printStackTrace();\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n        refreshgallery(new_file);\r\n\r\n        addCustomFrame(newFinal);\r\n        // return the bitmap\r\n        //return returnedBitmap;\r\n    }\r\n    private void addCustomFrame(Bitmap img) {\r\n        if (isLoading)\r\n            return;\r\n        isLoading = true;\r\n        Utility.showProgress(act);\r\n        Log.e(\"API\", APIs.ADD_CUSTOMFRAME);\r\n        Log.e(\"API\", preafManager.getUserToken());\r\n        File img1File = null;\r\n        if (img != null) {\r\n            img1File = CodeReUse.createFileFromBitmap(act, \"photo.png\", img);\r\n        }\r\n\r\n        ANRequest.MultiPartBuilder request = AndroidNetworking.upload(APIs.ADD_CUSTOMFRAME)\r\n                .addHeaders(\"Accept\", \"application/json\")\r\n                .addHeaders(\"Content-Type\", \"application/json\")\r\n                .addHeaders(\"Authorization\", \"Bearer\" + preafManager.getUserToken())\r\n                .addMultipartParameter(\"brand_id\", preafManager.getActiveBrand().getId())\r\n                .setTag(\"Add CustomeFrame\")\r\n                .setPriority(Priority.HIGH);\r\n\r\n        if (img1File != null) {\r\n            request.addMultipartFile(\"frame\", img1File);\r\n            Log.e(\"br_logo\", String.valueOf(img1File));\r\n        }\r\n\r\n        request.build().setUploadProgressListener(new UploadProgressListener() {\r\n            @Override\r\n            public void onProgress(long bytesUploaded, long totalBytes) {\r\n                // do anything with progress\r\n            }\r\n        })\r\n                .getAsJSONObject(new JSONObjectRequestListener() {\r\n                    @Override\r\n                    public void onResponse(JSONObject response) {\r\n                        isLoading = false;\r\n                        Utility.dismissProgress();\r\n                        finish();\r\n                        startActivity(getIntent());\r\n                        Utility.Log(\"Verify-Response\", response);\r\n                        binding.FrameImageDuplicate.setVisibility(View.GONE);\r\n                        ArrayList<BrandListItem> brandListItems = new ArrayList<>();\r\n                        try {\r\n\r\n                            if (response.getBoolean(\"status\")) {\r\n                                JSONObject jsonArray = response.getJSONObject(\"data\");\r\n\r\n\r\n\r\n\r\n//                                is_completed = jsonArray.getString(\"is_completed\");\r\n//                                alertDialogBuilder.setMessage(ResponseHandler.getString(response, \"message\"));\r\n//                                alertDialogBuilder.setPositiveButton(\"Ok\", new DialogInterface.OnClickListener() {\r\n//                                    @Override\r\n//                                    public void onClick(DialogInterface arg0, int arg1) {\r\n//                                        preafManager.loginStep(is_completed);\r\n//                                        if (is_completed.equals(\"2\")) {\r\n//                                            getBrandList();\r\n//\r\n//                                        }\r\n//                                    }\r\n//                                });\r\n//                                AlertDialog alertDialog = alertDialogBuilder.create();\r\n//                                alertDialog.setCancelable(false);\r\n//                                alertDialog.show();\r\n\r\n\r\n                            }\r\n                        } catch (JSONException e) {\r\n                            e.printStackTrace();\r\n                        }\r\n\r\n\r\n                    }\r\n\r\n                    @Override\r\n                    public void onError(ANError error) {\r\n                        isLoading = false;\r\n                        Utility.dismissProgress();\r\n\r\n                        if (error.getErrorCode() != 0) {\r\n                            Log.e(\"onError errorCode : \", String.valueOf(error.getErrorCode()));\r\n                            Log.e(\"onError errorBody : \", error.getErrorBody());\r\n                            Log.e(\"onError errorDetail : \", error.getErrorDetail());\r\n                        } else {\r\n                            Log.e(\"onError errorDetail : \", error.getErrorDetail());\r\n                        }\r\n\r\n                    }\r\n                });\r\n\r\n    }\r\n    private void fetchAutomaticCustomeFrame() {\r\n\r\n      /*  if (preafManager.getActiveBrand().getWebsite()!=null && !preafManager.getActiveBrand().getWebsite().isEmpty())\r\n        {\r\n\r\n            binding.customFrameWebsite.setText(Website.substring(6));\r\n        }*/\r\n\r\n        if (preafManager.getActiveBrand().getAddress()!=null)\r\n        {\r\n            //  Toast.makeText(act,preafManager.getActiveBrand().getPhonenumber(),Toast.LENGTH_LONG).show();\r\n            binding.customAddressEdit1.setText(preafManager.getActiveBrand().getEmail());\r\n        }\r\n\r\n\r\n        if (preafManager.getActiveBrand().getPhonenumber()!=null)\r\n        {\r\n            //  Toast.makeText(act,preafManager.getActiveBrand().getPhonenumber(),Toast.LENGTH_LONG).show();\r\n            binding.customeContactEdit1.setText(preafManager.getActiveBrand().getPhonenumber());\r\n        }\r\n\r\n\r\n    }\r\n    private void getBrandById(BrandListItem model) {\r\n\r\n        Utility.Log(\"API : \", APIs.GET_BRAND_BY_ID);\r\n        StringRequest stringRequest = new StringRequest(Request.Method.POST, APIs.GET_BRAND_BY_ID, new Response.Listener<String>() {\r\n            @Override\r\n            public void onResponse(String response) {\r\n               // binding.swipeContainer.setRefreshing(false);\r\n                Utility.Log(\"GET_BRAND_BY_ID : \", response);\r\n                ArrayList<BrandListItem> brandListItems=new ArrayList<>();\r\n                try {\r\n                    JSONObject jsonObject = new JSONObject(response);\r\n                    multiListItems = ResponseHandler.HandleGetBrandById(jsonObject);\r\n\r\n                    SliderItem sliderItem=new SliderItem();\r\n                    sliderItem.setPriceForPay(multiListItems.get(0).getRate());\r\n                    sliderItem.setPackageTitle(multiListItems.get(0).getPackagename());\r\n                    sliderItem.setPackageid(multiListItems.get(0).getPackage_id());\r\n                    sliderItem.setTemplateTitle(multiListItems.get(0).getNo_of_frame());\r\n                    sliderItem.setImageTitle(multiListItems.get(0).getNo_of_total_image());\r\n                    sliderItem.setBrandId(multiListItems.get(0).getId());\r\n\r\n                    Gson gson=new Gson();\r\n                    Log.e(\"DATA\",gson.toJson(sliderItem));\r\n\r\n\r\n\r\n                    Intent i = new Intent(act, RazorPayActivity.class);\r\n\r\n                    i.putExtra(\"detailsObj\",gson.toJson(sliderItem));\r\n\r\n                    startActivity(i);\r\n                    overridePendingTransition(R.anim.slide_right_in, R.anim.slide_right_out);\r\n\r\n                } catch (JSONException e) {\r\n                    e.printStackTrace();\r\n                }\r\n\r\n\r\n            }\r\n        },\r\n                new Response.ErrorListener() {\r\n                    @Override\r\n                    public void onErrorResponse(VolleyError error) {\r\n                     //   binding.swipeContainer.setRefreshing(false);\r\n                        error.printStackTrace();\r\n\r\n\r\n\r\n                    }\r\n                }\r\n        ) {\r\n            /**\r\n             * Passing some request headers*\r\n             */\r\n\r\n            @Override\r\n            public Map<String, String> getHeaders() throws AuthFailureError {\r\n                Map<String, String> params = new HashMap<String, String>();\r\n\r\n                params.put(\"Authorization\",\"Bearer \"+preafManager.getUserToken());\r\n                Log.e(\"Token\",params.toString());\r\n                return params;\r\n            }\r\n\r\n\r\n            @Override\r\n            protected Map<String, String> getParams() {\r\n                Map<String, String> params = new HashMap<>();\r\n                params.put(\"brand_id\",model.getId());\r\n                Log.e(\"DateNdClass\", params.toString());\r\n                //params.put(\"upload_type_id\", String.valueOf(Constant.ADD_NOTICE));\r\n                Utility.Log(\"POSTED-PARAMS-\", params.toString());\r\n                return params;\r\n            }\r\n\r\n        };\r\n\r\n        RequestQueue queue = Volley.newRequestQueue(getApplicationContext());\r\n        queue.add(stringRequest);\r\n    }\r\n    public static String convertFirstUpper(String str) {\r\n\r\n        if (str == null || str.isEmpty()) {\r\n            return str;\r\n        }\r\n        Utility.Log(\"FirstLetter\", str.substring(0, 1) + \"    \" + str.substring(1));\r\n        return str.substring(0, 1).toUpperCase() + str.substring(1);\r\n    }\r\n    @Override public void onBoldTextChange(boolean Bold) {\r\n        if (Bold) {\r\n            //  Toast.makeText(act,\"true\",Toast.LENGTH_SHORT).show();\r\n            if (selectedForEdit!=null) {\r\n                selectedForEdit.setTypeface(selectedForEdit.getTypeface(), Typeface.BOLD);\r\n            }\r\n\r\n        }else {\r\n            //Toast.makeText(act,\"false\",Toast.LENGTH_SHORT).show();\r\n            if (selectedForEdit!=null) {\r\n                selectedForEdit.setTypeface(null, Typeface.NORMAL);\r\n            }\r\n        }\r\n\r\n    }\r\n    @Override public void onItalicTextChange(boolean Italic) {\r\n        if (Italic) {\r\n            //   Toast.makeText(act,\"true\",Toast.LENGTH_SHORT).show();\r\n            if (selectedForEdit!=null) {\r\n                selectedForEdit.setTypeface(selectedForEdit.getTypeface(), Typeface.ITALIC);\r\n            }\r\n        }else {\r\n            if (selectedForEdit!=null) {\r\n\r\n             //   Toast.makeText(act, \"false\", Toast.LENGTH_SHORT).show();\r\n                selectedForEdit.setTypeface(null, Typeface.NORMAL);\r\n            }\r\n        }\r\n    }\r\n    @Override public void onfontSize(int textsize) {\r\n        if (selectedForEdit!=null) {\r\n            selectedForEdit.setTextSize(textsize);\r\n        }\r\n\r\n\r\n    }\r\n\r\n    @Override public void onUnderLineItalic(boolean Left) {\r\n        if (Left) {\r\n            // Toast.makeText(act,\"true\",Toast.LENGTH_SHORT).show();\r\n            //  binding.customAddressEdit.setPaintFlags( binding.customAddressEdit.getPaintFlags() | Paint.UNDERLINE_TEXT_FLAG);\r\n            if (selectedForEdit!=null) {\r\n                selectedForEdit.setPaintFlags(selectedForEdit.getPaintFlags() | Paint.UNDERLINE_TEXT_FLAG);\r\n            }\r\n        }\r\n        else\r\n        {\r\n            // Toast.makeText(act,\"false\",Toast.LENGTH_SHORT).show();\r\n            //  .setTypeface(null, Typeface.NORMAL);\r\n            if (selectedForEdit!=null) {\r\n\r\n                selectedForEdit.setPaintFlags(0);\r\n            }\r\n        }\r\n    }\r\n    @Override public void onColorItemChange(int colorcode) {\r\n\r\n        if (editorFragment==2 && selectedForEdit!=null) {\r\n            selectedForEdit.setTextColor(colorcode);\r\n        }\r\n\r\n        if (editorFragment==1 && selectedForBackgroundChange!=null){\r\n            if (FramePrimaryOrSecondary==0){\r\n                binding.bottomBarView1.setBackgroundColor(colorcode);\r\n                binding.bottomBarView3.setBackgroundTintList(ColorStateList.valueOf(colorcode));\r\n                binding.topBarView2.setBackgroundColor(colorcode);\r\n                binding.rightBarView1.setBackgroundColor(colorcode);\r\n                binding.leftBarView2.setBackgroundColor(colorcode);\r\n            }else {\r\n                binding.bottomBarView2.setBackgroundColor(colorcode);\r\n                binding.topBarView1.setBackgroundColor(colorcode);\r\n                binding.leftBarView1.setBackgroundColor(colorcode);\r\n                binding.rightBarView2.setBackgroundColor(colorcode);\r\n            }\r\n            selectedForBackgroundChange.setBackgroundColor(colorcode);\r\n        }\r\n\r\n    }\r\n    @Override public void onFontChangeListenert(String Font) {\r\n        Typeface custom_font = Typeface.createFromAsset(act.getAssets(), Font);\r\n        if (selectedForEdit!=null) {\r\n            selectedForEdit.setTypeface(custom_font);\r\n        }\r\n\r\n\r\n\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/app/brandmania/Activity/ViewAllImage.java	(revision f3a7fcbea448bd07a109743f0d2c9e65ef6ecb56)
+++ app/src/main/java/com/app/brandmania/Activity/ViewAllImage.java	(date 1608797045353)
@@ -24,6 +24,7 @@
 import android.graphics.PorterDuff;
 import android.graphics.Typeface;
 import android.graphics.drawable.BitmapDrawable;
+import android.graphics.drawable.ColorDrawable;
 import android.graphics.drawable.Drawable;
 import android.net.Uri;
 import android.os.AsyncTask;
@@ -32,7 +33,9 @@
 import android.os.Environment;
 import android.provider.MediaStore;
 import android.util.Log;
+import android.view.LayoutInflater;
 import android.view.View;
+import android.view.ViewGroup;
 import android.view.WindowManager;
 import android.widget.Button;
 import android.widget.ImageView;
@@ -64,6 +67,7 @@
 import com.app.brandmania.Model.BrandListItem;
 import com.app.brandmania.Model.SliderItem;
 import com.app.brandmania.Utils.IFontChangeEvent;
+import com.app.brandmania.databinding.DialogUpgradeLayoutBinding;
 import com.bumptech.glide.Glide;
 import com.google.android.material.tabs.TabLayout;
 import com.google.gson.Gson;
@@ -154,38 +158,16 @@
         setTheme(R.style.AppTheme_material_theme);
         super.onCreate(savedInstanceState);
         act = this;
-        captureScreenShort();
+        //triggerUpgradePackage();
         act.getWindow().setSoftInputMode(SOFT_INPUT_ADJUST_PAN);
         binding = DataBindingUtil.setContentView(act, R.layout.activity_view_all_image);
-        getWindow().setFlags(WindowManager.LayoutParams.FLAG_SECURE, WindowManager.LayoutParams.FLAG_SECURE);
         preafManager = new PreafManager(this);
         binding.titleName.setSelected(true);
         gson = new Gson();
-        Log.e("PHONE_NUMBER",gson.toJson(preafManager.getActiveBrand()));
         selectedObject = gson.fromJson(getIntent().getStringExtra("selectedimage"), ImageList.class);
-        Log.e("selectedObject",gson.toJson(selectedObject));
         getFrame();
-        //showAlertDialogButtonClicked();
-        //getBrandList();
         getBrandList();
-        //   Toast.makeText(act,binding.customFrameWebsite.getText().toString(),Toast.LENGTH_LONG).show();
-
         Website=preafManager.getActiveBrand().getWebsite();
-
-       /* binding.swipeContainer.setColorSchemeResources(R.color.colorPrimary, R.color.colorsecond, R.color.colorthird);
-        binding.swipeContainer.setOnRefreshListener(new SwipeRefreshLayout.OnRefreshListener() {
-            @Override
-            public void onRefresh() {
-
-                startAnimation();
-
-                getImageCtegory();
-                // startAnimation();
-                //getNotice(startDate, endDate);
-
-            }
-        });*/
-
         imageList = gson.fromJson(getIntent().getStringExtra("detailsObj"), DashBoardItem.class);
         binding.titleName.setText(imageList.getName());
         getImageCtegory();
@@ -199,15 +181,12 @@
             @Override
             public void onClick(View v) {
                 selectedObject.setFrameId(selectedModelFromView.getFrameId());
-                Log.e("FrameIdWithImage",selectedObject.getFrameId());
                 preafManager.AddToMyFavorites(selectedObject);
                 if (binding.fabroutIcon.getVisibility()==View.VISIBLE)
                 {
                     binding.fabroutIcon.setVisibility(View.GONE);
                     binding.addfabroutIcon.setVisibility(View.VISIBLE);
                 }
-                Log.e("FAVVV",gson.toJson(preafManager.getSavedFavorites()));
-
                 dowloadAndShare(ADDFAV);
             }
         });
@@ -221,7 +200,7 @@
                     binding.addfabroutIcon.setVisibility(View.GONE);
                     binding.fabroutIcon.setVisibility(View.VISIBLE);
                 }
-                Log.e("FAVVV",gson.toJson(preafManager.getSavedFavorites()));
+
                 removeFavourit(REMOVEFAV);
             }
         });
@@ -235,10 +214,7 @@
                         new DialogInterface.OnClickListener() {
                             @Override
                             public void onClick(DialogInterface arg0, int arg1) {
-
                                 requestAgain();
-                                // startSave();
-                                //checkPermisionForDontAskAgain();
                                 Log.e("CSelectedImg",gson.toJson(selectedModelFromView.getFrame1()));
                                 new DownloadImageTask(selectedModelFromView.getFrame1()).execute(selectedModelFromView.getFrame1());
                                 dowloadAndShare(DOWLOAD);
@@ -1849,9 +1825,31 @@
         if (selectedForEdit!=null) {
             selectedForEdit.setTypeface(custom_font);
         }
+    }
+
+
 
 
+    //show dialog for upgrading package for using all 6 frames
+    public DialogUpgradeLayoutBinding upgradeLayoutBinding;
+    private void triggerUpgradePackage() {
+        upgradeLayoutBinding=DataBindingUtil.inflate(LayoutInflater.from(act), R.layout.dialog_upgrade_layout, null, false);
+        androidx.appcompat.app.AlertDialog.Builder builder = new androidx.appcompat.app.AlertDialog.Builder(act, R.style.MyAlertDialogStyle_extend);
+        builder.setView(upgradeLayoutBinding.getRoot());
+        androidx.appcompat.app.AlertDialog alertDialog = builder.create();
+        alertDialog.setContentView(upgradeLayoutBinding.getRoot());
 
-    }
+        upgradeLayoutBinding.viewPackage.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                alertDialog.dismiss();
+            }
+        });
+
 
+        alertDialog.setCancelable(false);
+        alertDialog.getWindow().setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));
+        alertDialog.show();
+
+    }
 }
Index: app/src/main/AndroidManifest.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    xmlns:tools=\"http://schemas.android.com/tools\"\r\n    package=\"com.app.brandmania\">\r\n\r\n    <uses-permission android:name=\"android.permission.INTERNET\" />\r\n    <uses-permission android:name=\"android.permission.CALL_PHONE\" />\r\n    <uses-permission android:name=\"android.permission.READ_PHONE_STATE\" />\r\n    <uses-permission android:name=\"android.permission.ACCESS_WIFI_STATE\" />\r\n    <uses-permission android:name=\"android.permission.ACCESS_NETWORK_STATE\" />\r\n    <uses-permission android:name=\"android.permission.ACCESS_COARSE_LOCATION\" />\r\n    <uses-permission android:name=\"android.permission.ACCESS_FINE_LOCATION\" />\r\n    <uses-permission android:name=\"android.permission.CAMERA\" />\r\n    <uses-permission android:name=\"android.permission.CAMERA\" />\r\n    <uses-permission android:name=\"android.permission.CALL_PHONE\" />\r\n    <uses-permission android:name=\"android.permission.INTERNET\" />\r\n    <uses-permission android:name=\"android.permission.ACCESS_WIFI_STATE\" />\r\n    <uses-permission android:name=\"android.permission.ACCESS_NETWORK_STATE\" />\r\n    <uses-permission\r\n        android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\"\r\n        tools:ignore=\"ScopedStorage\" />\r\n    <uses-permission android:name=\"android.permission.READ_EXTERNAL_STORAGE\" />\r\n\r\n    <application\r\n        android:name=\".Common.MakeMyBrandApp\"\r\n        android:icon=\"@mipmap/ic_launcher\"\r\n        android:label=\"@string/app_name\"\r\n        android:networkSecurityConfig=\"@xml/network_security_config\"\r\n        android:requestLegacyExternalStorage=\"true\"\r\n        android:roundIcon=\"@mipmap/ic_launcher_round\"\r\n        android:supportsRtl=\"true\"\r\n        android:theme=\"@style/AppTheme\"\r\n        android:usesCleartextTraffic=\"true\"\r\n        tools:targetApi=\"n\">\r\n        <activity android:name=\".Activity.CustomViewAllActivit\"></activity>\r\n        <activity android:name=\".Activity.RazorPayActivity\" />\r\n        <activity android:name=\".Activity.ViewNotificationActivity\" />\r\n        <activity android:name=\".Activity.PackageActivity\" />\r\n        <activity android:name=\".Activity.ViewAllFavouritActivity\" />\r\n        <activity android:name=\".Activity.VIewAllDownloadImage\" />\r\n        <activity android:name=\".Activity.AddBrandMultipleActivity\" />\r\n        <activity android:name=\".Activity.AboutUsActivity\" />\r\n        <activity android:name=\".Activity.AddReportAndBug\" />\r\n        <activity android:name=\".Activity.FaqActivity\" />\r\n        <activity android:name=\".Activity.OnlyTextEditorActivity\" />\r\n        <activity\r\n            android:name=\".Activity.ColorAndTextEditActivity\"\r\n            android:windowSoftInputMode=\"adjustResize\" />\r\n        <activity android:name=\".TextAndImageEditActivity\" />\r\n        <activity android:name=\".TextandImageEdit\" />\r\n        <activity android:name=\".Activity.EditPicActivity\" />\r\n        <activity android:name=\".Activity.SubscriptionActivity\" />\r\n        <activity android:name=\".Activity.HelpAndSupport\" />\r\n        <activity android:name=\".Activity.PartnerProgramActivity\" />\r\n        <activity android:name=\".Activity.ViewBrandActivity\" />\r\n        <activity android:name=\".Activity.AddBranddActivity\" />\r\n        <activity android:name=\".Activity.UpdateBandList\" />\r\n        <activity android:name=\".Activity.RegistrationActivity\" />\r\n        <activity android:name=\".Activity.OtpScreenActivity\" />\r\n        <activity\r\n            android:name=\".Activity.LoginActivity\"\r\n            android:theme=\"@style/AppTheme_material_theme\" />\r\n        <activity android:name=\".Activity.ViewAllImage\" />\r\n        <activity android:name=\".Activity.HomeActivity\" />\r\n        <activity android:name=\".Activity.SpleshActivity\">\r\n            <intent-filter>\r\n                <action android:name=\"android.intent.action.MAIN\" />\r\n\r\n                <category android:name=\"android.intent.category.LAUNCHER\" />\r\n            </intent-filter>\r\n        </activity>\r\n        <activity\r\n            android:name=\"com.yalantis.ucrop.UCropActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:theme=\"@style/Theme.AppCompat.Light.NoActionBar\" />\r\n\r\n        <service\r\n            android:name=\".Connection.MyFirebaseMessagingService\"\r\n            android:stopWithTask=\"false\">\r\n            <intent-filter>\r\n                <action android:name=\"com.google.firebase.MESSAGING_EVENT\" />\r\n            </intent-filter>\r\n        </service>\r\n\r\n        <provider\r\n            android:name=\"androidx.core.content.FileProvider\"\r\n            android:authorities=\"${applicationId}.fileProvider\"\r\n            android:exported=\"false\"\r\n            android:grantUriPermissions=\"true\">\r\n            <meta-data\r\n                android:name=\"android.support.FILE_PROVIDER_PATHS\"\r\n                android:resource=\"@xml/file_paths\" />\r\n        </provider>\r\n        <provider\r\n            android:name=\"androidx.core.content.FileProvider\"\r\n            android:authorities=\"com.app.brandmania.fileProvider\"\r\n            android:exported=\"false\"\r\n            android:grantUriPermissions=\"true\">\r\n            <meta-data\r\n                android:name=\"android.support.FILE_PROVIDER_PATHS\"\r\n                android:resource=\"@xml/file_paths\" />\r\n        </provider>\r\n        <!--\r\n  <meta-data\r\n            android:name=\"com.razorpay.ApiKey\"\r\n            android:value=\"rzp_live_Sq3SAdZBt9Vec4\" />\r\n        -->\r\n        <meta-data\r\n            android:name=\"com.razorpay.ApiKey\"\r\n            android:value=\"rzp_test_g34adOBwCItfce\" />\r\n\r\n        <activity\r\n            android:name=\"com.theartofdev.edmodo.cropper.CropImageActivity\"\r\n            android:theme=\"@style/Theme.AppCompat.Light.DarkActionBar\" />\r\n    </application>\r\n\r\n</manifest>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/AndroidManifest.xml	(revision f3a7fcbea448bd07a109743f0d2c9e65ef6ecb56)
+++ app/src/main/AndroidManifest.xml	(date 1608794760418)
@@ -101,9 +101,9 @@
                 android:resource="@xml/file_paths" />
         </provider>
         <!--
-  <meta-data
-            android:name="com.razorpay.ApiKey"
-            android:value="rzp_live_Sq3SAdZBt9Vec4" />
+          <meta-data
+                    android:name="com.razorpay.ApiKey"
+                    android:value="rzp_live_Sq3SAdZBt9Vec4" />
         -->
         <meta-data
             android:name="com.razorpay.ApiKey"
Index: app/src/main/res/layout/dialog_upgrade_layout.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/layout/dialog_upgrade_layout.xml	(date 1608796656879)
+++ app/src/main/res/layout/dialog_upgrade_layout.xml	(date 1608796656879)
@@ -0,0 +1,75 @@
+<?xml version="1.0" encoding="utf-8"?>
+<layout>
+<RelativeLayout android:paddingStart="@dimen/_20sdp"
+    android:background="@color/white"
+    android:paddingEnd="@dimen/_20sdp"
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="wrap_content"
+    xmlns:app="http://schemas.android.com/apk/res-auto">
+
+    <androidx.cardview.widget.CardView
+        android:layout_marginTop="@dimen/_30sdp"
+        app:cardCornerRadius="@dimen/_7sdp"
+        android:id="@+id/element1"
+        android:layout_centerHorizontal="true"
+        android:layout_width="@dimen/_50sdp"
+        app:cardUseCompatPadding="true"
+        android:layout_height="@dimen/_50sdp">
+
+        <ImageView
+            android:padding="@dimen/_7sdp"
+            android:layout_centerHorizontal="true"
+            android:src="@drawable/ic_request_for_frame"
+            android:layout_width="match_parent"
+            android:layout_height="match_parent"/>
+    </androidx.cardview.widget.CardView>
+
+    <TextView
+        android:layout_centerHorizontal="true"
+
+        android:id="@+id/element2"
+        android:layout_below="@+id/element1"
+        android:textSize="@dimen/_14sdp"
+        android:fontFamily="@font/inter_medium"
+        android:textColor="@color/black"
+        android:text="Request For Custom Frame"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"/>
+
+
+
+    <TextView
+        android:id="@+id/element3"
+        android:layout_below="@+id/element2"
+        android:layout_marginTop="@dimen/_5sdp"
+        android:textSize="@dimen/_10sdp"
+        android:textAlignment="center"
+        android:fontFamily="@font/inter_regular"
+        android:text="Request for custom frame is only applicable to ENTERPRISE package"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"/>
+
+    <TextView
+        android:layout_centerHorizontal="true"
+        android:backgroundTint="@color/colorthird"
+        android:background="@drawable/buttoncornar"
+        android:layout_below="@id/element3"
+        android:id="@+id/viewPackage"
+        android:gravity="center"
+        android:layout_width="wrap_content"
+        android:layout_height="@dimen/_28sdp"
+        android:paddingStart="@dimen/_14sdp"
+        android:paddingEnd="@dimen/_14sdp"
+        android:layout_marginTop="@dimen/_20sdp"
+        android:layout_marginBottom="@dimen/_30sdp"
+        android:fontFamily="@font/inter_regular"
+        android:text="View Packages"
+        android:textColor="#FFF"
+        android:textAlignment="center"
+        android:textAllCaps="false"
+        android:textSize="@dimen/_8sdp"
+        />
+
+</RelativeLayout>
+</layout>
\ No newline at end of file
Index: app/src/main/res/drawable/ic_request_for_frame.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/drawable/ic_request_for_frame.xml	(date 1608795660997)
+++ app/src/main/res/drawable/ic_request_for_frame.xml	(date 1608795660997)
@@ -0,0 +1,18 @@
+<vector android:height="24dp" android:viewportHeight="64"
+    android:viewportWidth="64" android:width="24dp" xmlns:android="http://schemas.android.com/apk/res/android">
+    <path android:fillColor="#ff9811" android:pathData="m15,6v31l18.282,-15.103z"/>
+    <path android:fillColor="#ff9811" android:pathData="m42.718,21.897 l18.282,15.103v-31z"/>
+    <path android:fillColor="#ffa733" android:pathData="m39.312,24.859a2,2 0,0 1,-2.624 0l-3.406,-2.959 -18.282,15.1h46l-18.282,-15.1z"/>
+    <path android:fillColor="#ffb655" android:pathData="m15,6 l18.282,15.9 3.406,2.962a2,2 0,0 0,2.624 0l3.406,-2.962 18.282,-15.9z"/>
+    <path android:fillColor="#ff7956" android:pathData="m22.565,24.464a2,2 0,0 0,0 -2.828l-8.485,-8.485a2,2 0,0 0,-2.829 0l-2.828,2.828 11.314,11.314z"/>
+    <path android:fillColor="#ff6243" android:pathData="m8.4198,15.9795l1.9994,-1.9994l11.312,11.312l-1.9994,1.9994z"/>
+    <path android:fillColor="#ff7956" android:pathData="m50.849,52.749a2,2 0,0 0,0 -2.829l-8.485,-8.485a2,2 0,0 0,-2.828 0l-2.829,2.828 11.314,11.314z"/>
+    <path android:fillColor="#ff6243" android:pathData="m36.6981,44.2628l1.9994,-1.9994l11.312,11.312l-1.9994,1.9994z"/>
+    <path android:fillColor="#ee8700" android:pathData="m15,34v3l3.632,-3z"/>
+    <path android:fillColor="#ee8700" android:pathData="m57,9.478v16.522a7.97,7.97 0,0 1,-2.4 5.711l6.4,5.289v-31z"/>
+    <path android:fillColor="#aa6100" android:pathData="m49,34h-30.368l-3.632,3h46l-6.4,-5.289a7.972,7.972 0,0 1,-5.6 2.289z"/>
+    <path android:fillColor="#cc7400" android:pathData="m39.312,24.859a2,2 0,0 1,-2.624 0l-3.406,-2.959 -14.65,12.1h30.368a7.972,7.972 0,0 0,5.6 -2.289l-11.882,-9.811z"/>
+    <path android:fillColor="#ffcd00" android:pathData="m18.322,28.707 l1.415,-1.414 -11.314,-11.314a18,18 0,0 0,0 25.456l14.142,14.142a18,18 0,0 0,25.456 0l-11.314,-11.314 -1.414,1.415a8,8 0,0 1,-11.314 0l-5.657,-5.657a7.966,7.966 0,0 1,-1.888 -3.021,7.994 7.994,0 0,1 1.888,-8.293z"/>
+    <path android:fillColor="#ebbf00" android:pathData="m24.565,53.577 l-14.142,-14.142a17.99,17.99 0,0 1,-1.823 -23.284l-0.172,-0.172a18,18 0,0 0,0 25.456l14.137,14.142a18,18 0,0 0,25.456 0l-0.173,-0.172a17.988,17.988 0,0 1,-23.283 -1.828z"/>
+    <path android:fillColor="#231f20" android:pathData="m61,5h-46a1,1 0,0 0,-1 1v5.893a3,3 0,0 0,-3.456 0.551l-2.828,2.828a19.022,19.022 0,0 0,0 26.87l14.142,14.142a19,19 0,0 0,26.87 0l2.829,-2.828a3.005,3.005 0,0 0,0 -4.243l-8.486,-8.485a3,3 0,0 0,-4.243 0l-2.828,2.829 -1.414,1.414a7.007,7.007 0,0 1,-9.9 0l-5.658,-5.657a6.963,6.963 0,0 1,-1.022 -1.314h42.994a1,1 0,0 0,1 -1v-31a1,1 0,0 0,-1 -1zM20.443,28 L23.272,25.171a3,3 0,0 0,0 -4.242l-7.272,-7.272v-5.457l15.736,13.679 -14.736,12.181a6.966,6.966 0,0 1,2.032 -4.646zM38.656,24.1a1,1 0,0 1,-1.312 0l-19.67,-17.1h40.652zM33.266,23.205 L36.031,25.61a3.016,3.016 0,0 0,3.938 0l2.765,-2.4 15.485,12.79h-40.431zM44.266,21.874 L60,8.2v26.677zM11.96,13.854a1,1 0,0 1,1.415 0l8.485,8.485a1,1 0,0 1,0 1.414l-2.122,2.122 -9.9,-9.9zM40.242,42.142a1,1 0,0 1,1.415 0l8.486,8.485a1,1 0,0 1,0 1.415l-2.122,2.121 -9.9,-9.9zM23.272,46.385a9.01,9.01 0,0 0,12.728 0l0.707,-0.707 9.879,9.879a17.022,17.022 0,0 1,-23.314 -0.687l-14.142,-14.142a17.023,17.023 0,0 1,-0.687 -23.314l9.879,9.879 -0.707,0.707a9.01,9.01 0,0 0,0 12.728z"/>
+</vector>
Index: app/build.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>apply plugin: 'com.android.application'\r\napply plugin: 'com.google.gms.google-services'  // Google Services plugin\r\n\r\nandroid {\r\n    compileSdkVersion 30\r\n    buildToolsVersion \"30.0.2\"\r\n\r\n    defaultConfig {\r\n        applicationId \"com.make.mybrand\"\r\n        minSdkVersion 21\r\n        targetSdkVersion 30\r\n        versionCode 4\r\n        versionName \"1.0\"\r\n\r\n        testInstrumentationRunner \"androidx.test.runner.AndroidJUnitRunner\"\r\n    }\r\n\r\n    buildTypes {\r\n        release {\r\n            minifyEnabled false\r\n            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'\r\n        }\r\n    }\r\n\r\n    compileOptions {\r\n        sourceCompatibility JavaVersion.VERSION_1_8\r\n        targetCompatibility JavaVersion.VERSION_1_8\r\n    }\r\n\r\n    useLibrary 'org.apache.http.legacy'\r\n    buildFeatures {\r\n        dataBinding true\r\n    }\r\n\r\n    allprojects {\r\n        repositories {\r\n            jcenter()\r\n            maven { url \"https://jitpack.io\" }\r\n        }\r\n    }\r\n}\r\n\r\ndependencies {\r\n    implementation fileTree(dir: \"libs\", include: [\"*.jar\"])\r\n    implementation 'androidx.appcompat:appcompat:1.2.0'\r\n    implementation 'androidx.constraintlayout:constraintlayout:2.0.1'\r\n    testImplementation 'junit:junit:4.12'\r\n    androidTestImplementation 'androidx.test.ext:junit:1.1.2'\r\n    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'\r\n    implementation 'com.intuit.sdp:sdp-android:1.0.6'\r\n    //noinspection GradleCompatible\r\n    implementation 'com.android.support:design:28.0.0'\r\n    implementation 'androidx.recyclerview:recyclerview:1.0.0'\r\n    // dependencies for legacy-support\r\n    implementation 'androidx.legacy:legacy-support-v4:1.0.0'\r\n\r\n    // dependencies for multidex\r\n    implementation 'androidx.multidex:multidex:2.0.1'\r\n    // dependencies for android material\r\n    implementation 'com.google.android.material:material:1.2.1'\r\n\r\n\r\n    // dependencies for facebook shimmer\r\n    implementation 'com.facebook.shimmer:shimmer:0.5.0@aar'\r\n\r\n    // dependencies for volley\r\n    implementation 'com.android.volley:volley:1.1.1'\r\n    //noinspection GradleCompatible\r\n    implementation 'com.android.support:design:28.0.0'\r\n    // dependency file for sdp\r\n    implementation 'com.intuit.sdp:sdp-android:1.0.6'\r\n    //firebaseInstaceId\r\n    implementation 'com.google.firebase:firebase-analytics:17.5.0'\r\n    implementation 'com.google.firebase:firebase-messaging:20.2.4'\r\n    implementation 'com.google.firebase:firebase-core:17.5.0'\r\n    // dependency file for gson\r\n    implementation 'com.google.code.gson:gson:2.8.6'\r\n    // dependency file for permission\r\n    implementation 'com.squareup.okhttp:okhttp:2.5.0'\r\n    implementation 'com.karumi:dexter:6.0.1'\r\n    implementation 'com.amitshekhar.android:android-networking:1.0.2'\r\n    implementation 'com.google.android.material:material:1.1.0'\r\n    //viewpager material dots\r\n    implementation 'com.tbuonomo.andrui:viewpagerdotsindicator:4.1.2'\r\n    //noinspection GradleCompatible\r\n    implementation 'com.android.support:appcompat-v7:26.0.0-alpha1'\r\n    implementation 'com.android.volley:volley:1.1.0'\r\n    implementation 'com.github.bumptech.glide:glide:3.7.0'\r\n    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'\r\n    implementation 'com.google.android.material:material:1.0.0'\r\n    implementation 'ja.burhanrashid52:photoeditor:1.0.0'\r\n    //implementation project(':photoeditor')\r\n    implementation 'androidx.cardview:cardview:1.0.0'\r\n    testImplementation 'junit:junit:4.12'\r\n\r\n    androidTestImplementation 'androidx.test:runner:1.2.0'\r\n    androidTestImplementation 'androidx.test:rules:1.2.0'\r\n    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'\r\n    androidTestImplementation 'androidx.test.espresso:espresso-contrib:3.2.0'\r\n    //noinspection GradleCompatible\r\n    implementation 'com.android.support:recyclerview-v7:28.0.0'\r\n    implementation 'com.github.clans:fab:1.6.4'\r\n    implementation 'com.github.yalantis:ucrop:2.2.5-native'\r\n    implementation 'com.tbuonomo.andrui:viewpagerdotsindicator:2.0.3'\r\n    //dependency for image cropping\r\n    api 'com.theartofdev.edmodo:android-image-cropper:2.8.0'\r\n    implementation 'com.github.yalantis:ucrop:2.2.5'\r\n    // dependencies for glide\r\n\r\n    implementation 'com.github.bumptech.glide:glide:4.11.0'\r\n    annotationProcessor 'com.github.bumptech.glide:compiler:4.11.0'\r\n    implementation 'com.google.android.play:core:1.8.3'\r\n    //dependency for image view\r\n    implementation 'com.github.chrisbanes:PhotoView:2.1.3'\r\n\r\n    implementation 'com.github.hotchemi:android-rate:1.0.1'\r\n    implementation 'com.github.Angtrim:Android-Five-Stars-Library:v3.1'\r\n    implementation 'androidx.viewpager2:viewpager2:1.0.0'\r\n    implementation 'com.makeramen:roundedimageview:2.3.0'\r\n    implementation 'com.inkapplications.viewpageindicator:library:2.4.3'\r\n    implementation 'me.relex:circleindicator:2.1.4'\r\n    implementation 'com.razorpay:checkout:1.5.16'\r\n    implementation 'com.github.mreram:showcaseview:1.1'\r\n    implementation 'com.getkeepsafe.taptargetview:taptargetview:1.13.0'\r\n\r\n    implementation ('cn.trinea.android.view.autoscrollviewpager:android-auto-scroll-view-pager:1.1.2')\r\n            {\r\n                exclude module:'support-v4'\r\n            }\r\n    implementation 'com.theartofdev.edmodo:android-image-cropper:2.3.7'\r\n    implementation 'com.github.vihtarb:tooltip:0.1.9'\r\n\r\n    implementation \"com.github.skydoves:balloon:1.2.7\"\r\n\r\n//color picker\r\n    implementation 'com.jaredrummler:colorpicker:1.1.0'\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/build.gradle	(revision f3a7fcbea448bd07a109743f0d2c9e65ef6ecb56)
+++ app/build.gradle	(date 1608794760444)
@@ -135,4 +135,5 @@
 //color picker
     implementation 'com.jaredrummler:colorpicker:1.1.0'
 
+
 }
\ No newline at end of file
Index: app/src/main/java/com/app/brandmania/Activity/OnlyTextEditorActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.app.brandmania.Activity;\r\n\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.databinding.DataBindingUtil;\r\n\r\nimport android.app.Activity;\r\nimport android.graphics.Color;\r\nimport android.graphics.Paint;\r\nimport android.graphics.Typeface;\r\nimport android.os.Bundle;\r\nimport android.view.View;\r\nimport android.view.WindowManager;\r\nimport android.widget.TextView;\r\n\r\nimport com.app.brandmania.Adapter.ColorAndEditTabAdapter;\r\nimport com.app.brandmania.Adapter.OnlyEditTabAdapter;\r\nimport com.app.brandmania.Interface.IColorChange;\r\nimport com.app.brandmania.Interface.ITextSizeEvent;\r\nimport com.google.android.material.tabs.TabLayout;\r\nimport com.app.brandmania.Adapter.FrameInterFace;\r\nimport com.app.brandmania.Adapter.ItemeInterFace;\r\nimport com.app.brandmania.Adapter.MultiListItem;\r\n\r\nimport com.app.brandmania.Interface.IItaliTextEvent;\r\nimport com.app.brandmania.Interface.ITextBoldEvent;\r\nimport com.app.brandmania.Interface.ITextColorChangeEvent;\r\nimport com.app.brandmania.Interface.IUnderLineTextEvent;\r\nimport com.app.brandmania.R;\r\nimport com.app.brandmania.Utils.IFontChangeEvent;\r\nimport com.app.brandmania.databinding.ActivityOnlyTextEditorBinding;\r\nimport com.jaredrummler.android.colorpicker.ColorPickerDialogListener;\r\nimport com.jaredrummler.android.colorpicker.ColorPickerView;\r\n\r\n\r\nimport static com.app.brandmania.Utils.Utility.Log;\r\n\r\npublic class OnlyTextEditorActivity extends AppCompatActivity implements ItemeInterFace, FrameInterFace, ITextSizeEvent,ITextColorChangeEvent, IFontChangeEvent, ITextBoldEvent, IItaliTextEvent, IUnderLineTextEvent, IColorChange, ColorPickerDialogListener, ColorPickerView.OnColorChangedListener {\r\n    Activity act;\r\n    TextView selectedForEdit;\r\n    View selectedForBackgroundChange;\r\n    int editorFragment;\r\n\r\n    int FramePrimaryOrSecondary=0;\r\n    private ActivityOnlyTextEditorBinding binding;\r\n    @Override protected void onCreate(Bundle savedInstanceState) {\r\n        setTheme(R.style.AppTheme_material_theme);\r\n        super.onCreate(savedInstanceState);\r\n        act=this;\r\n        getWindow().setFlags(WindowManager.LayoutParams.FLAG_SECURE, WindowManager.LayoutParams.FLAG_SECURE);\r\n        binding= DataBindingUtil.setContentView(act,R.layout.activity_only_text_editor);\r\n        binding.tabLayout.addTab(binding.tabLayout.newTab().setText(convertFirstUpper(\"Background\")));\r\n        binding.tabLayout.addTab(binding.tabLayout.newTab().setText(\"Frame\"));\r\n        binding.tabLayout.addTab(binding.tabLayout.newTab().setText(convertFirstUpper(\"Texture\")));\r\n        binding.tabLayout.addTab(binding.tabLayout.newTab().setText(convertFirstUpper(\"Text\")));\r\n        binding.tabLayout.setTabTextColors(Color.parseColor(\"#727272\"), Color.parseColor(\"#ad2753\"));\r\n        binding.tabLayout.setTabGravity(TabLayout.GRAVITY_FILL);\r\n        final OnlyEditTabAdapter adapter = new OnlyEditTabAdapter(act, getSupportFragmentManager(), binding.tabLayout.getTabCount());\r\n        binding.viewPager.setAdapter(adapter);\r\n        binding.viewPager.addOnPageChangeListener(new TabLayout.TabLayoutOnPageChangeListener(binding.tabLayout));\r\n        binding.textEdit.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                binding.clorframeLayout.setVisibility(View.VISIBLE);\r\n                binding.viewPager.setCurrentItem(3);\r\n            }\r\n        });\r\n\r\n\r\n        binding.tabLayout.addOnTabSelectedListener(new TabLayout.OnTabSelectedListener() {\r\n            @Override\r\n            public void onTabSelected(TabLayout.Tab tab) {\r\n                binding.viewPager.setCurrentItem(tab.getPosition());\r\n                editorFragment=tab.getPosition();\r\n\r\n                //  handler(editorFragment);\r\n            }\r\n\r\n            @Override\r\n            public void onTabUnselected(TabLayout.Tab tab) {\r\n            }\r\n\r\n            @Override\r\n            public void onTabReselected(TabLayout.Tab tab) {\r\n            }\r\n        });\r\n\r\n        binding.main.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                if (binding.clorframeLayout.getVisibility()==View.GONE)\r\n                {\r\n                    binding.clorframeLayout.setVisibility(View.VISIBLE);\r\n                    binding.textClick.setVisibility(View.GONE);\r\n                }\r\n\r\n            }\r\n        });\r\n\r\n\r\n\r\n        binding.textEdit.setOnFocusChangeListener(new View.OnFocusChangeListener() {\r\n            @Override\r\n            public void onFocusChange(View view, boolean b) {\r\n                if (b==true)\r\n                {\r\n                    selectedForEdit=binding.textEdit;\r\n                    binding.viewPager.setCurrentItem(3);\r\n                    editorFragment=3;\r\n                }\r\n            }\r\n        });\r\n        binding.backImage.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                FramePrimaryOrSecondary=0;\r\n                selectedForBackgroundChange=binding.backImage;\r\n                binding.viewPager.setCurrentItem(0);\r\n            }\r\n        });\r\n\r\n    }\r\n    public static String convertFirstUpper(String str) {\r\n\r\n        if (str == null || str.isEmpty()) {\r\n            return str;\r\n        }\r\n        Log(\"FirstLetter\", str.substring(0, 1) + \"    \" + str.substring(1));\r\n        return str.substring(0, 1).toUpperCase() + str.substring(1);\r\n    }\r\n    @Override public void onItemSelection(int position, MultiListItem listModel) {\r\n        binding.frameImage.setImageResource(listModel.getImage());\r\n    }\r\n    @Override public void onFrameItemSelection(int position, MultiListItem listModel) {\r\n        binding.frameImage.setImageResource(listModel.getImage());\r\n    }\r\n    @Override public void onColorItemChange(int colorcode) {\r\n        binding.textEdit.setTextColor(colorcode);\r\n    }\r\n    @Override public void onFontChangeListenert(String Font) {\r\n        Typeface custom_font = Typeface.createFromAsset(act.getAssets(), Font);\r\n        binding.textEdit.setTypeface(custom_font);\r\n    }\r\n    @Override public void onBoldTextChange(boolean Bold) {\r\n        if (Bold) {\r\n          //  Toast.makeText(act,\"true\",Toast.LENGTH_SHORT).show();\r\n            binding.textEdit.setTypeface(  binding.textEdit.getTypeface(), Typeface.BOLD);\r\n\r\n        }else {\r\n          //  Toast.makeText(act,\"false\",Toast.LENGTH_SHORT).show();\r\n            binding.textEdit.setTypeface(null, Typeface.NORMAL);\r\n\r\n        }\r\n\r\n    }\r\n    @Override public void onItalicTextChange(boolean Italic) {\r\n        if (Italic) {\r\n            //Toast.makeText(act,\"true\",Toast.LENGTH_SHORT).show();\r\n            binding.textEdit.setTypeface(  binding.textEdit.getTypeface(), Typeface.ITALIC);\r\n\r\n        }else {\r\n           // Toast.makeText(act,\"false\",Toast.LENGTH_SHORT).show();\r\n            binding.textEdit.setTypeface(null, Typeface.NORMAL);\r\n\r\n        }\r\n    }\r\n    @Override public void onUnderLineItalic(boolean Left) {\r\n        if (Left) {\r\n          //  Toast.makeText(act,\"true\",Toast.LENGTH_SHORT).show();\r\n            binding.textEdit.setPaintFlags( binding.textEdit.getPaintFlags() | Paint.UNDERLINE_TEXT_FLAG);\r\n        }\r\n        else\r\n        {\r\n           // Toast.makeText(act,\"false\",Toast.LENGTH_SHORT).show();\r\n          //  .setTypeface(null, Typeface.NORMAL);\r\n            binding.textEdit.setPaintFlags(0);\r\n        }\r\n    }\r\n    @Override public void onChooseColor(int colorCode) {\r\n        if (editorFragment==3 && selectedForEdit!=null) {\r\n            selectedForEdit.setTextColor(colorCode);\r\n        }\r\n        if (editorFragment==0 && selectedForBackgroundChange!=null){\r\n            if (FramePrimaryOrSecondary==0){\r\n                binding.backImage.setBackgroundColor(colorCode);\r\n            }\r\n            selectedForBackgroundChange.setBackgroundColor(colorCode);\r\n        }\r\n    }\r\n    @Override public void onColorChanged(int colorCode) {\r\n        if (editorFragment==3 && selectedForEdit!=null) {\r\n            selectedForEdit.setTextColor(colorCode);\r\n        }\r\n        if (editorFragment==0 && selectedForBackgroundChange!=null){\r\n            if (FramePrimaryOrSecondary==0){\r\n                binding.backImage.setBackgroundColor(colorCode);\r\n            }\r\n            selectedForBackgroundChange.setBackgroundColor(colorCode);\r\n        }\r\n    }\r\n    @Override public void onColorSelected(int dialogId, int colorCode) {\r\n        if (editorFragment==3 && selectedForEdit!=null) {\r\n            selectedForEdit.setTextColor(colorCode);\r\n        }\r\n        if (editorFragment==0 && selectedForBackgroundChange!=null){\r\n            if (FramePrimaryOrSecondary==0){\r\n                binding.backImage.setBackgroundColor(colorCode);\r\n            }\r\n            selectedForBackgroundChange.setBackgroundColor(colorCode);\r\n        }\r\n    }\r\n    @Override public void onDialogDismissed(int dialogId) {\r\n\r\n    }\r\n\r\n    @Override\r\n    public void onfontSize(int textsize) {\r\n\r\n        binding.textEdit.setTextSize(textsize);\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/app/brandmania/Activity/OnlyTextEditorActivity.java	(revision f3a7fcbea448bd07a109743f0d2c9e65ef6ecb56)
+++ app/src/main/java/com/app/brandmania/Activity/OnlyTextEditorActivity.java	(date 1608794760476)
@@ -71,8 +71,6 @@
             public void onTabSelected(TabLayout.Tab tab) {
                 binding.viewPager.setCurrentItem(tab.getPosition());
                 editorFragment=tab.getPosition();
-
-                //  handler(editorFragment);
             }
 
             @Override
@@ -81,6 +79,7 @@
 
             @Override
             public void onTabReselected(TabLayout.Tab tab) {
+
             }
         });
 
Index: .idea/gradle.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"GradleMigrationSettings\" migrationVersion=\"1\" />\r\n  <component name=\"GradleSettings\">\r\n    <option name=\"linkedExternalProjectsSettings\">\r\n      <GradleProjectSettings>\r\n        <option name=\"testRunner\" value=\"PLATFORM\" />\r\n        <option name=\"distributionType\" value=\"DEFAULT_WRAPPED\" />\r\n        <option name=\"externalProjectPath\" value=\"$PROJECT_DIR$\" />\r\n        <option name=\"gradleJvm\" value=\"1.8\" />\r\n        <option name=\"modules\">\r\n          <set>\r\n            <option value=\"$PROJECT_DIR$\" />\r\n            <option value=\"$PROJECT_DIR$/app\" />\r\n          </set>\r\n        </option>\r\n        <option name=\"resolveModulePerSourceSet\" value=\"false\" />\r\n      </GradleProjectSettings>\r\n    </option>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/gradle.xml	(revision f3a7fcbea448bd07a109743f0d2c9e65ef6ecb56)
+++ .idea/gradle.xml	(date 1608794860536)
@@ -15,6 +15,7 @@
           </set>
         </option>
         <option name="resolveModulePerSourceSet" value="false" />
+        <option name="useQualifiedModuleNames" value="true" />
       </GradleProjectSettings>
     </option>
   </component>
diff --git .idea/shelf/Uncommitted_changes_before_Update_at_12_17_2020_5_30_PM__Default_Changelist_.xml .idea/shelf/Uncommitted_changes_before_Update_at_12_17_2020_5_30_PM__Default_Changelist_.xml
diff --git .idea/shelf/Uncommitted_changes_before_Update_at_12_19_2020_5_30_PM__Default_Changelist_.xml .idea/shelf/Uncommitted_changes_before_Update_at_12_19_2020_5_30_PM__Default_Changelist_.xml
