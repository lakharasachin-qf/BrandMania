Index: app/src/main/java/com/app/brandmania/Activity/EditPicActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.app.brandmania.Activity;\r\n\r\nimport androidx.annotation.Nullable;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.core.content.ContextCompat;\r\nimport androidx.databinding.DataBindingUtil;\r\nimport androidx.recyclerview.widget.GridLayoutManager;\r\n\r\nimport android.Manifest;\r\nimport android.annotation.SuppressLint;\r\nimport android.app.Activity;\r\nimport android.content.Intent;\r\nimport android.content.pm.PackageManager;\r\nimport android.database.Cursor;\r\nimport android.graphics.Bitmap;\r\nimport android.graphics.BitmapFactory;\r\nimport android.graphics.Color;\r\nimport android.net.Uri;\r\nimport android.os.Build;\r\nimport android.os.Bundle;\r\nimport android.provider.OpenableColumns;\r\nimport android.util.Log;\r\nimport android.view.MotionEvent;\r\nimport android.view.ScaleGestureDetector;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.view.WindowManager;\r\nimport android.widget.FrameLayout;\r\nimport android.widget.ImageView;\r\nimport android.widget.RelativeLayout;\r\nimport android.widget.Toast;\r\n\r\nimport com.google.gson.Gson;\r\nimport com.app.brandmania.Adapter.ItemeInterFace;\r\nimport com.app.brandmania.Adapter.MenuAddaptor;\r\nimport com.app.brandmania.Adapter.MultiListItem;\r\nimport com.app.brandmania.R;\r\nimport com.app.brandmania.databinding.ActivityEditPic2Binding;\r\n\r\nimport com.app.brandmania.databinding.FragmentCustomBinding;\r\nimport com.theartofdev.edmodo.cropper.CropImage;\r\nimport com.theartofdev.edmodo.cropper.CropImageView;\r\nimport com.yalantis.ucrop.UCrop;\r\n\r\nimport java.io.File;\r\nimport java.util.ArrayList;\r\nimport java.util.Timer;\r\n\r\npublic class EditPicActivity extends AppCompatActivity implements ItemeInterFace {\r\n    public static final int VIEW_RECOMDATION = 0;\r\n\r\n    Activity act;\r\n    int windowwidth;\r\n    int windowheight;\r\n    ImageView imageView;\r\n    private ViewGroup.LayoutParams layoutParams;\r\n    private ActivityEditPic2Binding binding;\r\n    Timer timer;\r\n    private int xDelta;\r\n    private int yDelta;\r\n    private ViewGroup mainLayout;\r\n    ArrayList<MultiListItem> menuModels = new ArrayList<>();\r\n    private MultiListItem listModel;\r\n    Gson gson;\r\n    private int showingView = -1;\r\n    private static final int REQUEST_IMAGE = 101;\r\n    private String filename;\r\n    private Uri mCropImageUri;\r\n    private ScaleGestureDetector scaleGestureDetector;\r\n    private float mScaleFactor = 1.0f;\r\n    MotionEvent onClickTimeHelper;\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n\r\n        act = this;\r\n        binding= DataBindingUtil.setContentView(act, R.layout.activity_edit_pic2);\r\n        imageView = new ImageView(EditPicActivity.this);\r\n        mainLayout = (RelativeLayout) findViewById(R.id.main);\r\n        getWindow().setFlags(WindowManager.LayoutParams.FLAG_SECURE, WindowManager.LayoutParams.FLAG_SECURE);\r\n        gson = new Gson();\r\n        windowwidth = getWindowManager().getDefaultDisplay().getWidth();\r\n        windowheight = getWindowManager().getDefaultDisplay().getHeight();\r\n        Recommendation();\r\n//        binding.recoImageee.setImageDrawable(ContextCompat.getDrawable(act,R.drawable.firstframe));\r\n//        binding.recoImageee.setDrawingCacheEnabled(true);\r\n        binding.recoframe.setTag(\"0\");\r\n\r\n\r\n\r\n\r\n        binding.recoImageee.setOnTouchListener(new View.OnTouchListener() {\r\n            @SuppressLint(\"ClickableViewAccessibility\")\r\n            @Override\r\n            public boolean onTouch(View v, MotionEvent event) {\r\n                Bitmap bmp = Bitmap.createBitmap(v.getDrawingCache());\r\n                int color = bmp.getPixel((int) event.getX(), (int) event.getY());\r\n                onClickTimeHelper=event;\r\n                if (color == Color.TRANSPARENT) {\r\n                    binding.recoframe.setVisibility(View.VISIBLE);\r\n\r\n\r\n                    if (binding.recoframe.getTag().toString().equals(\"1\"))\r\n                    {\r\n                        binding.recoframe.setOnTouchListener(onTouchListener());\r\n                        binding.recoImageee.setEnabled(false);\r\n                    }else{\r\n                        onSelectImageClick();\r\n                    }\r\n                    //Toast.makeText(act, \"Yes TransPerent\", Toast.LENGTH_SHORT).show();\r\n                    return false;\r\n                }\r\n                else {\r\n                    //code to execute\r\n                    return true;\r\n                }\r\n            }\r\n        });\r\n\r\n\r\n        if (getIntent().hasExtra(\"flag\")) {\r\n            int flag = getIntent().getIntExtra(\"flag\", -1);\r\n            if (flag == VIEW_RECOMDATION) {\r\n                showingView = VIEW_RECOMDATION;\r\n            }\r\n        }\r\n       // if (showingView == VIEW_RECOMDATION);\r\n\r\n\r\n    }\r\n    public void Recommendation() {\r\n\r\n        ArrayList<MultiListItem> menuModels = new ArrayList<>();\r\n        MultiListItem model = new MultiListItem();\r\n        model.setLayoutType(MultiListItem.ACTIVITY_VIEWALLIMAGE);\r\n        model.setImage(R.drawable.firstframe);\r\n        menuModels.add(model);\r\n\r\n\r\n        model = new MultiListItem();\r\n        model.setLayoutType(MultiListItem.ACTIVITY_VIEWALLIMAGE);\r\n        model.setImage(R.drawable.secondframe);\r\n        menuModels.add(model);\r\n\r\n\r\n        model = new MultiListItem();\r\n        model.setLayoutType(MultiListItem.ACTIVITY_VIEWALLIMAGE);\r\n        model.setImage(R.drawable.thirdframe);\r\n        menuModels.add(model);\r\n\r\n        model = new MultiListItem();\r\n        model.setLayoutType(MultiListItem.ACTIVITY_VIEWALLIMAGE);\r\n        model.setImage(R.drawable.fourthframe);\r\n        menuModels.add(model);\r\n\r\n\r\n        MenuAddaptor menuAddaptor = new MenuAddaptor(menuModels, act);\r\n        binding.viewRecoRecyclerrrr.setLayoutManager(new GridLayoutManager(this,3));\r\n        binding.viewRecoRecyclerrrr.setHasFixedSize(true);\r\n        binding.viewRecoRecyclerrrr.setAdapter(menuAddaptor);\r\n    }\r\n    @Override public void onItemSelection(int position, MultiListItem listModel) {\r\n         //binding.recoImageee.setBackgroundResource(listModel.getImage());\r\n       binding.recoImageee.setImageDrawable(ContextCompat.getDrawable(act,listModel.getImage()));\r\n        binding.recoImageee.setDrawingCacheEnabled(true);\r\n\r\n\r\n    }\r\n    private View.OnTouchListener onTouchListener() {\r\n        return new View.OnTouchListener() {\r\n\r\n            @SuppressLint(\"ClickableViewAccessibility\")\r\n            @Override\r\n            public boolean onTouch(View view, MotionEvent event) {\r\n\r\n                final int x = (int) event.getRawX();\r\n                final int y = (int) event.getRawY();\r\n\r\n                switch (event.getAction() & MotionEvent.ACTION_MASK) {\r\n\r\n                    case MotionEvent.ACTION_DOWN:\r\n                        RelativeLayout.LayoutParams lParams = (RelativeLayout.LayoutParams)\r\n                                view.getLayoutParams();\r\n\r\n                        xDelta = x - lParams.leftMargin;\r\n                        yDelta = y - lParams.topMargin;\r\n                        break;\r\n\r\n                    case MotionEvent.ACTION_UP:\r\n                        Toast.makeText(act,\"I'm here!\", Toast.LENGTH_SHORT).show();\r\n                        break;\r\n\r\n                    case MotionEvent.ACTION_MOVE:\r\n                        RelativeLayout.LayoutParams layoutParams = (RelativeLayout.LayoutParams) view\r\n                                .getLayoutParams();\r\n                        layoutParams.leftMargin = x - xDelta;\r\n                        layoutParams.topMargin = y - yDelta;\r\n                        layoutParams.rightMargin = 0;\r\n                        layoutParams.bottomMargin = 0;\r\n                        view.setLayoutParams(layoutParams);\r\n                        break;\r\n                }\r\n\r\n                mainLayout.invalidate();\r\n                return true;\r\n            }\r\n        };\r\n    }\r\n    public void onSelectImageClick() {\r\n        CropImage.startPickImageActivity(this);\r\n\r\n    }\r\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\r\n\r\n        // handle result of pick image chooser\r\n        super.onActivityResult(requestCode, resultCode, data);\r\n        if (requestCode == CropImage.PICK_IMAGE_CHOOSER_REQUEST_CODE && resultCode == Activity.RESULT_OK) {\r\n            Uri imageUri = CropImage.getPickImageResultUri(this, data);\r\n\r\n            // For API >= 23 we need to check specifically that we have permissions to read external storage.\r\n            if (CropImage.isReadExternalStoragePermissionsRequired(this, imageUri)) {\r\n                // request permissions and handle the result in onRequestPermissionsResult()\r\n                mCropImageUri = imageUri;\r\n                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\r\n                    requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, 0);\r\n                }\r\n            } else {\r\n                // no permissions required or already grunted, can start crop image activity\r\n                startCropImageActivity(imageUri);\r\n            }\r\n        }\r\n\r\n        // handle result of CropImageActivity\r\n        if (requestCode == CropImage.CROP_IMAGE_ACTIVITY_REQUEST_CODE) {\r\n            CropImage.ActivityResult result = CropImage.getActivityResult(data);\r\n            if (resultCode == RESULT_OK) {\r\n\r\n                ((ImageView) findViewById(R.id.recoframe)).setImageURI(result.getUri());\r\n\r\n                binding.recoframe.setTag(\"1\");\r\n                //  Toast.makeText(this, \"Cropping successful, Sample: \" + result.getSampleSize(), Toast.LENGTH_LONG).show();\r\n            } else if (resultCode == CropImage.CROP_IMAGE_ACTIVITY_RESULT_ERROR_CODE) {\r\n                //  Toast.makeText(this, \"Cropping failed: \" + result.getError(), Toast.LENGTH_LONG).show();\r\n            }\r\n        }\r\n    }\r\n    @Override public void onRequestPermissionsResult(int requestCode, String permissions[], int[] grantResults) {\r\n        if (mCropImageUri != null && grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {\r\n            // required permissions granted, start crop image activity\r\n            startCropImageActivity(mCropImageUri);\r\n        } else {\r\n            //   Toast.makeText(this, \"Cancelling, required permissions are not granted\", Toast.LENGTH_LONG).show();\r\n        }\r\n    }\r\n    private void startCropImageActivity(Uri imageUri) {\r\n        CropImage.activity(imageUri)\r\n                .setGuidelines(CropImageView.Guidelines.ON)\r\n                .setMultiTouchEnabled(true)\r\n                .start(this);\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/app/brandmania/Activity/EditPicActivity.java	(revision 2a7755ed9051b40487ee686b2807ae9c35d83416)
+++ app/src/main/java/com/app/brandmania/Activity/EditPicActivity.java	(date 1608112525710)
@@ -69,6 +69,7 @@
     private ScaleGestureDetector scaleGestureDetector;
     private float mScaleFactor = 1.0f;
     MotionEvent onClickTimeHelper;
+    boolean isFirstTouchOnImage=false;
     @Override
     protected void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
@@ -82,8 +83,7 @@
         windowwidth = getWindowManager().getDefaultDisplay().getWidth();
         windowheight = getWindowManager().getDefaultDisplay().getHeight();
         Recommendation();
-//        binding.recoImageee.setImageDrawable(ContextCompat.getDrawable(act,R.drawable.firstframe));
-//        binding.recoImageee.setDrawingCacheEnabled(true);
+
         binding.recoframe.setTag("0");
 
 
@@ -98,8 +98,7 @@
                 onClickTimeHelper=event;
                 if (color == Color.TRANSPARENT) {
                     binding.recoframe.setVisibility(View.VISIBLE);
-
-
+                    isFirstTouchOnImage=true;
                     if (binding.recoframe.getTag().toString().equals("1"))
                     {
                         binding.recoframe.setOnTouchListener(onTouchListener());
@@ -107,8 +106,7 @@
                     }else{
                         onSelectImageClick();
                     }
-                    //Toast.makeText(act, "Yes TransPerent", Toast.LENGTH_SHORT).show();
-                    return false;
+                     return false;
                 }
                 else {
                     //code to execute
@@ -124,7 +122,6 @@
                 showingView = VIEW_RECOMDATION;
             }
         }
-       // if (showingView == VIEW_RECOMDATION);
 
 
     }
@@ -160,10 +157,9 @@
         binding.viewRecoRecyclerrrr.setAdapter(menuAddaptor);
     }
     @Override public void onItemSelection(int position, MultiListItem listModel) {
-         //binding.recoImageee.setBackgroundResource(listModel.getImage());
-       binding.recoImageee.setImageDrawable(ContextCompat.getDrawable(act,listModel.getImage()));
+        binding.recoImageee.setImageDrawable(ContextCompat.getDrawable(act,listModel.getImage()));
         binding.recoImageee.setDrawingCacheEnabled(true);
-
+        isFirstTouchOnImage=false;
 
     }
     private View.OnTouchListener onTouchListener() {
Index: app/src/main/java/com/app/brandmania/Activity/SpleshActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.app.brandmania.Activity;\r\n\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.databinding.DataBindingUtil;\r\n\r\nimport android.animation.AnimatorSet;\r\nimport android.animation.ObjectAnimator;\r\nimport android.app.Activity;\r\nimport android.content.Intent;\r\nimport android.os.Bundle;\r\nimport android.os.Handler;\r\nimport android.util.Log;\r\nimport android.view.View;\r\nimport android.view.WindowManager;\r\n\r\nimport com.android.volley.AuthFailureError;\r\nimport com.android.volley.DefaultRetryPolicy;\r\nimport com.android.volley.Request;\r\nimport com.android.volley.RequestQueue;\r\nimport com.android.volley.Response;\r\nimport com.android.volley.VolleyError;\r\nimport com.android.volley.toolbox.StringRequest;\r\nimport com.android.volley.toolbox.Volley;\r\nimport com.app.brandmania.Common.PreafManager;\r\nimport com.app.brandmania.Common.ResponseHandler;\r\nimport com.app.brandmania.Connection.BaseActivity;\r\nimport com.app.brandmania.Model.BrandListItem;\r\nimport com.app.brandmania.Model.FrameItem;\r\nimport com.app.brandmania.Model.IsCompeteModel;\r\nimport com.app.brandmania.R;\r\nimport com.app.brandmania.Utils.APIs;\r\nimport com.app.brandmania.Utils.Utility;\r\nimport com.app.brandmania.databinding.ActivityMainBinding;\r\n\r\nimport org.json.JSONArray;\r\nimport org.json.JSONException;\r\nimport org.json.JSONObject;\r\n\r\nimport java.nio.charset.StandardCharsets;\r\nimport java.util.ArrayList;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\n\r\npublic class SpleshActivity extends BaseActivity {\r\n    Activity act;\r\n    private ActivityMainBinding binding;\r\n    PreafManager preafManager;\r\n    AnimatorSet animatorSet1;\r\n    @Override\r\n    public void onCreate(Bundle savedInstanceState) {\r\n        setTheme(R.style.AppTheme_material_theme);\r\n        super.onCreate(savedInstanceState);\r\n        act = this;\r\n        binding = DataBindingUtil.setContentView(act, R.layout.activity_main);\r\n        this.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_HIDDEN);\r\n\r\n        getWindow().setFlags(WindowManager.LayoutParams.FLAG_SECURE, WindowManager.LayoutParams.FLAG_SECURE);\r\n        preafManager=new PreafManager(this);\r\n\r\n        binding.logo.setVisibility(View.VISIBLE);\r\n        final ObjectAnimator scaleAnimatiorXX = ObjectAnimator.ofFloat(binding.logo, \"scaleX\", 0, 1f);\r\n        ObjectAnimator scaleAnimatiorYX = ObjectAnimator.ofFloat(binding.logo, \"scaleY\", 0, 1f);\r\n        animatorSet1 = new AnimatorSet();\r\n        animatorSet1.playTogether(scaleAnimatiorXX, scaleAnimatiorYX);\r\n        animatorSet1.setDuration(3000);\r\n        new Handler().postDelayed(new Runnable() {\r\n            @Override\r\n            public void run() {\r\n\r\n                if (preafManager.getUserToken()!=null && !preafManager.getUserToken().isEmpty() ) {\r\n                    LoginFlow();\r\n                }\r\n                else {\r\n                    Intent intent = new Intent(act, LoginActivity.class);\r\n                    intent.addCategory(Intent.CATEGORY_HOME);\r\n                    intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\r\n                    startActivity(intent);\r\n                    overridePendingTransition(R.anim.slide_right_in, R.anim.slide_right_out);\r\n                    finish();\r\n                }\r\n\r\n            }\r\n        }, 1000);\r\n\r\n    }\r\n    private void LoginFlow() {\r\n        Utility.Log(\"API : \", APIs.IS_COMPLETE);\r\n        StringRequest stringRequest = new StringRequest(Request.Method.GET, APIs.IS_COMPLETE, new Response.Listener<String>() {\r\n            @Override\r\n            public void onResponse(String response) {\r\n                Utility.Log(\"IS_COMPLETE : \", response);\r\n                try {\r\n\r\n                    JSONObject jsonObject=new JSONObject(response);\r\n                    JSONObject jsonObject1 = jsonObject.getJSONObject(\"data\");\r\n                    if (jsonObject1.getString(\"is_completed\").equals(\"0\"))\r\n                    {\r\n                        preafManager.setIs_Registration(false);\r\n                        sessionCreat();\r\n                    }\r\n                    if (jsonObject1.getString(\"is_completed\").equals(\"1\"))\r\n                    {\r\n                        preafManager.setIS_Brand(false);\r\n                        sessionCreat();\r\n                    }\r\n                    if (jsonObject1.getString(\"is_completed\").equals(\"2\"))\r\n                    {\r\n                        preafManager.setIs_Registration(true);\r\n                        preafManager.setIS_Brand(true);\r\n                        getBrandList();\r\n\r\n                    }\r\n\r\n\r\n                } catch (JSONException e) {\r\n                    e.printStackTrace();\r\n                }\r\n\r\n            }\r\n        },\r\n                new Response.ErrorListener() {\r\n                    @Override\r\n                    public void onErrorResponse(VolleyError error) {\r\n\r\n                        error.printStackTrace();\r\n                        String body;\r\n\r\n\r\n\r\n                    }\r\n                }\r\n        ) {\r\n            /**\r\n             * Passing some request headers*\r\n             */\r\n\r\n            @Override\r\n            public Map<String, String> getHeaders() throws AuthFailureError {\r\n                Map<String, String> params = new HashMap<String, String>();\r\n                params.put(\"Accept\", \"application/json\");\r\n                params.put(\"Content-Type\", \"application/json\");\r\n                params.put(\"Authorization\",\"Bearer \"+preafManager.getUserToken());\r\n                Log.e(\"Token\",params.toString());\r\n                return params;\r\n            }\r\n\r\n\r\n            @Override\r\n            protected Map<String, String> getParams() {\r\n                Map<String, String> params = new HashMap<>();\r\n                Log.e(\"DateNdClass\", params.toString());\r\n                Utility.Log(\"POSTED-PARAMS-\", params.toString());\r\n                return params;\r\n            }\r\n\r\n        };\r\n\r\n        RequestQueue queue = Volley.newRequestQueue(getApplicationContext());\r\n        stringRequest.setRetryPolicy(new DefaultRetryPolicy(5000,\r\n                2,\r\n                DefaultRetryPolicy.DEFAULT_BACKOFF_MULT));\r\n        queue.add(stringRequest);\r\n    }\r\n    private void sessionCreat() {\r\n\r\n        preafManager=new PreafManager(act);\r\n        if (preafManager.getIs_Registration())\r\n        {\r\n            if (preafManager.getIS_Brand())\r\n            {\r\n                Intent i = new Intent(act, HomeActivity.class);\r\n                i.addCategory(Intent.CATEGORY_HOME);\r\n                i.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\r\n                startActivity(i);\r\n                overridePendingTransition(R.anim.slide_right_in, R.anim.slide_right_out);\r\n                finish();\r\n            }\r\n            else\r\n            {\r\n                Intent i = new Intent(act, AddBranddActivity.class);\r\n                i.addCategory(Intent.CATEGORY_HOME);\r\n                i.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\r\n                startActivity(i);\r\n                overridePendingTransition(R.anim.slide_right_in, R.anim.slide_right_out);\r\n                finish();\r\n            }\r\n        }\r\n        else\r\n        {\r\n            Intent intent = new Intent(act, RegistrationActivity.class);\r\n            intent.addCategory(Intent.CATEGORY_HOME);\r\n            intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\r\n            startActivity(intent);\r\n            overridePendingTransition(R.anim.slide_right_in, R.anim.slide_right_out);\r\n            finish();\r\n        }\r\n\r\n\r\n    }\r\n\r\n    private void getBrandList() {\r\n        Utility.Log(\"API : \", APIs.GET_BRAND);\r\n        StringRequest stringRequest = new StringRequest(Request.Method.POST, APIs.GET_BRAND, new Response.Listener<String>() {\r\n            @Override\r\n            public void onResponse(String response) {\r\n                Log.e(\"addbrandresponce\",response);\r\n                ArrayList<BrandListItem> brandListItems=new ArrayList<>();\r\n                try {\r\n                    JSONObject res=new JSONObject(response);\r\n\r\n                    JSONArray jsonArray1 = res.getJSONArray(\"data\");\r\n                    for (int i=0;i<jsonArray1.length();i++)\r\n                    {\r\n                        JSONObject jsonObject=jsonArray1.getJSONObject(i);\r\n                        BrandListItem brandListItemm=new BrandListItem();\r\n                        brandListItemm.setId(ResponseHandler.getString(jsonObject,\"id\"));\r\n                        brandListItemm.setCategoryId(ResponseHandler.getString(jsonObject, \"br_category_id\"));\r\n                        brandListItemm.setCategoryName(ResponseHandler.getString(jsonObject, \"br_category_name\"));\r\n                        brandListItemm.setName(ResponseHandler.getString(jsonObject,\"br_name\"));\r\n                        brandListItemm.setWebsite(ResponseHandler.getString(jsonObject,\"br_website\"));\r\n                        brandListItemm.setEmail(ResponseHandler.getString(jsonObject,\"br_email\"));\r\n                        brandListItemm.setPhonenumber(ResponseHandler.getString(jsonObject, \"br_phone\"));\r\n                        brandListItemm.setAddress(ResponseHandler.getString(jsonObject,\"br_address\"));\r\n                        brandListItemm.setLogo(ResponseHandler.getString(jsonObject,\"br_logo\"));\r\n                        brandListItemm.setPackage_id(ResponseHandler.getString(jsonObject, \"package_id\"));\r\n                        brandListItemm.setIs_frame(ResponseHandler.getString(jsonObject, \"is_frame\"));\r\n                        brandListItemm.setFrame_message(ResponseHandler.getString(jsonObject, \"frame_message\"));\r\n                        brandListItemm.setFrambaseyrl(ResponseHandler.getString(jsonObject, \"fream_base_url\"));\r\n                        brandListItemm.setIs_payment_pending(ResponseHandler.getString(jsonObject, \"is_payment_pending\"));\r\n                        brandListItemm.setPayment_message(ResponseHandler.getString(jsonObject, \"payment_message\"));\r\n                        brandListItemm.setPackagename(ResponseHandler.getString(jsonObject, \"package\"));\r\n                        brandListItemm.setPackagemessage(ResponseHandler.getString(jsonObject, \"package_message\"));\r\n                        brandListItemm.setNo_of_total_image(ResponseHandler.getString(jsonObject, \"no_of_img\"));\r\n                        brandListItemm.setNo_of_used_image(ResponseHandler.getString(jsonObject, \"no_of_used_img\"));\r\n                        brandListItemm.setNo_of_frame(ResponseHandler.getString(jsonObject, \"no_of_frame\"));\r\n                        brandListItemm.setNo_of_remaining(ResponseHandler.getString(jsonObject, \"remaining_img\"));\r\n                        brandListItemm.setExpiery_date(ResponseHandler.getString(jsonObject, \"expire_date\"));\r\n                        \r\n                        \r\n                        \r\n                        JSONArray jsonArray = jsonObject.getJSONArray(\"br_frame\");\r\n                        \r\n                        ArrayList<FrameItem>frameItems=null;\r\n                        frameItems = new ArrayList<>();\r\n                        for (int j = 0; j < jsonArray.length(); j++) {\r\n                            JSONObject jsonObject1 = jsonArray.getJSONObject(j);\r\n                            FrameItem frameItem = new FrameItem();\r\n                            frameItem.setFrame1(ResponseHandler.getString(jsonObject,\"fream_base_url\")+\"/\"+ResponseHandler.getString(jsonObject1, \"frame_path\"));\r\n                            frameItem.setFrameId(ResponseHandler.getString(jsonObject1, \"id\"));\r\n\r\n                            frameItems.add(frameItem);\r\n                        }\r\n\r\n                        brandListItemm.setFrame(frameItems);\r\n                        brandListItems.add(brandListItemm);\r\n                    }\r\n\r\n\r\n                    preafManager.setAddBrandList(brandListItems);\r\n                    preafManager.setIS_Brand(true);\r\n\r\n                    /*if (brandListItems!=null && brandListItems.size()!=0){\r\n                        preafManager.setActiveBrand(brandListItems.get(0));\r\n                    }*/\r\n\r\n\r\n                    Intent i = new Intent(act, HomeActivity.class);\r\n                    startActivity(i);\r\n                    overridePendingTransition(R.anim.right_enter, R.anim.left_out);\r\n                    finish();\r\n\r\n\r\n                }\r\n                catch (JSONException e) {\r\n                    e.printStackTrace();\r\n                }\r\n\r\n            }\r\n        },\r\n                new Response.ErrorListener() {\r\n                    @Override\r\n                    public void onErrorResponse(VolleyError error) {\r\n\r\n                        error.printStackTrace();\r\n//                        String body;\r\n//                        body = new String(error.networkResponse.data, StandardCharsets.UTF_8);\r\n//                        Log.e(\"Error \", body);\r\n\r\n\r\n                    }\r\n                }\r\n        ) {\r\n            /**\r\n             * Passing some request headers*\r\n             */\r\n\r\n            @Override\r\n            public Map<String, String> getHeaders() throws AuthFailureError {\r\n                Map<String, String> params = new HashMap<String, String>();\r\n                params.put(\"Accept\", \"application/json\");\r\n                params.put(\"Content-Type\", \"application/json\");\r\n                params.put(\"Authorization\",\"Bearer \"+preafManager.getUserToken());\r\n                Log.e(\"Token\",params.toString());\r\n                return params;\r\n            }\r\n\r\n\r\n            @Override\r\n            protected Map<String, String> getParams() {\r\n                Map<String, String> params = new HashMap<>();\r\n\r\n                Log.e(\"DateNdClass\", params.toString());\r\n                //params.put(\"upload_type_id\", String.valueOf(Constant.ADD_NOTICE));\r\n                Utility.Log(\"POSTED-PARAMS-\", params.toString());\r\n                return params;\r\n            }\r\n\r\n        };\r\n\r\n        RequestQueue queue = Volley.newRequestQueue(getApplicationContext());\r\n        stringRequest.setRetryPolicy(new DefaultRetryPolicy(5000,\r\n                2,\r\n                DefaultRetryPolicy.DEFAULT_BACKOFF_MULT));\r\n        queue.add(stringRequest);\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/app/brandmania/Activity/SpleshActivity.java	(revision 2a7755ed9051b40487ee686b2807ae9c35d83416)
+++ app/src/main/java/com/app/brandmania/Activity/SpleshActivity.java	(date 1608109165087)
@@ -108,7 +108,6 @@
                         preafManager.setIs_Registration(true);
                         preafManager.setIS_Brand(true);
                         getBrandList();
-
                     }
 
 
Index: .idea/gradle.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"GradleMigrationSettings\" migrationVersion=\"1\" />\r\n  <component name=\"GradleSettings\">\r\n    <option name=\"linkedExternalProjectsSettings\">\r\n      <GradleProjectSettings>\r\n        <option name=\"testRunner\" value=\"PLATFORM\" />\r\n        <option name=\"distributionType\" value=\"DEFAULT_WRAPPED\" />\r\n        <option name=\"externalProjectPath\" value=\"$PROJECT_DIR$\" />\r\n        <option name=\"gradleJvm\" value=\"1.8\" />\r\n        <option name=\"modules\">\r\n          <set>\r\n            <option value=\"$PROJECT_DIR$\" />\r\n            <option value=\"$PROJECT_DIR$/app\" />\r\n          </set>\r\n        </option>\r\n        <option name=\"resolveModulePerSourceSet\" value=\"false\" />\r\n      </GradleProjectSettings>\r\n    </option>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/gradle.xml	(revision 2a7755ed9051b40487ee686b2807ae9c35d83416)
+++ .idea/gradle.xml	(date 1608108426765)
@@ -15,6 +15,7 @@
           </set>
         </option>
         <option name="resolveModulePerSourceSet" value="false" />
+        <option name="useQualifiedModuleNames" value="true" />
       </GradleProjectSettings>
     </option>
   </component>
diff --git .idea/shelf/Uncommitted_changes_before_Update_at_12_14_2020_12_39_PM__Default_Changelist_.xml .idea/shelf/Uncommitted_changes_before_Update_at_12_14_2020_12_39_PM__Default_Changelist_.xml
diff --git .idea/shelf/Uncommitted_changes_before_Update_at_12_15_2020_10_54_AM__Default_Changelist_.xml .idea/shelf/Uncommitted_changes_before_Update_at_12_15_2020_10_54_AM__Default_Changelist_.xml
