Index: app/src/main/java/com/app/brandmania/Activity/PdfActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.app.brandmania.Activity;\r\n\r\nimport android.app.Activity;\r\nimport android.content.ContentValues;\r\nimport android.content.Intent;\r\nimport android.graphics.Bitmap;\r\nimport android.graphics.Color;\r\nimport android.graphics.drawable.BitmapDrawable;\r\nimport android.graphics.drawable.ColorDrawable;\r\nimport android.net.Uri;\r\nimport android.os.Build;\r\nimport android.os.Bundle;\r\nimport android.os.Environment;\r\nimport android.provider.MediaStore;\r\nimport android.text.Html;\r\nimport android.util.Log;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.widget.RelativeLayout;\r\nimport android.widget.Toast;\r\n\r\nimport androidx.constraintlayout.widget.ConstraintLayout;\r\nimport androidx.core.content.FileProvider;\r\nimport androidx.databinding.DataBindingUtil;\r\nimport androidx.palette.graphics.Palette;\r\nimport androidx.recyclerview.widget.GridLayoutManager;\r\nimport androidx.recyclerview.widget.LinearLayoutManager;\r\n\r\nimport com.android.volley.AuthFailureError;\r\nimport com.android.volley.Request;\r\nimport com.android.volley.RequestQueue;\r\nimport com.android.volley.Response;\r\nimport com.android.volley.VolleyError;\r\nimport com.android.volley.toolbox.StringRequest;\r\nimport com.android.volley.toolbox.Volley;\r\nimport com.app.brandmania.Activity.brand.UpdateBandList;\r\nimport com.app.brandmania.Activity.packages.PackageActivity;\r\nimport com.app.brandmania.Adapter.BackgroundColorsAdapter;\r\nimport com.app.brandmania.Adapter.ColorsAdapterPDF;\r\nimport com.app.brandmania.Adapter.IconsColorsAdapter;\r\nimport com.app.brandmania.Adapter.TextColorsAdapter;\r\nimport com.app.brandmania.Adapter.VisitingCardAdapter;\r\nimport com.app.brandmania.BuildConfig;\r\nimport com.app.brandmania.Common.Constant;\r\nimport com.app.brandmania.Common.HELPER;\r\nimport com.app.brandmania.Common.MakeMyBrandApp;\r\nimport com.app.brandmania.Common.ObserverActionID;\r\nimport com.app.brandmania.Common.PreafManager;\r\nimport com.app.brandmania.Common.ResponseHandler;\r\nimport com.app.brandmania.Common.VisitingCardHelper;\r\nimport com.app.brandmania.Connection.BaseActivity;\r\nimport com.app.brandmania.Fragment.bottom.ColorPickerFragment;\r\nimport com.app.brandmania.Model.BackgroundColorsModel;\r\nimport com.app.brandmania.Model.BrandListItem;\r\nimport com.app.brandmania.Model.ColorsModel;\r\nimport com.app.brandmania.Model.IconsColorsModel;\r\nimport com.app.brandmania.Model.TextColorsModel;\r\nimport com.app.brandmania.Model.VisitingCardModel;\r\nimport com.app.brandmania.R;\r\nimport com.app.brandmania.databinding.ActivityPdfBinding;\r\nimport com.app.brandmania.databinding.DialogUpgradeLayoutSecondBinding;\r\nimport com.app.brandmania.databinding.LayoutDigitalCardFifthBinding;\r\nimport com.app.brandmania.databinding.LayoutDigitalCardFourthBinding;\r\nimport com.app.brandmania.databinding.LayoutDigitalCardOneBinding;\r\nimport com.app.brandmania.databinding.LayoutDigitalCardThreeBinding;\r\nimport com.app.brandmania.databinding.LayoutDigitalCardTwoBinding;\r\nimport com.app.brandmania.utils.APIs;\r\nimport com.app.brandmania.utils.CodeReUse;\r\nimport com.app.brandmania.utils.Utility;\r\nimport com.google.gson.Gson;\r\nimport com.itextpdf.text.Document;\r\nimport com.itextpdf.text.Image;\r\nimport com.itextpdf.text.Rectangle;\r\nimport com.itextpdf.text.pdf.PdfWriter;\r\nimport com.squareup.picasso.Callback;\r\nimport com.squareup.picasso.Picasso;\r\n\r\nimport org.json.JSONException;\r\nimport org.json.JSONObject;\r\n\r\nimport java.io.File;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.FileOutputStream;\r\nimport java.io.IOException;\r\nimport java.util.ArrayList;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\n\r\npublic class PdfActivity extends BaseActivity {\r\n    private ActivityPdfBinding binding;\r\n    private Activity act;\r\n    private Palette colors;\r\n    private ArrayList<VisitingCardModel> digitalCardList;\r\n    private VisitingCardModel CurrentSelectedCard;\r\n    private VisitingCardAdapter visitingCardAdapter;\r\n    public boolean isUserPaid = true;\r\n    public boolean forShareUser = true;\r\n    private boolean isLoading = false;\r\n    int objectSelectedPosition = 0;\r\n\r\n    ArrayList<BrandListItem> multiListItems = new ArrayList<>();\r\n\r\n    ArrayList<ColorsModel> colorsList = new ArrayList<>();\r\n    ColorsModel selectedModel;\r\n    ColorsAdapterPDF colorsAdapterPDF;\r\n\r\n    ArrayList<BackgroundColorsModel> backgroundColorsList = new ArrayList<>();\r\n    BackgroundColorsModel backgroundSelectModel;\r\n    BackgroundColorsAdapter backgroundColorsAdapter;\r\n\r\n    ArrayList<TextColorsModel> textColorsList = new ArrayList<>();\r\n    TextColorsModel textSelectModel;\r\n    TextColorsAdapter textColorsAdapter;\r\n\r\n    ArrayList<IconsColorsModel> iconsColorsList = new ArrayList<>();\r\n    IconsColorsModel iconsSelectModel;\r\n    IconsColorsAdapter iconsColorsAdapter;\r\n\r\n    @Override\r\n    public void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setTheme(R.style.AppTheme_material_theme);\r\n        act = this;\r\n        binding = DataBindingUtil.setContentView(act, R.layout.activity_pdf);\r\n\r\n        if (prefManager.getActiveBrand()!=null) {\r\n            digitalCardList = new ArrayList<>();\r\n            digitalCardList.addAll(VisitingCardHelper.getDigitalCardList());\r\n            binding.saveIcon.setOnClickListener(new View.OnClickListener() {\r\n                @Override\r\n                public void onClick(View v) {\r\n\r\n                    if (!Utility.isUserPaid(prefManager.getActiveBrand())) {\r\n\r\n                        if (CurrentSelectedCard.isFree()) {\r\n                            isUserPaid = true;\r\n                            frontPageLayoutImage(false);\r\n                        } else {\r\n                            isUserPaid = false;\r\n                            askForUpgradeToEnterpisePackage();\r\n                        }\r\n\r\n                    } else {\r\n                        if (Utility.isPackageExpired(act)) {\r\n                            if (CurrentSelectedCard.isFree()) {\r\n                                isUserPaid = true;\r\n                                frontPageLayoutImage(false);\r\n                            } else {\r\n                                isUserPaid = false;\r\n                                askForUpgradeToEnterpisePackage();\r\n                            }\r\n                        } else {\r\n                            frontPageLayoutImage(false);\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n            binding.exportIcon.setOnClickListener(new View.OnClickListener() {\r\n                @Override\r\n                public void onClick(View v) {\r\n                    if (!Utility.isUserPaid(prefManager.getActiveBrand())) {\r\n\r\n                        if (CurrentSelectedCard.isFree()) {\r\n                            isUserPaid = true;\r\n                            frontPageLayoutImage(true);\r\n                        } else {\r\n                            isUserPaid = false;\r\n                            askForUpgradeToEnterpisePackage();\r\n                        }\r\n\r\n                    } else {\r\n                        if (Utility.isPackageExpired(act)) {\r\n                            if (CurrentSelectedCard.isFree()) {\r\n                                isUserPaid = true;\r\n                                frontPageLayoutImage(true);\r\n                            } else {\r\n                                isUserPaid = false;\r\n                                askForUpgradeToEnterpisePackage();\r\n                            }\r\n                        } else {\r\n                            frontPageLayoutImage(true);\r\n                        }\r\n\r\n                    }\r\n                }\r\n            });\r\n\r\n            binding.BackButtonMember.setOnClickListener(new View.OnClickListener() {\r\n                @Override\r\n                public void onClick(View v) {\r\n                    onBackPressed();\r\n                }\r\n            });\r\n\r\n            activity(0);\r\n\r\n            Picasso.get().load(prefManager.getActiveBrand().getLogo())\r\n                    .into(binding.pdfLogo, new Callback() {\r\n                        @Override\r\n                        public void onSuccess() {\r\n                            colors = createPaletteSync(((BitmapDrawable) binding.pdfLogo.getDrawable()).getBitmap());\r\n\r\n                            setDigitalCardAdapter();\r\n                        }\r\n\r\n                        @Override\r\n                        public void onError(Exception e) {\r\n\r\n                        }\r\n                    });\r\n\r\n            binding.brandName.setText(prefManager.getActiveBrand().getName());\r\n\r\n            if (prefManager.getActiveBrand().getEmail().isEmpty()) {\r\n                binding.emailTxtLayout.setVisibility(View.GONE);\r\n            } else {\r\n                binding.emailId.setText(prefManager.getActiveBrand().getEmail());\r\n            }\r\n\r\n\r\n            if (prefManager.getActiveBrand().getPhonenumber().isEmpty()) {\r\n                binding.contactTxtLayout.setVisibility(View.GONE);\r\n            } else {\r\n                binding.contactText.setText(prefManager.getActiveBrand().getPhonenumber());\r\n            }\r\n\r\n            if (prefManager.getActiveBrand().getAddress().isEmpty()) {\r\n                binding.addressEdtLayout.setVisibility(View.GONE);\r\n            } else {\r\n                binding.address.setText(prefManager.getActiveBrand().getAddress());\r\n            }\r\n\r\n            binding.alertText.setOnClickListener(new View.OnClickListener() {\r\n                @Override\r\n                public void onClick(View v) {\r\n                    HELPER.ROUTE(act, UpdateBandList.class);\r\n                }\r\n            });\r\n\r\n            if (prefManager.getActiveBrand().getIs_payment_pending().equalsIgnoreCase(\"0\")) {\r\n                binding.waterMark.setVisibility(View.GONE);\r\n            }\r\n\r\n            if (prefManager.getActiveBrand().getBrandService().isEmpty()) {\r\n                binding.services.setVisibility(View.INVISIBLE);\r\n            } else {\r\n                String[] list = prefManager.getActiveBrand().getBrandService().split(\"[,\\n]\");\r\n                String sericesStr = \"\";\r\n                int i = 0;\r\n                for (int j = 0; j < list.length; j++) {\r\n                    String s = list[j];\r\n                    sericesStr = sericesStr + \"\\n- \" + s;\r\n                    i++;\r\n                    if (i == 5) {\r\n                        break;\r\n                    }\r\n                }\r\n                binding.servicesTxt.setText(sericesStr);\r\n            }\r\n\r\n            digitalCardList = new ArrayList<>();\r\n            digitalCardList.addAll(VisitingCardHelper.getDigitalCardList());\r\n        }else{\r\n            binding.scrollView.setVisibility(View.GONE);\r\n            binding.loader.setVisibility(View.GONE);\r\n\r\n        }\r\n    }\r\n\r\n    public void setBackgroundAdapter() {\r\n\r\n        if (backgroundColorsList.size() != 0) {\r\n            backgroundColorsList.clear();\r\n            if (backgroundColorsAdapter != null) {\r\n                backgroundColorsAdapter.notifyDataSetChanged();\r\n            }\r\n        }\r\n        backgroundColorsList.addAll(VisitingCardHelper.getBackgroundColorList(CurrentSelectedCard, colors, act));\r\n\r\n        backgroundColorsAdapter = new BackgroundColorsAdapter(backgroundColorsList, act);\r\n        BackgroundColorsAdapter.onItemSelectListener onItemSelectListener = new BackgroundColorsAdapter.onItemSelectListener() {\r\n            @Override\r\n            public void onItemSelect(BackgroundColorsModel model, int position) {\r\n                if (backgroundSelectModel != null) {\r\n                    backgroundSelectModel.setSelected(false);\r\n                }\r\n                model.setSelected(true);\r\n                backgroundSelectModel = model;\r\n                if (backgroundColorsAdapter != null) {\r\n                    backgroundColorsAdapter.notifyDataSetChanged();\r\n                }\r\n                objectSelectedPosition = position;\r\n                showBackgroundFragmentList();\r\n            }\r\n        };\r\n\r\n        backgroundColorsAdapter.setOnItemSelectListener(onItemSelectListener);\r\n        binding.backgroundcolorList.setLayoutManager(new GridLayoutManager(act, 3));\r\n        binding.backgroundcolorList.setHasFixedSize(true);\r\n        binding.backgroundcolorList.setAdapter(backgroundColorsAdapter);\r\n        backgroundSelectModel = backgroundColorsList.get(0);\r\n    }\r\n\r\n    public void setTextAdapter() {\r\n\r\n        if (textColorsList.size() != 0) {\r\n            textColorsList.clear();\r\n            if (textColorsAdapter != null) {\r\n                textColorsAdapter.notifyDataSetChanged();\r\n            }\r\n        }\r\n\r\n        textColorsList.addAll(VisitingCardHelper.getTextColorList(CurrentSelectedCard, colors, act));\r\n\r\n        textColorsAdapter = new TextColorsAdapter(textColorsList, act);\r\n        TextColorsAdapter.onItemSelectListener onItemSelectListener = new TextColorsAdapter.onItemSelectListener() {\r\n            @Override\r\n            public void onItemSelect(TextColorsModel model, int position) {\r\n                if (textSelectModel != null) {\r\n                    textSelectModel.setSelected(false);\r\n                }\r\n                model.setSelected(true);\r\n                textSelectModel = model;\r\n                if (textColorsAdapter != null) {\r\n                    textColorsAdapter.notifyDataSetChanged();\r\n                }\r\n                objectSelectedPosition = position;\r\n                showTextFragmentList();\r\n            }\r\n\r\n        };\r\n        textColorsAdapter.setOnItemSelectListener(onItemSelectListener);\r\n        binding.TextcolorList.setLayoutManager(new GridLayoutManager(act, 3));\r\n        binding.TextcolorList.setHasFixedSize(true);\r\n        binding.TextcolorList.setAdapter(textColorsAdapter);\r\n        textSelectModel = textColorsList.get(0);\r\n    }\r\n\r\n    public void setAdapter() {\r\n        if (colorsList.size() != 0) {\r\n            colorsList.clear();\r\n            if (colorsAdapterPDF != null) {\r\n                colorsAdapterPDF.notifyDataSetChanged();\r\n            }\r\n        }\r\n\r\n        colorsList.addAll(VisitingCardHelper.getColorList(CurrentSelectedCard, colors, act));\r\n\r\n        colorsAdapterPDF = new ColorsAdapterPDF(colorsList, act);\r\n        ColorsAdapterPDF.onItemSelectListener onItemSelectListener = new ColorsAdapterPDF.onItemSelectListener() {\r\n            @Override\r\n            public void onItemSelect(ColorsModel model, int position) {\r\n                if (selectedModel != null) {\r\n                    selectedModel.setSelected(false);\r\n                }\r\n                model.setSelected(true);\r\n                selectedModel = model;\r\n                if (colorsAdapterPDF != null) {\r\n                    colorsAdapterPDF.notifyDataSetChanged();\r\n                }\r\n                objectSelectedPosition = position;\r\n                showFragmentList();\r\n            }\r\n        };\r\n        colorsAdapterPDF.setOnItemSelectListener(onItemSelectListener);\r\n        binding.colorList.setLayoutManager(new LinearLayoutManager(act, LinearLayoutManager.HORIZONTAL, false));\r\n        binding.colorList.setHasFixedSize(true);\r\n        binding.colorList.setAdapter(colorsAdapterPDF);\r\n        selectedModel = colorsList.get(0);\r\n    }\r\n\r\n\r\n    public void setDigitalCardAdapter() {\r\n        isLoading = false;\r\n        Utility.dismissProgress();\r\n        binding.alertText.setText(Html.fromHtml(\"Please fill all the details for better perfect design.\" + \"<font color=\\\"red\\\">\" + \"<b>\" + \"Click here to fill details.\" + \"</b>\" + \"</font>\"));\r\n        visitingCardAdapter = new VisitingCardAdapter(digitalCardList, act);\r\n        VisitingCardAdapter.onVisitingCardListener onItemSelectListener = (layout, visitingCardModel) -> {\r\n            CurrentSelectedCard = visitingCardModel;\r\n            addDynamicLayout();\r\n        };\r\n        visitingCardAdapter.setListener(onItemSelectListener);\r\n\r\n        binding.cardList.setLayoutManager(new LinearLayoutManager(act, LinearLayoutManager.HORIZONTAL, false));\r\n        binding.cardList.setHasFixedSize(true);\r\n        binding.cardList.setAdapter(visitingCardAdapter);\r\n\r\n        CurrentSelectedCard = digitalCardList.get(0);\r\n        addDynamicLayout();\r\n    }\r\n\r\n    ColorPickerFragment bottomSheetFragment;\r\n\r\n    public void showBackgroundFragmentList() {\r\n        bottomSheetFragment = new ColorPickerFragment();\r\n        ColorPickerFragment.OnColorChoose onColorChoose;\r\n        onColorChoose = color -> {\r\n            VisitingCardHelper.applyBackgroundColor(CurrentSelectedCard, color, backgroundSelectModel);\r\n            backgroundSelectModel.setColor(color);\r\n            backgroundColorsList.set(objectSelectedPosition, backgroundSelectModel);\r\n            backgroundColorsAdapter.notifyItemChanged(objectSelectedPosition);\r\n        };\r\n        bottomSheetFragment.setOnColorChoose(onColorChoose);\r\n        if (bottomSheetFragment.isVisible()) {\r\n            bottomSheetFragment.dismiss();\r\n        }\r\n        if (bottomSheetFragment.isAdded()) {\r\n            bottomSheetFragment.dismiss();\r\n        }\r\n\r\n        bottomSheetFragment.show(getSupportFragmentManager(), bottomSheetFragment.getTag());\r\n    }\r\n\r\n    public void showTextFragmentList() {\r\n        bottomSheetFragment = new ColorPickerFragment();\r\n        ColorPickerFragment.OnColorChoose onColorChoose = color -> {\r\n            VisitingCardHelper.applyTextColor(CurrentSelectedCard, color, textSelectModel);\r\n            textSelectModel.setColor(color);\r\n            textColorsList.set(objectSelectedPosition, textSelectModel);\r\n            textColorsAdapter.notifyItemChanged(objectSelectedPosition);\r\n        };\r\n\r\n        bottomSheetFragment.setOnColorChoose(onColorChoose);\r\n        if (bottomSheetFragment.isVisible()) {\r\n            bottomSheetFragment.dismiss();\r\n        }\r\n        if (bottomSheetFragment.isAdded()) {\r\n            bottomSheetFragment.dismiss();\r\n        }\r\n        bottomSheetFragment.show(getSupportFragmentManager(), bottomSheetFragment.getTag());\r\n    }\r\n\r\n    public void showIconsFragmentList() {\r\n        bottomSheetFragment = new ColorPickerFragment();\r\n        ColorPickerFragment.OnColorChoose onColorChoose = color -> {\r\n            VisitingCardHelper.applyIconsColor(CurrentSelectedCard, color, iconsSelectModel);\r\n            iconsSelectModel.setColor(color);\r\n            iconsColorsList.set(objectSelectedPosition, iconsSelectModel);\r\n            iconsColorsAdapter.notifyItemChanged(objectSelectedPosition);\r\n        };\r\n\r\n        bottomSheetFragment.setOnColorChoose(onColorChoose);\r\n        if (bottomSheetFragment.isVisible()) {\r\n            bottomSheetFragment.dismiss();\r\n        }\r\n        if (bottomSheetFragment.isAdded()) {\r\n            bottomSheetFragment.dismiss();\r\n        }\r\n        bottomSheetFragment.show(getSupportFragmentManager(), bottomSheetFragment.getTag());\r\n    }\r\n\r\n    public void showFragmentList() {\r\n        bottomSheetFragment = new ColorPickerFragment();\r\n        ColorPickerFragment.OnColorChoose onColorChoose = color -> {\r\n            VisitingCardHelper.applyColor(CurrentSelectedCard, color, selectedModel);\r\n            selectedModel.setColor(color);\r\n            colorsList.set(objectSelectedPosition, selectedModel);\r\n            colorsAdapterPDF.notifyItemChanged(objectSelectedPosition);\r\n        };\r\n\r\n        bottomSheetFragment.setOnColorChoose(onColorChoose);\r\n        if (bottomSheetFragment.isVisible()) {\r\n            bottomSheetFragment.dismiss();\r\n        }\r\n        if (bottomSheetFragment.isAdded()) {\r\n            bottomSheetFragment.dismiss();\r\n        }\r\n\r\n        bottomSheetFragment.show(getSupportFragmentManager(), bottomSheetFragment.getTag());\r\n    }\r\n\r\n    public void setIconsdAdapter() {\r\n\r\n        if (iconsColorsList.size() != 0) {\r\n            iconsColorsList.clear();\r\n            if (iconsColorsAdapter != null) {\r\n                iconsColorsAdapter.notifyDataSetChanged();\r\n            }\r\n        }\r\n\r\n        iconsColorsList.addAll(VisitingCardHelper.getIconsColorList(CurrentSelectedCard, colors, act));\r\n\r\n        iconsColorsAdapter = new IconsColorsAdapter(iconsColorsList, act);\r\n        IconsColorsAdapter.onItemSelectListener onItemSelectListener = new IconsColorsAdapter.onItemSelectListener() {\r\n            @Override\r\n            public void onItemSelect(IconsColorsModel model, int position) {\r\n                if (iconsSelectModel != null) {\r\n                    iconsSelectModel.setSelected(false);\r\n                }\r\n                model.setSelected(true);\r\n                iconsSelectModel = model;\r\n                if (iconsColorsAdapter != null) {\r\n                    iconsColorsAdapter.notifyDataSetChanged();\r\n                }\r\n                objectSelectedPosition = position;\r\n                showIconsFragmentList();\r\n            }\r\n        };\r\n\r\n        iconsColorsAdapter.setOnItemSelectListener(onItemSelectListener);\r\n        binding.iconscolorList.setLayoutManager(new GridLayoutManager(act, 3));\r\n        binding.iconscolorList.setHasFixedSize(true);\r\n        binding.iconscolorList.setAdapter(iconsColorsAdapter);\r\n        iconsSelectModel = iconsColorsList.get(0);\r\n    }\r\n\r\n    public Palette createPaletteSync(Bitmap bitmap) {\r\n        Palette p = Palette.from(bitmap).generate();\r\n        return p;\r\n    }\r\n\r\n    String dirpath;\r\n    File frontPage;\r\n    File backPage;\r\n\r\n\r\n    @Override\r\n    public void onResume() {\r\n        super.onResume();\r\n\r\n        if (CurrentSelectedCard != null) {\r\n            getBrandList();\r\n        }\r\n    }\r\n\r\n    public void addDynamicLayout() {\r\n        binding.container.removeAllViews();\r\n        if (CurrentSelectedCard.getLayoutType() == VisitingCardModel.LAYOUT_ONE) {\r\n            LayoutDigitalCardOneBinding oneBinding = DataBindingUtil.inflate(LayoutInflater.from(act), R.layout.layout_digital_card_one, null, false);\r\n\r\n            CurrentSelectedCard.setOneBinding(oneBinding);\r\n            binding.container.getLayoutParams().width = ConstraintLayout.LayoutParams.MATCH_PARENT;\r\n            binding.container.requestLayout();\r\n            binding.container.addView(oneBinding.getRoot());\r\n            View view = oneBinding.getRoot();\r\n            view.getLayoutParams().width = RelativeLayout.LayoutParams.MATCH_PARENT;\r\n            view.requestLayout();\r\n            VisitingCardHelper.loadDataCardOne(act, oneBinding, colors);\r\n            setBackgroundAdapter();\r\n            setTextAdapter();\r\n            setIconsdAdapter();\r\n            //setAdapter();\r\n        } else if (CurrentSelectedCard.getLayoutType() == VisitingCardModel.LAYOUT_TWO) {\r\n            LayoutDigitalCardTwoBinding twoBinding = DataBindingUtil.inflate(LayoutInflater.from(act), R.layout.layout_digital_card_two, null, false);\r\n\r\n            CurrentSelectedCard.setTwoBinding(twoBinding);\r\n            binding.container.getLayoutParams().width = ConstraintLayout.LayoutParams.MATCH_PARENT;\r\n            binding.container.requestLayout();\r\n            binding.container.addView(twoBinding.getRoot());\r\n            View view = twoBinding.getRoot();\r\n            view.getLayoutParams().width = RelativeLayout.LayoutParams.MATCH_PARENT;\r\n            view.requestLayout();\r\n            VisitingCardHelper.loadDataCardTwo(act, twoBinding, colors);\r\n            setBackgroundAdapter();\r\n            setTextAdapter();\r\n            setIconsdAdapter();\r\n            //setAdapter();\r\n        } else if (CurrentSelectedCard.getLayoutType() == VisitingCardModel.LAYOUT_THREE) {\r\n            LayoutDigitalCardThreeBinding threeBinding = DataBindingUtil.inflate(LayoutInflater.from(act), R.layout.layout_digital_card_three, null, false);\r\n\r\n            CurrentSelectedCard.setThreeBinding(threeBinding);\r\n            binding.container.getLayoutParams().width = ConstraintLayout.LayoutParams.MATCH_PARENT;\r\n            binding.container.requestLayout();\r\n            binding.container.addView(threeBinding.getRoot());\r\n            View view = threeBinding.getRoot();\r\n            view.getLayoutParams().width = RelativeLayout.LayoutParams.MATCH_PARENT;\r\n            view.requestLayout();\r\n            VisitingCardHelper.loadDataCardThree(act, threeBinding, colors);\r\n            setBackgroundAdapter();\r\n            setTextAdapter();\r\n            setIconsdAdapter();\r\n            //setAdapter();\r\n        } else if (CurrentSelectedCard.getLayoutType() == VisitingCardModel.LAYOUT_FOUR) {\r\n            LayoutDigitalCardFourthBinding fourBinding = DataBindingUtil.inflate(LayoutInflater.from(act), R.layout.layout_digital_card_fourth, null, false);\r\n\r\n            CurrentSelectedCard.setFourBinding(fourBinding);\r\n            binding.container.getLayoutParams().width = ConstraintLayout.LayoutParams.MATCH_PARENT;\r\n            binding.container.requestLayout();\r\n            binding.container.addView(fourBinding.getRoot());\r\n            View view = fourBinding.getRoot();\r\n            view.getLayoutParams().width = RelativeLayout.LayoutParams.MATCH_PARENT;\r\n            view.requestLayout();\r\n            VisitingCardHelper.loadDataCardFour(act, fourBinding, colors);\r\n            setBackgroundAdapter();\r\n            setTextAdapter();\r\n            setIconsdAdapter();\r\n            //setAdapter();\r\n\r\n        } else if (CurrentSelectedCard.getLayoutType() == VisitingCardModel.LAYOUT_FIVE) {\r\n            LayoutDigitalCardFifthBinding fiveBinding = DataBindingUtil.inflate(LayoutInflater.from(act), R.layout.layout_digital_card_fifth, null, false);\r\n\r\n            CurrentSelectedCard.setFiveBinding(fiveBinding);\r\n            binding.container.getLayoutParams().width = ConstraintLayout.LayoutParams.MATCH_PARENT;\r\n            binding.container.requestLayout();\r\n            binding.container.addView(fiveBinding.getRoot());\r\n            View view = fiveBinding.getRoot();\r\n            view.getLayoutParams().width = RelativeLayout.LayoutParams.MATCH_PARENT;\r\n            view.requestLayout();\r\n            VisitingCardHelper.loadDataCardFive(act, fiveBinding, colors);\r\n            setBackgroundAdapter();\r\n            setTextAdapter();\r\n            setIconsdAdapter();\r\n            //setAdapter();\r\n        }\r\n    }\r\n\r\n//    public void layoutToImage() {\r\n//        binding.pdfLayout.setDrawingCacheEnabled(true);\r\n//        binding.pdfLayout.buildDrawingCache();\r\n//        FileOutputStream fileOutputStream = null;\r\n//        String name = \"image\" + System.currentTimeMillis() + \".jpg\";\r\n//        frontPage = new File(act.getCacheDir(), name);\r\n//\r\n//        try {\r\n//            fileOutputStream = new FileOutputStream(frontPage);\r\n//            Bitmap bitmap = binding.pdfLayout.getDrawingCache();\r\n//            bitmap.compress(Bitmap.CompressFormat.PNG, 100, fileOutputStream);\r\n//            fileOutputStream.flush();\r\n//            fileOutputStream.close();\r\n//            imageToPDF(forShareUser);\r\n//        } catch (IOException e) {\r\n//            e.printStackTrace();\r\n//        }\r\n//    }\r\n\r\n    public void frontPageLayoutImage(boolean forShareUser) {\r\n        if (CurrentSelectedCard != null) {\r\n            if (CurrentSelectedCard.getLayoutType() == VisitingCardModel.LAYOUT_ONE) {\r\n                CurrentSelectedCard.getOneBinding().frontPage.setDrawingCacheEnabled(true);\r\n                CurrentSelectedCard.getOneBinding().frontPage.buildDrawingCache();\r\n            } else if (CurrentSelectedCard.getLayoutType() == VisitingCardModel.LAYOUT_TWO) {\r\n                CurrentSelectedCard.getTwoBinding().frontPage.setDrawingCacheEnabled(true);\r\n                CurrentSelectedCard.getTwoBinding().frontPage.buildDrawingCache();\r\n            } else if (CurrentSelectedCard.getLayoutType() == VisitingCardModel.LAYOUT_THREE) {\r\n                CurrentSelectedCard.getThreeBinding().frontPage.setDrawingCacheEnabled(true);\r\n                CurrentSelectedCard.getThreeBinding().frontPage.buildDrawingCache();\r\n            } else if (CurrentSelectedCard.getLayoutType() == VisitingCardModel.LAYOUT_FOUR) {\r\n                CurrentSelectedCard.getFourBinding().frontPage.setDrawingCacheEnabled(true);\r\n                CurrentSelectedCard.getFourBinding().frontPage.buildDrawingCache();\r\n            } else if (CurrentSelectedCard.getLayoutType() == VisitingCardModel.LAYOUT_FIVE) {\r\n                CurrentSelectedCard.getFiveBinding().frontPage.setDrawingCacheEnabled(true);\r\n                CurrentSelectedCard.getFiveBinding().frontPage.buildDrawingCache();\r\n            }\r\n            FileOutputStream fileOutputStream = null;\r\n            String name = \"image\" + System.currentTimeMillis() + \".jpg\";\r\n            frontPage = new File(act.getCacheDir(), name);\r\n\r\n            try {\r\n                fileOutputStream = new FileOutputStream(frontPage);\r\n                Bitmap bitmap = null;\r\n\r\n                if (CurrentSelectedCard.getLayoutType() == VisitingCardModel.LAYOUT_ONE) {\r\n                    bitmap = CurrentSelectedCard.getOneBinding().frontPage.getDrawingCache();\r\n                } else if (CurrentSelectedCard.getLayoutType() == VisitingCardModel.LAYOUT_TWO) {\r\n                    bitmap = CurrentSelectedCard.getTwoBinding().frontPage.getDrawingCache();\r\n                } else if (CurrentSelectedCard.getLayoutType() == VisitingCardModel.LAYOUT_THREE) {\r\n                    bitmap = CurrentSelectedCard.getThreeBinding().frontPage.getDrawingCache();\r\n                } else if (CurrentSelectedCard.getLayoutType() == VisitingCardModel.LAYOUT_FOUR) {\r\n                    bitmap = CurrentSelectedCard.getFourBinding().frontPage.getDrawingCache();\r\n                } else if (CurrentSelectedCard.getLayoutType() == VisitingCardModel.LAYOUT_FIVE) {\r\n                    bitmap = CurrentSelectedCard.getFiveBinding().frontPage.getDrawingCache();\r\n                }\r\n                assert bitmap != null;\r\n                bitmap.compress(Bitmap.CompressFormat.PNG, 100, fileOutputStream);\r\n                fileOutputStream.flush();\r\n                fileOutputStream.close();\r\n                //imageToPDF();\r\n                backPageLayoutImage(forShareUser);\r\n            } catch (IOException e) {\r\n                e.printStackTrace();\r\n            }\r\n        }\r\n\r\n//            textColorsAdapter.setOnItemSelectListener(onItemSelectListener);\r\n//            binding.TextcolorList.setLayoutManager(new GridLayoutManager(act, 2));\r\n//            binding.TextcolorList.setHasFixedSize(true);\r\n//            binding.TextcolorList.setAdapter(textColorsAdapter);\r\n//            textSelectModel = textColorsList.get(0);\r\n    }\r\n\r\n    public void backPageLayoutImage(boolean forShareUser) {\r\n        if (CurrentSelectedCard != null) {\r\n            if (CurrentSelectedCard.getLayoutType() == VisitingCardModel.LAYOUT_ONE) {\r\n                CurrentSelectedCard.getOneBinding().backPage.setDrawingCacheEnabled(true);\r\n                CurrentSelectedCard.getOneBinding().backPage.buildDrawingCache();\r\n            } else if (CurrentSelectedCard.getLayoutType() == VisitingCardModel.LAYOUT_TWO) {\r\n                CurrentSelectedCard.getTwoBinding().backPage.setDrawingCacheEnabled(true);\r\n                CurrentSelectedCard.getTwoBinding().backPage.buildDrawingCache();\r\n            } else if (CurrentSelectedCard.getLayoutType() == VisitingCardModel.LAYOUT_THREE) {\r\n                CurrentSelectedCard.getThreeBinding().backPage.setDrawingCacheEnabled(true);\r\n                CurrentSelectedCard.getThreeBinding().backPage.buildDrawingCache();\r\n            } else if (CurrentSelectedCard.getLayoutType() == VisitingCardModel.LAYOUT_FOUR) {\r\n                CurrentSelectedCard.getFourBinding().backPage.setDrawingCacheEnabled(true);\r\n                CurrentSelectedCard.getFourBinding().backPage.buildDrawingCache();\r\n            } else if (CurrentSelectedCard.getLayoutType() == VisitingCardModel.LAYOUT_FIVE) {\r\n                CurrentSelectedCard.getFiveBinding().backPage.setDrawingCacheEnabled(true);\r\n                CurrentSelectedCard.getFiveBinding().backPage.buildDrawingCache();\r\n            }\r\n\r\n            FileOutputStream fileOutputStream = null;\r\n            String name = \"image\" + System.currentTimeMillis() + \".jpg\";\r\n            backPage = new File(act.getCacheDir(), name);\r\n\r\n            try {\r\n                fileOutputStream = new FileOutputStream(backPage);\r\n                Bitmap bitmap = null;\r\n\r\n                if (CurrentSelectedCard.getLayoutType() == VisitingCardModel.LAYOUT_ONE) {\r\n                    bitmap = CurrentSelectedCard.getOneBinding().backPage.getDrawingCache();\r\n                } else if (CurrentSelectedCard.getLayoutType() == VisitingCardModel.LAYOUT_TWO) {\r\n                    bitmap = CurrentSelectedCard.getTwoBinding().backPage.getDrawingCache();\r\n                } else if (CurrentSelectedCard.getLayoutType() == VisitingCardModel.LAYOUT_THREE) {\r\n                    bitmap = CurrentSelectedCard.getThreeBinding().backPage.getDrawingCache();\r\n                } else if (CurrentSelectedCard.getLayoutType() == VisitingCardModel.LAYOUT_FOUR) {\r\n                    bitmap = CurrentSelectedCard.getFourBinding().backPage.getDrawingCache();\r\n                } else if (CurrentSelectedCard.getLayoutType() == VisitingCardModel.LAYOUT_FIVE) {\r\n                    bitmap = CurrentSelectedCard.getFiveBinding().backPage.getDrawingCache();\r\n                }\r\n                assert bitmap != null;\r\n                bitmap.compress(Bitmap.CompressFormat.PNG, 100, fileOutputStream);\r\n                fileOutputStream.flush();\r\n                fileOutputStream.close();\r\n                imageToPDF(forShareUser);\r\n            } catch (IOException e) {\r\n                e.printStackTrace();\r\n            }\r\n        }\r\n    }\r\n\r\n    String outputFile = \"\";\r\n\r\n    public void imageToPDF(boolean forShareUser) throws FileNotFoundException {\r\n        try {\r\n            HELPER._INIT_FOLDER(Constant.DOCUMENT);\r\n            Document document = new Document(new Rectangle(1050, 600), 0, 0, 0, 0);\r\n            String path = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOWNLOADS).getAbsolutePath() + \"/\" + Constant.ROOT + \"/\" + Constant.DOCUMENT;\r\n            File dir = new File(path);\r\n            if (!dir.exists())\r\n                dir.mkdirs();\r\n\r\n            dirpath = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOWNLOADS).toString();\r\n            if (Build.VERSION.SDK_INT < Build.VERSION_CODES.R) {\r\n                PdfWriter.getInstance(document, new FileOutputStream(path + \"/\" + prefManager.getActiveBrand().getName() + \".pdf\")); //  Change pdf's name.\r\n                document.open();\r\n                Image img = Image.getInstance(frontPage.getAbsolutePath());\r\n                float scaler = ((document.getPageSize().getWidth() - 0) / img.getWidth()) * 100;\r\n                img.scalePercent(scaler);\r\n                img.setPaddingTop(0f);\r\n                img.setAlignment(Image.ALIGN_CENTER | Image.ALIGN_TOP);\r\n                document.add(img);\r\n\r\n                img = Image.getInstance(backPage.getAbsolutePath());\r\n                scaler = ((document.getPageSize().getWidth() - 0) / img.getWidth()) * 100;\r\n                img.scalePercent(scaler);\r\n                img.setPaddingTop(0f);\r\n                img.setAlignment(Image.ALIGN_CENTER | Image.ALIGN_TOP);\r\n                document.add(img);\r\n\r\n            } else {\r\n\r\n                ContentValues values = new ContentValues();\r\n                values.put(MediaStore.MediaColumns.DISPLAY_NAME, prefManager.getActiveBrand().getName() + \".pdf\");\r\n                String desDirectory = Environment.DIRECTORY_DOWNLOADS + \"/\" + Constant.ROOT + \"/\" + Constant.DOCUMENT;\r\n                outputFile = desDirectory + File.separator + prefManager.getActiveBrand().getName() + \".pdf\";\r\n                values.put(MediaStore.MediaColumns.RELATIVE_PATH, desDirectory);\r\n\r\n                Uri uri = act.getContentResolver().insert(MediaStore.Downloads.EXTERNAL_CONTENT_URI, values);\r\n\r\n                PdfWriter.getInstance(document, act.getContentResolver().openOutputStream(uri));\r\n                document.open();\r\n\r\n                Image img = Image.getInstance(frontPage.getAbsolutePath());\r\n                float scaler = ((document.getPageSize().getWidth() - 0) / img.getWidth()) * 100;\r\n                img.scalePercent(scaler);\r\n                img.setPaddingTop(0f);\r\n                img.setAlignment(Image.ALIGN_CENTER | Image.ALIGN_TOP);\r\n                document.add(img);\r\n\r\n                img = Image.getInstance(backPage.getAbsolutePath());\r\n                scaler = ((document.getPageSize().getWidth() - 0) / img.getWidth()) * 100;\r\n                img.scalePercent(scaler);\r\n                img.setPaddingTop(0f);\r\n                img.setAlignment(Image.ALIGN_CENTER | Image.ALIGN_TOP);\r\n                document.add(img);\r\n\r\n//                String FilePath = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOWNLOADS) + \"/\" + Constant.ROOT + \"/\" + Constant.DOCUMENT + \"/\" + prefManager.getActiveBrand().getName() + \".pdf\";\r\n//                Intent intent = new Intent(Intent.CATEGORY_OPENABLE);\r\n//                File file = new File(FilePath);\r\n//                Uri apkURI = FileProvider.getUriForFile(act, BuildConfig.APPLICATION_ID + \".provider\", file);\r\n//                intent.setDataAndType(apkURI, \"application/pdf\");\r\n//                startActivity(intent);\r\n            }\r\n            document.close();\r\n            Toast.makeText(act, \"PDF Generated successfully!..\", Toast.LENGTH_SHORT).show();\r\n\r\n            if (forShareUser) {\r\n                //2 for share\r\n                activity(2);// 2 for share\r\n                actionFlagForDownloadOrShare = 2;\r\n            } else {\r\n                //1 for download only\r\n                activity(1); // 1 for download\r\n                actionFlagForDownloadOrShare = 1;\r\n            }\r\n\r\n\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    private void viewPdf(String name, Activity act) {\r\n\r\n        String FilePath = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOWNLOADS) + \"/\" + Constant.ROOT + \"/\" + Constant.DOCUMENT + \"/\" + name + \".pdf\";\r\n        //Log.e(\"FilePath\", \"New Path: \" + FilePath);\r\n\r\n        File file;\r\n\r\n        Intent intent = new Intent(Intent.ACTION_SEND);\r\n        if (Build.VERSION.SDK_INT < Build.VERSION_CODES.R) {\r\n\r\n            file = new File(FilePath);\r\n            Uri apkURI = FileProvider.getUriForFile(act, BuildConfig.APPLICATION_ID + \".provider\", file);\r\n            intent.setDataAndType(apkURI, \"application/pdf\");\r\n            intent.putExtra(Intent.EXTRA_STREAM, apkURI);\r\n        } else {\r\n\r\n            file = new File(Environment.getExternalStorageDirectory() + \"/\" + outputFile);\r\n            Uri apkURI = FileProvider.getUriForFile(act, BuildConfig.APPLICATION_ID + \".provider\", file);\r\n            intent.setDataAndType(apkURI, \"application/pdf\");\r\n            intent.putExtra(Intent.EXTRA_STREAM, apkURI);\r\n        }\r\n        intent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);\r\n        act.startActivity(Intent.createChooser(intent, \"Share Pdf to...\"));\r\n    }\r\n\r\n    // ask to upgrade package to 999 for use all frames\r\n    DialogUpgradeLayoutSecondBinding layoutSecondBinding;\r\n\r\n    public void askForUpgradeToEnterpisePackage() {\r\n        layoutSecondBinding = DataBindingUtil.inflate(LayoutInflater.from(act), R.layout.dialog_upgrade_layout_second, null, false);\r\n        androidx.appcompat.app.AlertDialog.Builder builder = new androidx.appcompat.app.AlertDialog.Builder(act, R.style.MyAlertDialogStyle_extend);\r\n        builder.setView(layoutSecondBinding.getRoot());\r\n        androidx.appcompat.app.AlertDialog alertDialog = builder.create();\r\n        alertDialog.setContentView(layoutSecondBinding.getRoot());\r\n        layoutSecondBinding.viewPackage.setOnClickListener(v -> {\r\n            alertDialog.dismiss();\r\n            Intent intent = new Intent(act, PackageActivity.class);\r\n            intent.putExtra(\"Profile\", \"1\");\r\n            act.startActivity(intent);\r\n            act.overridePendingTransition(R.anim.slide_right_in, R.anim.slide_right_out);\r\n        });\r\n        layoutSecondBinding.closeBtn.setOnClickListener(v -> alertDialog.dismiss());\r\n        if (Utility.isPackageExpired(act)) {\r\n            layoutSecondBinding.element2.setText(\"Expired\");\r\n        } else {\r\n            layoutSecondBinding.element2.setText(\"Free\");\r\n        }\r\n        layoutSecondBinding.element3.setText(\"To download digital visiting card, please upgrade your package.\");\r\n        alertDialog.getWindow().setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));\r\n        alertDialog.show();\r\n    }\r\n\r\n    String activityId = \"\";\r\n    int actionFlagForDownloadOrShare = -1;\r\n\r\n    private void activity(int flag) {\r\n        if (isLoading)\r\n            return;\r\n        isLoading = true;\r\n\r\n        if (flag == 0) {\r\n            binding.loader.setVisibility(View.VISIBLE);\r\n        } else {\r\n            Utility.showLoadingTran(act);\r\n        }\r\n        StringRequest request = new StringRequest(Request.Method.POST, APIs.ADD_BUSS_ACTIVITY, new Response.Listener<String>() {\r\n            @Override\r\n            public void onResponse(String response) {\r\n                Utility.Log(\"response : \", response);\r\n                isLoading = false;\r\n                if (flag == 0) {\r\n                    binding.loader.setVisibility(View.GONE);\r\n                    binding.scrollView.setVisibility(View.VISIBLE);\r\n                } else {\r\n                    Utility.dismissLoadingTran();\r\n                }\r\n\r\n                try {\r\n                    JSONObject jsonObject = new JSONObject(response);\r\n                    if (ResponseHandler.isSuccess(null, jsonObject)) {\r\n                        activityId = ResponseHandler.getString(ResponseHandler.getJSONObject(jsonObject, \"data\"), \"id\");\r\n                    }\r\n                } catch (JSONException e) {\r\n                    e.printStackTrace();\r\n                }\r\n\r\n                if (actionFlagForDownloadOrShare == 2) {\r\n                    actionFlagForDownloadOrShare = -1;\r\n                    viewPdf(prefManager.getActiveBrand().getName(), act);\r\n                }\r\n            }\r\n        }, new Response.ErrorListener() {\r\n            @Override\r\n            public void onErrorResponse(VolleyError error) {\r\n                error.printStackTrace();\r\n                isLoading = false;\r\n                Utility.dismissLoadingTran();\r\n\r\n                binding.loader.setVisibility(View.GONE);\r\n                binding.scrollView.setVisibility(View.VISIBLE);\r\n            }\r\n        }) {\r\n\r\n            @Override\r\n            public Map<String, String> getHeaders() throws AuthFailureError {\r\n                Map<String, String> params = new HashMap<String, String>();\r\n                params.put(\"Accept\", \"application/x-www-form-urlencoded\");//application/json\r\n                params.put(\"Content-Type\", \"application/x-www-form-urlencoded\");\r\n                params.put(\"X-Authorization\", \"Bearer\" + prefManager.getUserToken());\r\n                //Log.e(\"Token\", params.toString());\r\n                return params;\r\n            }\r\n\r\n\r\n            @Override\r\n            protected Map<String, String> getParams() throws AuthFailureError {\r\n                HashMap<String, String> map = new HashMap<>();\r\n\r\n                map.put(\"is_download\", String.valueOf(flag));\r\n\r\n                if (!activityId.isEmpty())\r\n                    map.put(\"id \", activityId);\r\n\r\n                return map;\r\n            }\r\n        };\r\n        RequestQueue queue = Volley.newRequestQueue(this);\r\n        queue.add(request);\r\n    }\r\n\r\n\r\n    public void loadDataRefreshing() {\r\n        prefManager = new PreafManager(act);\r\n        if (CurrentSelectedCard != null && CurrentSelectedCard.getLayoutType() == VisitingCardModel.LAYOUT_ONE) {\r\n            VisitingCardHelper.loadDataCardOne(act, CurrentSelectedCard.getOneBinding(), colors);\r\n        } else if (CurrentSelectedCard != null && CurrentSelectedCard.getLayoutType() == VisitingCardModel.LAYOUT_TWO) {\r\n            VisitingCardHelper.loadDataCardTwo(act, CurrentSelectedCard.getTwoBinding(), colors);\r\n        } else if (CurrentSelectedCard != null && CurrentSelectedCard.getLayoutType() == VisitingCardModel.LAYOUT_THREE) {\r\n            VisitingCardHelper.loadDataCardThree(act, CurrentSelectedCard.getThreeBinding(), colors);\r\n        } else if (CurrentSelectedCard != null && CurrentSelectedCard.getLayoutType() == VisitingCardModel.LAYOUT_FOUR) {\r\n            Log.e(\"data\",\"4\");\r\n            VisitingCardHelper.loadDataCardFour(act, CurrentSelectedCard.getFourBinding(), colors);\r\n        } else if (CurrentSelectedCard != null && CurrentSelectedCard.getLayoutType() == VisitingCardModel.LAYOUT_FIVE) {\r\n            VisitingCardHelper.loadDataCardFive(act, CurrentSelectedCard.getFiveBinding(), colors);\r\n        }\r\n    }\r\n\r\n    private void getBrandList() {\r\n        Utility.Log(\"API : \", APIs.GET_BRAND);\r\n\r\n        binding.loader.setVisibility(View.VISIBLE);\r\n        binding.scrollView.setVisibility(View.GONE);\r\n        StringRequest stringRequest = new StringRequest(Request.Method.POST, APIs.GET_BRAND, new Response.Listener<String>() {\r\n            @Override\r\n            public void onResponse(String response) {\r\n\r\n                Utility.Log(\"GET_BRAND : \", response);\r\n                try {\r\n\r\n                    JSONObject jsonObject = new JSONObject(response);\r\n                    multiListItems = ResponseHandler.HandleGetBrandList(jsonObject);\r\n\r\n                    if (multiListItems != null && multiListItems.size() != 0) {\r\n                        for (int i = 0; i < multiListItems.size(); i++) {\r\n                            if (multiListItems.get(i).getName().equalsIgnoreCase(prefManager.getActiveBrand().getName())) {\r\n                                prefManager.setActiveBrand(multiListItems.get(i));\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n                    loadDataRefreshing();\r\n                    binding.loader.setVisibility(View.GONE);\r\n                    binding.scrollView.setVisibility(View.VISIBLE);\r\n\r\n                } catch (JSONException e) {\r\n                    e.printStackTrace();\r\n                }\r\n            }\r\n        },\r\n                new Response.ErrorListener() {\r\n                    @Override\r\n                    public void onErrorResponse(VolleyError error) {\r\n\r\n                        error.printStackTrace();\r\n                        binding.loader.setVisibility(View.GONE);\r\n                        binding.scrollView.setVisibility(View.VISIBLE);\r\n                        loadDataRefreshing();\r\n\r\n                    }\r\n                }\r\n        ) {\r\n            /**\r\n             * Passing some request headers*\r\n             */\r\n\r\n            @Override\r\n            public Map<String, String> getHeaders() throws AuthFailureError {\r\n                return getHeader(CodeReUse.GET_FORM_HEADER);\r\n            }\r\n\r\n            @Override\r\n            protected Map<String, String> getParams() {\r\n                Map<String, String> params = new HashMap<>();\r\n                Log.e(\"DateNdClass\", params.toString());\r\n\r\n                //Log.e(\"DateNdClass\", params.toString());\r\n                Utility.Log(\"POSTED-PARAMS-\", params.toString());\r\n                return params;\r\n            }\r\n        };\r\n\r\n        RequestQueue queue = Volley.newRequestQueue(getApplicationContext());\r\n        queue.add(stringRequest);\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/app/brandmania/Activity/PdfActivity.java b/app/src/main/java/com/app/brandmania/Activity/PdfActivity.java
--- a/app/src/main/java/com/app/brandmania/Activity/PdfActivity.java	(revision 9f316353b6784bffd0bc962d6abb94b9d35bb532)
+++ b/app/src/main/java/com/app/brandmania/Activity/PdfActivity.java	(date 1638530282097)
@@ -123,7 +123,7 @@
         act = this;
         binding = DataBindingUtil.setContentView(act, R.layout.activity_pdf);
 
-        if (prefManager.getActiveBrand()!=null) {
+        if (prefManager.getActiveBrand() != null) {
             digitalCardList = new ArrayList<>();
             digitalCardList.addAll(VisitingCardHelper.getDigitalCardList());
             binding.saveIcon.setOnClickListener(new View.OnClickListener() {
@@ -199,7 +199,6 @@
                         @Override
                         public void onSuccess() {
                             colors = createPaletteSync(((BitmapDrawable) binding.pdfLogo.getDrawable()).getBitmap());
-
                             setDigitalCardAdapter();
                         }
 
@@ -260,7 +259,7 @@
 
             digitalCardList = new ArrayList<>();
             digitalCardList.addAll(VisitingCardHelper.getDigitalCardList());
-        }else{
+        } else {
             binding.scrollView.setVisibility(View.GONE);
             binding.loader.setVisibility(View.GONE);
 
@@ -949,7 +948,7 @@
         } else if (CurrentSelectedCard != null && CurrentSelectedCard.getLayoutType() == VisitingCardModel.LAYOUT_THREE) {
             VisitingCardHelper.loadDataCardThree(act, CurrentSelectedCard.getThreeBinding(), colors);
         } else if (CurrentSelectedCard != null && CurrentSelectedCard.getLayoutType() == VisitingCardModel.LAYOUT_FOUR) {
-            Log.e("data","4");
+            Log.e("data", "4");
             VisitingCardHelper.loadDataCardFour(act, CurrentSelectedCard.getFourBinding(), colors);
         } else if (CurrentSelectedCard != null && CurrentSelectedCard.getLayoutType() == VisitingCardModel.LAYOUT_FIVE) {
             VisitingCardHelper.loadDataCardFive(act, CurrentSelectedCard.getFiveBinding(), colors);
Index: .idea/shelf/Uncommitted_changes_before_Update_at_11_26_2021_5_36_PM_[Default_Changelist]/shelved.patch
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_11_26_2021_5_36_PM_[Default_Changelist]/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Update_at_11_26_2021_5_36_PM_[Default_Changelist]/shelved.patch
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Update_at_11_26_2021_5_36_PM_[Default_Changelist]/shelved.patch	(revision 9f316353b6784bffd0bc962d6abb94b9d35bb532)
+++ /dev/null	(revision 9f316353b6784bffd0bc962d6abb94b9d35bb532)
@@ -1,108 +0,0 @@
-Index: .idea/misc.xml
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"DesignSurface\">\r\n    <option name=\"filePathToZoomLevelMap\">\r\n      <map>\r\n        <entry key=\"..\\:/_ANDROID_PROJECTS/BrandManiaUpdate/app/src/main/res/drawable/digital_card_ovel.xml\" value=\"0.20416666666666666\" />\r\n        <entry key=\"..\\:/_ANDROID_PROJECTS/BrandManiaUpdate/app/src/main/res/drawable/digital_card_round_rect.xml\" value=\"0.20416666666666666\" />\r\n        <entry key=\"..\\:/_ANDROID_PROJECTS/BrandManiaUpdate/app/src/main/res/drawable/digital_card_round_rect_more.xml\" value=\"0.20416666666666666\" />\r\n        <entry key=\"..\\:/_ANDROID_PROJECTS/BrandManiaUpdate/app/src/main/res/drawable/digital_card_round_rect_thin.xml\" value=\"0.20416666666666666\" />\r\n        <entry key=\"..\\:/_ANDROID_PROJECTS/BrandManiaUpdate/app/src/main/res/drawable/digital_card_round_shap.xml\" value=\"0.20416666666666666\" />\r\n        <entry key=\"..\\:/_ANDROID_PROJECTS/BrandManiaUpdate/app/src/main/res/drawable/digital_card_round_shap_icon.xml\" value=\"0.20416666666666666\" />\r\n        <entry key=\"..\\:/_ANDROID_PROJECTS/BrandManiaUpdate/app/src/main/res/drawable/digital_card_top_flat_shap.xml\" value=\"0.20416666666666666\" />\r\n        <entry key=\"..\\:/_ANDROID_PROJECTS/BrandManiaUpdate/app/src/main/res/drawable/digital_round_corner_item_one.xml\" value=\"0.20416666666666666\" />\r\n        <entry key=\"..\\:/_ANDROID_PROJECTS/BrandManiaUpdate/app/src/main/res/drawable/digital_round_corner_one.xml\" value=\"0.20416666666666666\" />\r\n        <entry key=\"..\\:/_ANDROID_PROJECTS/BrandManiaUpdate/app/src/main/res/drawable/digital_round_corner_two.xml\" value=\"0.20416666666666666\" />\r\n        <entry key=\"..\\:/_ANDROID_PROJECTS/BrandManiaUpdate/app/src/main/res/drawable/ic_outline_call_24.xml\" value=\"0.20416666666666666\" />\r\n        <entry key=\"..\\:/_ANDROID_PROJECTS/BrandManiaUpdate/app/src/main/res/drawable/ic_userrr.xml\" value=\"0.20416666666666666\" />\r\n        <entry key=\"..\\:/_ANDROID_PROJECTS/BrandManiaUpdate/app/src/main/res/drawable/item_round_corner_two.xml\" value=\"0.20416666666666666\" />\r\n        <entry key=\"..\\:/_ANDROID_PROJECTS/BrandManiaUpdate/app/src/main/res/layout/activity_pdf.xml\" value=\"0.33\" />\r\n        <entry key=\"..\\:/_ANDROID_PROJECTS/BrandManiaUpdate/app/src/main/res/layout/activity_view_all_image.xml\" value=\"0.18802083333333333\" />\r\n        <entry key=\"..\\:/_ANDROID_PROJECTS/BrandManiaUpdate/app/src/main/res/layout/dialog_digital_card_layout.xml\" value=\"0.18802083333333333\" />\r\n        <entry key=\"..\\:/_ANDROID_PROJECTS/BrandManiaUpdate/app/src/main/res/layout/fragment_colors_picker.xml\" value=\"0.18802083333333333\" />\r\n        <entry key=\"..\\:/_ANDROID_PROJECTS/BrandManiaUpdate/app/src/main/res/layout/fragment_home.xml\" value=\"0.18802083333333333\" />\r\n        <entry key=\"..\\:/_ANDROID_PROJECTS/BrandManiaUpdate/app/src/main/res/layout/item_colors_for_card_layout.xml\" value=\"0.67\" />\r\n        <entry key=\"..\\:/_ANDROID_PROJECTS/BrandManiaUpdate/app/src/main/res/layout/item_digital_card_five.xml\" value=\"0.67\" />\r\n        <entry key=\"..\\:/_ANDROID_PROJECTS/BrandManiaUpdate/app/src/main/res/layout/item_digital_card_four.xml\" value=\"0.75\" />\r\n        <entry key=\"..\\:/_ANDROID_PROJECTS/BrandManiaUpdate/app/src/main/res/layout/item_digital_card_one.xml\" value=\"0.5\" />\r\n        <entry key=\"..\\:/_ANDROID_PROJECTS/BrandManiaUpdate/app/src/main/res/layout/item_digital_card_three.xml\" value=\"0.5\" />\r\n        <entry key=\"..\\:/_ANDROID_PROJECTS/BrandManiaUpdate/app/src/main/res/layout/item_digital_card_two.xml\" value=\"0.75\" />\r\n        <entry key=\"..\\:/_ANDROID_PROJECTS/BrandManiaUpdate/app/src/main/res/layout/layout_digital_card_fifth.xml\" value=\"0.37604166666666666\" />\r\n        <entry key=\"..\\:/_ANDROID_PROJECTS/BrandManiaUpdate/app/src/main/res/layout/layout_digital_card_fourth.xml\" value=\"0.2807153965785381\" />\r\n        <entry key=\"..\\:/_ANDROID_PROJECTS/BrandManiaUpdate/app/src/main/res/layout/layout_digital_card_one.xml\" value=\"0.37604166666666666\" />\r\n        <entry key=\"..\\:/_ANDROID_PROJECTS/BrandManiaUpdate/app/src/main/res/layout/layout_digital_card_three.xml\" value=\"0.5\" />\r\n        <entry key=\"..\\:/_ANDROID_PROJECTS/BrandManiaUpdate/app/src/main/res/layout/layout_digital_card_two.xml\" value=\"0.37604166666666666\" />\r\n        <entry key=\"..\\:/_ANDROID_PROJECTS/BrandManiaUpdate/app/src/main/res/layout/layout_footer_nineteen.xml\" value=\"0.18802083333333333\" />\r\n        <entry key=\"..\\:/_ANDROID_PROJECTS/BrandManiaUpdate/app/src/main/res/layout/layout_footer_twenty.xml\" value=\"0.13541666666666666\" />\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"ProjectRootManager\" version=\"2\" languageLevel=\"JDK_11\" default=\"true\" project-jdk-name=\"1.8\" project-jdk-type=\"JavaSDK\">\r\n    <output url=\"file://$PROJECT_DIR$/build/classes\" />\r\n  </component>\r\n  <component name=\"ProjectType\">\r\n    <option name=\"id\" value=\"Android\" />\r\n  </component>\r\n</project>
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/.idea/misc.xml b/.idea/misc.xml
---- a/.idea/misc.xml	(revision 68d0d6b19ee12446d7598e43b06da3b8019269d0)
-+++ b/.idea/misc.xml	(date 1637841188125)
-@@ -34,10 +34,11 @@
-         <entry key="..\:/_ANDROID_PROJECTS/BrandManiaUpdate/app/src/main/res/layout/layout_digital_card_two.xml" value="0.37604166666666666" />
-         <entry key="..\:/_ANDROID_PROJECTS/BrandManiaUpdate/app/src/main/res/layout/layout_footer_nineteen.xml" value="0.18802083333333333" />
-         <entry key="..\:/_ANDROID_PROJECTS/BrandManiaUpdate/app/src/main/res/layout/layout_footer_twenty.xml" value="0.13541666666666666" />
-+        <entry key="..\:/__ANDROID_PROJECTS/GithubProjects/BrandMania/app/src/main/res/layout/fragment_colors_picker.xml" value="0.21217105263157895" />
-       </map>
-     </option>
-   </component>
--  <component name="ProjectRootManager" version="2" languageLevel="JDK_11" default="true" project-jdk-name="1.8" project-jdk-type="JavaSDK">
-+  <component name="ProjectRootManager" version="2" languageLevel="JDK_11" project-jdk-name="1.8" project-jdk-type="JavaSDK">
-     <output url="file://$PROJECT_DIR$/build/classes" />
-   </component>
-   <component name="ProjectType">
-Index: app/src/main/res/layout/fragment_colors_picker.xml
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<layout xmlns:app=\"http://schemas.android.com/apk/res-auto\">\r\n\r\n    <LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n        xmlns:tools=\"http://schemas.android.com/tools\"\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"match_parent\"\r\n        android:orientation=\"vertical\"\r\n        android:paddingStart=\"@dimen/_20sdp\"\r\n        android:paddingTop=\"@dimen/_15sdp\"\r\n        android:paddingEnd=\"@dimen/_20sdp\"\r\n        app:behavior_hideable=\"true\">\r\n\r\n        <RelativeLayout\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:gravity=\"center_vertical\">\r\n\r\n            <TextView\r\n                android:id=\"@+id/titleText\"\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:fontFamily=\"@font/poppins_medium\"\r\n                android:text=\"Title\"\r\n                android:textColor=\"@color/alltextcolor\"\r\n                android:textSize=\"@dimen/_12sdp\" />\r\n\r\n            <ImageView\r\n                android:id=\"@+id/cancelAction\"\r\n                android:layout_width=\"@dimen/_20sdp\"\r\n                android:layout_height=\"@dimen/_20sdp\"\r\n                android:layout_alignParentEnd=\"true\"\r\n                android:src=\"@drawable/ic_baseline_close_24\"\r\n                app:tint=\"@color/colorPrimary\" />\r\n\r\n        </RelativeLayout>\r\n\r\n        <EditText\r\n            android:id=\"@+id/codeEdt\"\r\n            android:layout_width=\"wrap_content\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:fontFamily=\"@font/montserrat_regular\"\r\n            android:hint=\"Hex Code\"\r\n            android:imeOptions=\"actionDone\"\r\n            android:inputType=\"text\"\r\n            android:maxLength=\"7\"\r\n            android:maxLines=\"1\"\r\n            android:textSize=\"@dimen/_10sdp\" />\r\n\r\n        <com.jaredrummler.android.colorpicker.ColorPickerView\r\n            android:id=\"@+id/colorPickerView\"\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:layout_marginTop=\"@dimen/_5sdp\" />\r\n\r\n    </LinearLayout>\r\n</layout>
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/res/layout/fragment_colors_picker.xml b/app/src/main/res/layout/fragment_colors_picker.xml
---- a/app/src/main/res/layout/fragment_colors_picker.xml	(revision 68d0d6b19ee12446d7598e43b06da3b8019269d0)
-+++ b/app/src/main/res/layout/fragment_colors_picker.xml	(date 1637840526600)
-@@ -50,7 +50,8 @@
-         <com.jaredrummler.android.colorpicker.ColorPickerView
-             android:id="@+id/colorPickerView"
-             android:layout_width="match_parent"
--            android:layout_height="wrap_content"
-+            android:layout_height="@dimen/_150sdp"
-+            android:layout_marginBottom="@dimen/_10sdp"
-             android:layout_marginTop="@dimen/_5sdp" />
- 
-     </LinearLayout>
-Index: app/src/main/java/com/app/brandmania/Fragment/bottom/ColorPickerFragment.java
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package com.app.brandmania.Fragment.bottom;\r\n\r\nimport android.app.Activity;\r\nimport android.app.Dialog;\r\nimport android.graphics.Color;\r\nimport android.os.Build;\r\nimport android.os.Bundle;\r\nimport android.text.Editable;\r\nimport android.text.TextWatcher;\r\nimport android.util.DisplayMetrics;\r\nimport android.view.KeyEvent;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.view.WindowManager;\r\nimport android.view.inputmethod.EditorInfo;\r\nimport android.widget.FrameLayout;\r\nimport android.widget.TextView;\r\nimport android.widget.Toast;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.databinding.DataBindingUtil;\r\nimport androidx.fragment.app.DialogFragment;\r\n\r\nimport com.app.brandmania.R;\r\nimport com.app.brandmania.databinding.FragmentColorsPickerBinding;\r\nimport com.app.brandmania.utils.CodeReUse;\r\nimport com.google.android.material.bottomsheet.BottomSheetBehavior;\r\nimport com.google.android.material.bottomsheet.BottomSheetDialog;\r\nimport com.google.android.material.bottomsheet.BottomSheetDialogFragment;\r\nimport com.jaredrummler.android.colorpicker.ColorPickerView;\r\n\r\nimport java.util.regex.Matcher;\r\nimport java.util.regex.Pattern;\r\n\r\npublic class ColorPickerFragment extends BottomSheetDialogFragment implements ColorPickerView.OnColorChangedListener {\r\n    private Activity act;\r\n    private View view;\r\n    private FragmentColorsPickerBinding binding;\r\n    private ColorPickerFragment fragment;\r\n    private OnColorChoose onColorChoose;\r\n\r\n    public OnColorChoose getOnColorChoose() {\r\n        return onColorChoose;\r\n    }\r\n\r\n    public void setOnColorChoose(OnColorChoose onColorChoose) {\r\n        this.onColorChoose = onColorChoose;\r\n    }\r\n\r\n    public interface OnColorChoose {\r\n        void onColorSelected(int color);\r\n    }\r\n\r\n    public ColorPickerFragment() {\r\n\r\n    }\r\n\r\n\r\n    @Override\r\n    public void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n\r\n\r\n    }\r\n\r\n//    @NonNull\r\n//    @Override\r\n//    public Dialog onCreateDialog(Bundle savedInstanceState) {\r\n//        Dialog dialog = super.onCreateDialog(savedInstanceState);\r\n//        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O_MR1) {\r\n//            CodeReUse.setWhiteNavigationBar(dialog, getActivity());\r\n//        }\r\n//        return dialog;\r\n//    }\r\n\r\n    @NonNull\r\n    @Override\r\n    public Dialog onCreateDialog(Bundle savedInstanceState) {\r\n        Dialog dialog = super.onCreateDialog(savedInstanceState);\r\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O_MR1) {\r\n            CodeReUse.setWhiteNavigationBar(dialog, getActivity());\r\n        }\r\n        this.setStyle(DialogFragment.STYLE_NORMAL, R.style.BottomSheetDialogThemeNoFloating);\r\n        dialog.setOnShowListener(dialogInterface -> {\r\n            BottomSheetDialog bottomSheetDialog = (BottomSheetDialog) dialogInterface;\r\n            setupFullHeight(bottomSheetDialog);\r\n        });\r\n        return dialog;\r\n    }\r\n\r\n\r\n    private void setupFullHeight(BottomSheetDialog bottomSheetDialog) {\r\n        FrameLayout bottomSheet = bottomSheetDialog.findViewById(R.id.design_bottom_sheet);\r\n        assert bottomSheet != null;\r\n        BottomSheetBehavior behavior = BottomSheetBehavior.from(bottomSheet);\r\n        ViewGroup.LayoutParams layoutParams = bottomSheet.getLayoutParams();\r\n\r\n        int windowHeight = getWindowHeight() / 3;\r\n        if (layoutParams != null) {\r\n            layoutParams.height = windowHeight;\r\n        }\r\n        bottomSheet.setLayoutParams(layoutParams);\r\n        behavior.setState(BottomSheetBehavior.STATE_EXPANDED);\r\n    }\r\n\r\n    private int getWindowHeight() {\r\n        DisplayMetrics displayMetrics = new DisplayMetrics();\r\n        ((Activity) getContext()).getWindowManager().getDefaultDisplay().getMetrics(displayMetrics);\r\n        return displayMetrics.heightPixels;\r\n    }\r\n\r\n    @Override\r\n    public View onCreateView(@NonNull LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\r\n\r\n        binding = DataBindingUtil.inflate(inflater, R.layout.fragment_colors_picker, container, false);\r\n        view = binding.getRoot();\r\n        act = getActivity();\r\n        fragment = this;\r\n        getDialog().getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_ADJUST_NOTHING);\r\n        binding.titleText.setText(\"Pick Your Color\");\r\n        binding.cancelAction.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                if (!act.isDestroyed() && !act.isFinishing())\r\n                    fragment.dismiss();\r\n            }\r\n        });\r\n        binding.colorPickerView.setOnColorChangedListener(this);\r\n        binding.codeEdt.setOnEditorActionListener(new TextView.OnEditorActionListener() {\r\n            @Override\r\n            public boolean onEditorAction(TextView v, int actionId, KeyEvent event) {\r\n                if (actionId == EditorInfo.IME_ACTION_DONE) {\r\n                    if (isValidHexaCode(binding.codeEdt.getText().toString())) {\r\n                        try {\r\n                            int color = Color.parseColor(binding.codeEdt.getText().toString());\r\n                            binding.colorPickerView.setColor(color);\r\n                            binding.codeEdt.setText(String.valueOf(color));\r\n                        } catch (IllegalArgumentException iae) {\r\n                            Toast.makeText(act, \"Enter valid color code\", Toast.LENGTH_SHORT).show();\r\n                        }\r\n\r\n                    }\r\n                }\r\n                return false;\r\n            }\r\n        });\r\n        binding.codeEdt.addTextChangedListener(new TextWatcher() {\r\n            @Override\r\n            public void beforeTextChanged(CharSequence s, int start, int count, int after) {\r\n\r\n            }\r\n\r\n            @Override\r\n            public void onTextChanged(CharSequence s, int start, int before, int count) {\r\n            }\r\n\r\n            @Override\r\n            public void afterTextChanged(Editable s) {\r\n\r\n            }\r\n        });\r\n        return view;\r\n    }\r\n\r\n    // Function to validate hexadecimal color code .\r\n    public static boolean isValidHexaCode(String str) {\r\n        String regex = \"^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$\";\r\n        Pattern p = Pattern.compile(regex);\r\n\r\n        if (str == null) {\r\n            return false;\r\n        }\r\n\r\n        Matcher m = p.matcher(str);\r\n        return m.matches();\r\n    }\r\n\r\n\r\n    @Override\r\n    public void onColorChanged(int newColor) {\r\n        (onColorChoose).onColorSelected(newColor);\r\n        binding.codeEdt.setText(String.valueOf(newColor));\r\n    }\r\n}\r\n
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/java/com/app/brandmania/Fragment/bottom/ColorPickerFragment.java b/app/src/main/java/com/app/brandmania/Fragment/bottom/ColorPickerFragment.java
---- a/app/src/main/java/com/app/brandmania/Fragment/bottom/ColorPickerFragment.java	(revision 68d0d6b19ee12446d7598e43b06da3b8019269d0)
-+++ b/app/src/main/java/com/app/brandmania/Fragment/bottom/ColorPickerFragment.java	(date 1637840486657)
-@@ -8,6 +8,7 @@
- import android.text.Editable;
- import android.text.TextWatcher;
- import android.util.DisplayMetrics;
-+import android.util.Log;
- import android.view.KeyEvent;
- import android.view.LayoutInflater;
- import android.view.View;
-@@ -74,18 +75,12 @@
- //        return dialog;
- //    }
- 
--    @NonNull
-     @Override
-     public Dialog onCreateDialog(Bundle savedInstanceState) {
-         Dialog dialog = super.onCreateDialog(savedInstanceState);
-         if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O_MR1) {
-             CodeReUse.setWhiteNavigationBar(dialog, getActivity());
-         }
--        this.setStyle(DialogFragment.STYLE_NORMAL, R.style.BottomSheetDialogThemeNoFloating);
--        dialog.setOnShowListener(dialogInterface -> {
--            BottomSheetDialog bottomSheetDialog = (BottomSheetDialog) dialogInterface;
--            setupFullHeight(bottomSheetDialog);
--        });
-         return dialog;
-     }
- 
-@@ -117,7 +112,7 @@
-         view = binding.getRoot();
-         act = getActivity();
-         fragment = this;
--        getDialog().getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_ADJUST_NOTHING);
-+        //getDialog().getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_ADJUST_NOTHING);
-         binding.titleText.setText("Pick Your Color");
-         binding.cancelAction.setOnClickListener(new View.OnClickListener() {
-             @Override
-@@ -135,7 +130,6 @@
-                         try {
-                             int color = Color.parseColor(binding.codeEdt.getText().toString());
-                             binding.colorPickerView.setColor(color);
--                            binding.codeEdt.setText(String.valueOf(color));
-                         } catch (IllegalArgumentException iae) {
-                             Toast.makeText(act, "Enter valid color code", Toast.LENGTH_SHORT).show();
-                         }
-@@ -180,6 +174,9 @@
-     @Override
-     public void onColorChanged(int newColor) {
-         (onColorChoose).onColorSelected(newColor);
--        binding.codeEdt.setText(String.valueOf(newColor));
-+
-+        String hexColor = String.format("#%06X", (0xFFFFFF & newColor));
-+        if (!hexColor.isEmpty())
-+            binding.codeEdt.setText(String.valueOf(hexColor));
-     }
- }
Index: .idea/shelf/Uncommitted_changes_before_Update_at_11_26_2021_5_36_PM__Default_Changelist_.xml
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_11_26_2021_5_36_PM__Default_Changelist_.xml b/.idea/shelf/Uncommitted_changes_before_Update_at_11_26_2021_5_36_PM__Default_Changelist_.xml
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Update_at_11_26_2021_5_36_PM__Default_Changelist_.xml	(revision 9f316353b6784bffd0bc962d6abb94b9d35bb532)
+++ /dev/null	(revision 9f316353b6784bffd0bc962d6abb94b9d35bb532)
@@ -1,4 +0,0 @@
-<changelist name="Uncommitted_changes_before_Update_at_11_26_2021_5_36_PM_[Default_Changelist]" date="1637928392012" recycled="true" deleted="true">
-  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_11_26_2021_5_36_PM_[Default_Changelist]/shelved.patch" />
-  <option name="DESCRIPTION" value="Uncommitted changes before Update at 11/26/2021 5:36 PM [Default Changelist]" />
-</changelist>
\ No newline at end of file
Index: app/src/main/java/com/app/brandmania/Activity/brand/UpdateBandList.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.app.brandmania.Activity.brand;\r\n\r\nimport android.Manifest;\r\nimport android.app.Activity;\r\nimport android.app.AlertDialog;\r\nimport android.content.DialogInterface;\r\nimport android.content.Intent;\r\nimport android.content.res.ColorStateList;\r\nimport android.graphics.Bitmap;\r\nimport android.graphics.drawable.BitmapDrawable;\r\nimport android.net.Uri;\r\nimport android.os.Build;\r\nimport android.os.Bundle;\r\nimport android.util.Log;\r\nimport android.view.View;\r\nimport android.view.WindowManager;\r\nimport android.widget.ImageView;\r\n\r\nimport androidx.annotation.RequiresApi;\r\nimport androidx.core.app.ActivityCompat;\r\nimport androidx.databinding.DataBindingUtil;\r\n\r\nimport com.android.volley.AuthFailureError;\r\nimport com.android.volley.Request;\r\nimport com.android.volley.RequestQueue;\r\nimport com.android.volley.Response;\r\nimport com.android.volley.VolleyError;\r\nimport com.android.volley.toolbox.StringRequest;\r\nimport com.android.volley.toolbox.Volley;\r\nimport com.androidnetworking.AndroidNetworking;\r\nimport com.androidnetworking.common.ANRequest;\r\nimport com.androidnetworking.common.Priority;\r\nimport com.androidnetworking.error.ANError;\r\nimport com.androidnetworking.interfaces.JSONObjectRequestListener;\r\nimport com.androidnetworking.interfaces.UploadProgressListener;\r\nimport com.app.brandmania.Common.Constant;\r\nimport com.app.brandmania.Common.MakeMyBrandApp;\r\nimport com.app.brandmania.Common.ObserverActionID;\r\nimport com.app.brandmania.Common.PreafManager;\r\nimport com.app.brandmania.Common.ResponseHandler;\r\nimport com.app.brandmania.Connection.BaseActivity;\r\nimport com.app.brandmania.Fragment.bottom.CountrySelectionFragment;\r\nimport com.app.brandmania.Fragment.bottom.ListBottomFragment;\r\nimport com.app.brandmania.Fragment.bottom.PickerFragment;\r\nimport com.app.brandmania.Interface.ItemSelectionInterface;\r\nimport com.app.brandmania.Interface.alertListenerCallback;\r\nimport com.app.brandmania.Model.BrandListItem;\r\nimport com.app.brandmania.Model.CommonListModel;\r\nimport com.app.brandmania.R;\r\nimport com.app.brandmania.databinding.ActivityUpdateBandListBinding;\r\nimport com.app.brandmania.utils.APIs;\r\nimport com.app.brandmania.utils.CodeReUse;\r\nimport com.app.brandmania.utils.Utility;\r\nimport com.bumptech.glide.Glide;\r\nimport com.google.gson.Gson;\r\nimport com.theartofdev.edmodo.cropper.CropImage;\r\nimport com.theartofdev.edmodo.cropper.CropImageView;\r\n\r\nimport org.json.JSONArray;\r\nimport org.json.JSONException;\r\nimport org.json.JSONObject;\r\n\r\nimport java.io.File;\r\nimport java.util.ArrayList;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\n\r\npublic class UpdateBandList extends BaseActivity implements ItemSelectionInterface, alertListenerCallback {\r\n    PreafManager prefManager;\r\n    Gson gson;\r\n    public static int BRAND_CATEGORY = 0;\r\n    public static int COUNTRY = 1;\r\n    public static int STATE = 2;\r\n    public static int CITY = 3;\r\n    private String BrandTitle;\r\n    private String cityTitle = \"Choose City\";\r\n    private String countryTitle = \"Choose Country\";\r\n    private String stateTtitle = \"Choose State\";\r\n\r\n    private int showingView = -1;\r\n    private boolean isEditModeEnable = false;\r\n    private BrandListItem listModel;\r\n    private BrandListItem data;\r\n    private boolean isLoading = false;\r\n    private ActivityUpdateBandListBinding binding;\r\n    private Activity act;\r\n    ArrayList<CommonListModel> BRANDTypeList = new ArrayList<>();\r\n    private ListBottomFragment bottomSheetFragment;\r\n    CommonListModel commonListModel;\r\n\r\n    private AlertDialog.Builder alertDialogBuilder;\r\n    private Uri mCropImageUri;\r\n    private Bitmap selectedLogo;\r\n\r\n\r\n    //private ArrayList<CommonListModel> countryList = new ArrayList<>();\r\n    private ArrayList<CommonListModel> stateList = new ArrayList<>();\r\n    private ArrayList<CommonListModel> cityList = new ArrayList<>();\r\n\r\n    private boolean wantToShowDropDown = false;\r\n\r\n    @Override\r\n    public void onCreate(Bundle savedInstanceState) {\r\n        setTheme(R.style.AppTheme_material_theme);\r\n        super.onCreate(savedInstanceState);\r\n        act = this;\r\n        binding = DataBindingUtil.setContentView(act, R.layout.activity_update_band_list);\r\n        prefManager = new PreafManager(this);\r\n        gson = new Gson();\r\n        CodeReUse.RemoveError(binding.categoryEdt, binding.categoryEdtLayout);\r\n        CodeReUse.RemoveError(binding.nameTxt, binding.nameTxtLayout);\r\n        CodeReUse.RemoveError(binding.phoneTxt, binding.phoneTxtLayout);\r\n        CodeReUse.RemoveError(binding.addressEdt, binding.addressEdtLayout);\r\n        CodeReUse.RemoveError(binding.websiteEdt, binding.websiteEdtLayout);\r\n        CodeReUse.RemoveError(binding.emailIdEdt, binding.emailIdEdtLayout);\r\n        CodeReUse.RemoveError(binding.businessServiceEdt, binding.businessFacilityEdtLayout);\r\n\r\n        CodeReUse.RemoveError(binding.countryEdt, binding.countryLayout);\r\n        CodeReUse.RemoveError(binding.stateEdt, binding.stateLayout);\r\n        CodeReUse.RemoveError(binding.cityEdt, binding.cityLayout);\r\n\r\n        alertDialogBuilder = new AlertDialog.Builder(act);\r\n        binding.viewImgFirst.setTag(\"0\");\r\n\r\n        getBrandCategory(BRAND_CATEGORY);\r\n        binding.categoryEdt.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n\r\n                showFragmentList(BRAND_CATEGORY, BrandTitle, BRANDTypeList);\r\n            }\r\n        });\r\n\r\n\r\n        binding.stateLayout.setVisibility(View.VISIBLE);\r\n        binding.countryLayout.setVisibility(View.GONE);\r\n//\r\n//        binding.countryEdt.setOnClickListener(new View.OnClickListener() {\r\n//            @Override\r\n//            public void onClick(View v) {\r\n//                if (countryList != null)\r\n//                    chooseFragment(COUNTRY, countryTitle, countryList, binding.countryEdt.getText().toString());\r\n//            }\r\n//        });\r\n        getCountryStateCity(CALL_STATE);\r\n        binding.stateEdt.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                if (stateList != null)\r\n                    chooseFragment(STATE, stateTtitle, stateList, binding.stateEdt.getText().toString());\r\n            }\r\n        });\r\n        binding.cityEdt.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                if (binding.stateEdt.getText().toString().length() != 0) {\r\n                    if (cityList != null && cityList.size() != 0)\r\n                        chooseFragment(CITY, cityTitle, cityList, binding.cityEdt.getText().toString());\r\n                    else {\r\n                        wantToShowDropDown = true;\r\n                        getCountryStateCity(CALL_CITY);\r\n                    }\r\n                } else {\r\n                    wantToShowDropDown = true;\r\n                    getCountryStateCity(CALL_CITY);\r\n                }\r\n            }\r\n        });\r\n\r\n\r\n        binding.addExpenceBtn.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                Validation();\r\n            }\r\n        });\r\n        listModel = gson.fromJson(getIntent().getStringExtra(\"detailsObj\"), BrandListItem.class);\r\n        data = gson.fromJson(getIntent().getStringExtra(\"data\"), BrandListItem.class);\r\n\r\n        if (listModel != null) {\r\n            binding.catIdEdt.setText(listModel.getId());\r\n            binding.IdEdt.setText(listModel.getId());\r\n            binding.categoryEdt.setText(listModel.getCategoryName());\r\n            binding.nameTxt.setText(listModel.getName());\r\n            binding.phoneTxt.setText(listModel.getPhonenumber());\r\n            binding.addressEdt.setText(listModel.getOriginalAddress());\r\n            binding.websiteEdt.setText(listModel.getWebsite());\r\n            binding.emailIdEdt.setText(listModel.getEmail());\r\n\r\n            binding.businessServiceEdt.setText(listModel.getBrandService());\r\n\r\n            if (listModel.getPincode() != null && !listModel.getPincode().isEmpty()) {\r\n                binding.pincodeEdt.setText(listModel.getPincode());\r\n            }\r\n//            if (listModel.getCountry() != null && !listModel.getCountry().isEmpty()) {\r\n//                binding.countryLayout.setVisibility(View.VISIBLE);\r\n//                binding.countryEdt.setText(listModel.getCountry());\r\n//\r\n//                CommonListModel data = new CommonListModel();\r\n//                data.setLayoutType(CommonListModel.LAYOUT_BLOCK);\r\n//                data.setId(\"-1\");\r\n//                data.setName(listModel.getCountry());\r\n//                selectedCountry = data;\r\n//            }\r\n\r\n            if (listModel.getState() != null && !listModel.getState().isEmpty()) {\r\n                binding.stateLayout.setVisibility(View.VISIBLE);\r\n                binding.stateEdt.setText(listModel.getState());\r\n\r\n                CommonListModel data = new CommonListModel();\r\n                data.setLayoutType(CommonListModel.LAYOUT_BLOCK);\r\n                data.setId(\"-1\");\r\n                data.setName(listModel.getState());\r\n                selectedState = data;\r\n\r\n            }\r\n\r\n            if (listModel.getCity() != null && !listModel.getCity().isEmpty()) {\r\n                binding.cityLayout.setVisibility(View.VISIBLE);\r\n                binding.cityEdt.setText(listModel.getCity());\r\n\r\n                CommonListModel data = new CommonListModel();\r\n                data.setLayoutType(CommonListModel.LAYOUT_BLOCK);\r\n                data.setId(\"-1\");\r\n                data.setName(listModel.getCity());\r\n                selectedCity = data;\r\n            }\r\n\r\n\r\n            binding.BackButtonMember.setOnClickListener(new View.OnClickListener() {\r\n                @Override\r\n                public void onClick(View v) {\r\n                    onBackPressed();\r\n                }\r\n\r\n            });\r\n            Glide.with(act).load(listModel.getLogo()).placeholder(R.drawable.placeholder).into((binding.viewImgFirst));\r\n            Glide.with(act).load(listModel.getFrame()).placeholder(R.drawable.placeholder).into((binding.selectframe1));\r\n\r\n            binding.viewImgFirst.setOnClickListener(new View.OnClickListener() {\r\n                @Override\r\n                public void onClick(View v) {\r\n\r\n                    if ((listModel.getNo_of_used_image().isEmpty() || listModel.getLogo().isEmpty()) || listModel.getNo_of_used_image().equalsIgnoreCase(\"0\")) {\r\n                        if (!isEditModeEnable) {\r\n                            if (binding.viewImgFirst.getTag().toString().equalsIgnoreCase(\"1\"))\r\n                                pickerView(Constant.PICKER_FIRST, true, selectedLogo);\r\n                            else\r\n                                pickerView(Constant.PICKER_FIRST, false, null);\r\n                        }\r\n                    } else {\r\n                        new AlertDialog.Builder(act)\r\n                                .setMessage(\"once you download or share image. You can't change your logo.\\nIf you want to change logo please contact to admin.\")\r\n                                .setCancelable(true)\r\n                                .setPositiveButton(\"OK\", new DialogInterface.OnClickListener() {\r\n                                    @Override\r\n                                    public void onClick(DialogInterface dialogInterface, int i) {\r\n                                        dialogInterface.dismiss();\r\n                                        ((alertListenerCallback) act).alertListenerClick();\r\n                                    }\r\n                                })\r\n                                .show();\r\n                    }\r\n                }\r\n            });\r\n        } else {\r\n            binding.catIdEdt.setText(prefManager.getActiveBrand().getCategoryName());\r\n            binding.IdEdt.setText(prefManager.getActiveBrand().getId());\r\n            binding.categoryEdt.setText(prefManager.getActiveBrand().getCategoryName());\r\n            binding.nameTxt.setText(prefManager.getActiveBrand().getName());\r\n            binding.phoneTxt.setText(prefManager.getActiveBrand().getPhonenumber());\r\n            binding.addressEdt.setText(prefManager.getActiveBrand().getOriginalAddress());\r\n            binding.websiteEdt.setText(prefManager.getActiveBrand().getWebsite());\r\n            binding.emailIdEdt.setText(prefManager.getActiveBrand().getEmail());\r\n            binding.businessServiceEdt.setText(prefManager.getActiveBrand().getBrandService());\r\n\r\n\r\n            if (prefManager.getActiveBrand().getPincode() != null && !prefManager.getActiveBrand().getPincode().isEmpty()) {\r\n                binding.pincodeEdt.setText(prefManager.getActiveBrand().getPincode());\r\n            }\r\n//            if (prefManager.getActiveBrand().getCountry() != null && !prefManager.getActiveBrand().getCountry().isEmpty()) {\r\n//                binding.countryLayout.setVisibility(View.VISIBLE);\r\n//                binding.countryEdt.setText(prefManager.getActiveBrand().getCountry());\r\n//\r\n//\r\n//            }\r\n\r\n            if (prefManager.getActiveBrand().getState() != null && !prefManager.getActiveBrand().getState().isEmpty()) {\r\n                binding.stateLayout.setVisibility(View.VISIBLE);\r\n                binding.stateEdt.setText(prefManager.getActiveBrand().getState());\r\n            }\r\n\r\n            if (prefManager.getActiveBrand().getCity() != null && !prefManager.getActiveBrand().getCity().isEmpty()) {\r\n                binding.cityLayout.setVisibility(View.VISIBLE);\r\n                binding.cityEdt.setText(prefManager.getActiveBrand().getCity());\r\n            }\r\n\r\n\r\n            Glide.with(act).load(prefManager.getActiveBrand().getLogo()).placeholder(R.drawable.placeholder).into((binding.viewImgFirst));\r\n            //  Glide.with(act).load(listModel.getFrame()).placeholder(R.drawable.placeholder).into((binding.selectframe1));\r\n\r\n\r\n            binding.viewImgFirst.setOnClickListener(new View.OnClickListener() {\r\n                @Override\r\n                public void onClick(View v) {\r\n\r\n                    if ((prefManager.getActiveBrand().getNo_of_used_image().isEmpty() || prefManager.getActiveBrand().getLogo().isEmpty()) || prefManager.getActiveBrand().getNo_of_used_image().equalsIgnoreCase(\"0\")) {\r\n                        if (!isEditModeEnable) {\r\n                            if (binding.viewImgFirst.getTag().toString().equalsIgnoreCase(\"1\"))\r\n                                pickerView(Constant.PICKER_FIRST, true, selectedLogo);\r\n                            else\r\n                                pickerView(Constant.PICKER_FIRST, false, null);\r\n                        }\r\n                    } else {\r\n                        new AlertDialog.Builder(act)\r\n                                .setMessage(\"once you download or share image. You can't change your logo.\\nIf you want to change logo please contact to admin.\")\r\n                                .setCancelable(true)\r\n                                .setPositiveButton(\"OK\", new DialogInterface.OnClickListener() {\r\n                                    @Override\r\n                                    public void onClick(DialogInterface dialogInterface, int i) {\r\n                                        dialogInterface.dismiss();\r\n                                        ((alertListenerCallback) act).alertListenerClick();\r\n                                    }\r\n                                })\r\n                                .show();\r\n                    }\r\n                }\r\n            });\r\n        }\r\n\r\n\r\n        binding.BackButtonMember.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                onBackPressed();\r\n            }\r\n\r\n        });\r\n\r\n    }\r\n\r\n\r\n    private void startCropImageActivity(Uri imageUri) {\r\n        CropImage.activity(imageUri)\r\n                .setGuidelines(CropImageView.Guidelines.ON)\r\n                .setMultiTouchEnabled(true)\r\n                .setOutputCompressFormat(Bitmap.CompressFormat.PNG)\r\n                .start(this);\r\n\r\n    }\r\n\r\n    @RequiresApi(api = Build.VERSION_CODES.M)\r\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\r\n\r\n        // handle result of pick image chooser\r\n        super.onActivityResult(requestCode, resultCode, data);\r\n        if (requestCode == CropImage.PICK_IMAGE_CHOOSER_REQUEST_CODE && resultCode == Activity.RESULT_OK) {\r\n            Uri imageUri = CropImage.getPickImageResultUri(this, data);\r\n\r\n            if (CropImage.isReadExternalStoragePermissionsRequired(this, imageUri)) {\r\n                mCropImageUri = imageUri;\r\n                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\r\n                    requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, 0);\r\n                }\r\n            } else {\r\n                startCropImageActivity(imageUri);\r\n            }\r\n        }\r\n\r\n        // handle result of CropImageActivity\r\n        if (requestCode == CropImage.CROP_IMAGE_ACTIVITY_REQUEST_CODE) {\r\n            CropImage.ActivityResult result = CropImage.getActivityResult(data);\r\n            if (resultCode == RESULT_OK) {\r\n                binding.viewImgFirst.setVisibility(View.VISIBLE);\r\n                binding.imgEmptyStateFirst.setVisibility(View.GONE);\r\n                binding.actionDeleteFirst.setVisibility(View.VISIBLE);\r\n                ((ImageView) findViewById(R.id.viewImgFirst)).setImageURI(result.getUri());\r\n                ImageView imageView = ((ImageView) findViewById(R.id.viewImgFirst));\r\n                selectedLogo = ((BitmapDrawable) imageView.getDrawable()).getBitmap();\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n    private void getBrandCategory(int flag) {\r\n        String apiUrl = \"\";\r\n        int requestedMethod = 0;\r\n\r\n        if (flag == BRAND_CATEGORY) {\r\n            apiUrl = APIs.GET_BRAND_CATEGORY;\r\n            requestedMethod = Request.Method.POST;\r\n        }\r\n\r\n        Utility.Log(\"API : \", apiUrl);\r\n\r\n        StringRequest request = new StringRequest(requestedMethod, apiUrl, new Response.Listener<String>() {\r\n            @Override\r\n            public void onResponse(String response) {\r\n                Utility.Log(flag + \"- Response : \", response);\r\n                try {\r\n                    if (ResponseHandler.isSuccess(response, null)) {\r\n                        JSONObject responseJson = ResponseHandler.createJsonObject(response);\r\n                        JSONArray jsonArray = ResponseHandler.getJSONArray(responseJson, \"data\");\r\n                        Log.e(\"jsonArray-\", jsonArray.toString());\r\n                        for (int i = 0; i < jsonArray.length(); i++) {\r\n                            JSONObject itemObj = jsonArray.getJSONObject(i);\r\n                            CommonListModel listModel = new CommonListModel();\r\n                            listModel.setLayoutType(CommonListModel.LAYOUT_BLOCK);\r\n                            listModel.setId(ResponseHandler.getString(itemObj, \"id\"));\r\n                            listModel.setName(ResponseHandler.getString(itemObj, \"biz_cat_name\"));\r\n                            BRANDTypeList.add(listModel);\r\n                        }\r\n                        Log.w(\"Size\", String.valueOf(BRANDTypeList.size()));\r\n                    }\r\n\r\n                } catch (JSONException e) {\r\n                    e.printStackTrace();\r\n                }\r\n                getCountryStateCity(CALL_STATE);\r\n            }\r\n        }, new Response.ErrorListener() {\r\n            @Override\r\n            public void onErrorResponse(VolleyError error) {\r\n                error.printStackTrace();\r\n                getCountryStateCity(CALL_STATE);\r\n            }\r\n        }) {\r\n\r\n            @Override\r\n            public Map<String, String> getHeaders() throws AuthFailureError {\r\n                Map<String, String> params = new HashMap<String, String>();\r\n                params.put(\"Accept\", \"application/x-www-form-urlencoded\");//application/json\r\n                params.put(\"Content-Type\", \"application/x-www-form-urlencoded\");\r\n                params.put(\"X-Authorization\", \"Bearer\" + prefManager.getUserToken());\r\n                Log.e(\"Token\", params.toString());\r\n                return params;\r\n            }\r\n\r\n\r\n            @Override\r\n            protected Map<String, String> getParams() throws AuthFailureError {\r\n                HashMap<String, String> map = new HashMap<>();\r\n\r\n\r\n                Utility.Log(\"Params : \", map.toString());\r\n                return map;\r\n            }\r\n        };\r\n        RequestQueue queue = Volley.newRequestQueue(this);\r\n        queue.add(request);\r\n\r\n    }\r\n\r\n    private void Validation() {\r\n        boolean isError = false;\r\n        boolean isFocus = false;\r\n\r\n        if (binding.categoryEdt.getText().toString().trim().length() == 0) {\r\n            isError = true;\r\n            isFocus = true;\r\n            binding.categoryEdtLayout.setError(getString(R.string.brandcategory_text));\r\n            binding.categoryEdtLayout.setErrorTextColor(ColorStateList.valueOf(getResources().getColor(R.color.colorPrimary)));\r\n            binding.categoryEdt.requestFocus();\r\n            binding.scrollView.scrollTo(0, binding.categoryEdt.getBottom());\r\n        }\r\n        if (binding.nameTxt.getText().toString().trim().length() == 0) {\r\n            isError = true;\r\n\r\n            binding.nameTxtLayout.setError(getString(R.string.brandname_text));\r\n            binding.nameTxtLayout.setErrorTextColor(ColorStateList.valueOf(getResources().getColor(R.color.colorPrimary)));\r\n            binding.nameTxt.requestFocus();\r\n            if (!isFocus) {\r\n                binding.nameTxt.requestFocus();\r\n                isFocus = true;\r\n                binding.scrollView.scrollTo(0, binding.nameTxt.getBottom());\r\n            }\r\n        }\r\n\r\n        if (!binding.phoneTxt.getText().toString().trim().equals(\"\")) {\r\n            if (binding.phoneTxt.getText().toString().trim().length() < 10) {\r\n                isError = true;\r\n                binding.phoneTxtLayout.setError(getString(R.string.validphoneno_txt));\r\n                binding.phoneTxtLayout.setErrorTextColor(ColorStateList.valueOf(getResources().getColor(R.color.colorPrimary)));\r\n                if (!isFocus) {\r\n                    binding.phoneTxt.requestFocus();\r\n                    isFocus = true;\r\n                    binding.scrollView.scrollTo(0, binding.phoneTxt.getBottom());\r\n                }\r\n                return;\r\n            }\r\n\r\n        } else {\r\n            if (binding.phoneTxt.getText().toString().trim().equals(\"\")) {\r\n                isError = true;\r\n                binding.phoneTxtLayout.setError(getString(R.string.entermobileno_text));\r\n                binding.phoneTxtLayout.setErrorTextColor(ColorStateList.valueOf(getResources().getColor(R.color.colorPrimary)));\r\n                if (!isFocus) {\r\n                    binding.emailIdEdt.requestFocus();\r\n                    isFocus = true;\r\n                    binding.scrollView.scrollTo(0, binding.emailIdEdt.getBottom());\r\n                }\r\n                return;\r\n            }\r\n\r\n        }\r\n\r\n        if (binding.stateEdt.getText().toString().trim().length() == 0) {\r\n            binding.stateLayout.setError(\"Please select state\");\r\n            binding.stateLayout.setErrorTextColor(ColorStateList.valueOf(getResources().getColor(R.color.colorPrimary)));\r\n            isError = true;\r\n            if (!isFocus) {\r\n                binding.stateEdt.requestFocus();\r\n                isFocus = true;\r\n                binding.scrollView.scrollTo(0, binding.stateEdt.getBottom());\r\n            }\r\n            return;\r\n        }\r\n\r\n        if (binding.cityEdt.getText().toString().trim().length() == 0) {\r\n            binding.cityLayout.setError(\"Please select city\");\r\n            binding.cityLayout.setErrorTextColor(ColorStateList.valueOf(getResources().getColor(R.color.colorPrimary)));\r\n            isError = true;\r\n            if (!isFocus) {\r\n                binding.cityEdt.requestFocus();\r\n                isFocus = true;\r\n                binding.scrollView.scrollTo(0, binding.cityEdt.getBottom());\r\n            }\r\n            return;\r\n        }\r\n\r\n        if (!isError) {\r\n            Bitmap bitmap = null;\r\n            if (selectedLogo != null) {\r\n                bitmap = selectedLogo;\r\n            }\r\n\r\n            EditBrandBrand(bitmap);\r\n        }\r\n\r\n    }\r\n\r\n    private void EditBrandBrand(Bitmap img) {\r\n        if (isLoading)\r\n            return;\r\n        isLoading = true;\r\n        Utility.showProgress(act);\r\n        Log.e(\"API\", APIs.EDIT_BRAND);\r\n        Log.e(\"API\", prefManager.getUserToken());\r\n        File img1File = null;\r\n        if (img != null) {\r\n            img1File = CodeReUse.createFileFromBitmap(act, \"photo.jpeg\", img);\r\n        }\r\n        ANRequest.MultiPartBuilder request = AndroidNetworking.upload(APIs.EDIT_BRAND)\r\n                .addHeaders(\"Accept\", \"application/json\")\r\n                .addHeaders(\"Content-Type\", \"application/json\")\r\n                .addHeaders(\"X-Authorization\", \"Bearer\" + prefManager.getUserToken())\r\n                .addMultipartParameter(\"brand_id\", binding.IdEdt.getText().toString())\r\n                .addMultipartParameter(\"br_category\", binding.categoryEdt.getText().toString())\r\n                .addMultipartParameter(\"br_name\", binding.nameTxt.getText().toString())\r\n                .addMultipartParameter(\"br_phone\", binding.phoneTxt.getText().toString())\r\n                .addMultipartParameter(\"br_address\", binding.addressEdt.getText().toString())\r\n                .addMultipartParameter(\"br_website\", binding.websiteEdt.getText().toString())\r\n                .addMultipartParameter(\"br_email\", binding.emailIdEdt.getText().toString())\r\n                .addMultipartParameter(\"br_service\", binding.businessServiceEdt.getText().toString())\r\n                .setTag(\"Add User\")\r\n                .setPriority(Priority.HIGH);\r\n\r\n        request.addMultipartParameter(\"br_address\", binding.addressEdt.getText().toString());\r\n        request.addMultipartParameter(\"br_country\", \"\");\r\n        request.addMultipartParameter(\"br_state\", binding.stateEdt.getText().toString());\r\n        request.addMultipartParameter(\"br_city\", binding.cityEdt.getText().toString());\r\n        request.addMultipartParameter(\"br_pincode\", binding.pincodeEdt.getText().toString());\r\n\r\n        if (commonListModel != null) {\r\n            request.addMultipartParameter(\"br_category\", commonListModel.getId());\r\n        } else {\r\n            if (listModel != null)\r\n                request.addMultipartParameter(\"br_category\", listModel.getCategoryId());\r\n            else\r\n                request.addMultipartParameter(\"br_category\", prefManager.getActiveBrand().getCategoryId());\r\n        }\r\n\r\n        if (img1File != null) {\r\n            request.addMultipartFile(\"br_logo\", img1File);\r\n            Log.e(\"br_logo\", String.valueOf(img1File));\r\n        }\r\n\r\n        if (img1File != null) {\r\n            request.addMultipartFile(\"frame\", img1File);\r\n            Log.e(\"br_logo\", String.valueOf(img1File));\r\n        }\r\n\r\n\r\n        request.build().setUploadProgressListener(new UploadProgressListener() {\r\n            @Override\r\n            public void onProgress(long bytesUploaded, long totalBytes) {\r\n                // do anything with progress\r\n            }\r\n        })\r\n                .getAsJSONObject(new JSONObjectRequestListener() {\r\n                    @Override\r\n                    public void onResponse(JSONObject response) {\r\n                        isLoading = false;\r\n                        Utility.dismissProgress();\r\n                        Utility.Log(\"Verify-Response\", response);\r\n\r\n                        try {\r\n\r\n                            if (response.getBoolean(\"status\")) {\r\n\r\n                                alertDialogBuilder.setMessage(ResponseHandler.getString(response, \"message\"));\r\n                                alertDialogBuilder.setPositiveButton(\"Ok\", new DialogInterface.OnClickListener() {\r\n                                    @Override\r\n                                    public void onClick(DialogInterface arg0, int arg1) {\r\n                                        onBackPressed();\r\n                                    }\r\n                                });\r\n\r\n                                AlertDialog alertDialog = alertDialogBuilder.create();\r\n                                alertDialog.setCancelable(false);\r\n                                alertDialog.show();\r\n                                MakeMyBrandApp.getInstance().getObserver().setValue(ObserverActionID.RELOAD_BRANDS);\r\n                                MakeMyBrandApp.getInstance().getObserver().setValue(ObserverActionID.REFRESH_BRAND_NAME);\r\n\r\n                            }\r\n                        } catch (JSONException e) {\r\n                            e.printStackTrace();\r\n                        }\r\n\r\n                    }\r\n\r\n                    @Override\r\n                    public void onError(ANError error) {\r\n                        isLoading = false;\r\n                        Utility.dismissProgress();\r\n\r\n                        if (error.getErrorCode() != 0) {\r\n                            Log.e(\"onError errorCode : \", String.valueOf(error.getErrorCode()));\r\n                            Log.e(\"onError errorBody : \", error.getErrorBody());\r\n                            Log.e(\"onError errorDetail : \", error.getErrorDetail());\r\n                        } else {\r\n                            Log.e(\"onError errorDetail : \", error.getErrorDetail());\r\n                        }\r\n                    }\r\n                });\r\n    }\r\n\r\n    CountrySelectionFragment countrySelectionFragment;\r\n\r\n    public void chooseFragment(int callingFlag, String title, ArrayList<CommonListModel> datalist, String alreadySelectedData) {\r\n        countrySelectionFragment = new CountrySelectionFragment(title, datalist, callingFlag, alreadySelectedData);\r\n\r\n        if (countrySelectionFragment.isVisible()) {\r\n            countrySelectionFragment.dismiss();\r\n        }\r\n        if (countrySelectionFragment.isAdded()) {\r\n            countrySelectionFragment.dismiss();\r\n        }\r\n\r\n        if (!countrySelectionFragment.isVisible()) {\r\n            countrySelectionFragment.show(getSupportFragmentManager(), countrySelectionFragment.getTag());\r\n        }\r\n    }\r\n\r\n\r\n    public void showFragmentList(int callingFlag, String title, ArrayList<CommonListModel> datalist) {\r\n        bottomSheetFragment = new ListBottomFragment();\r\n        Log.e(\"Size---\", String.valueOf(datalist.size()));\r\n        bottomSheetFragment.setListData(callingFlag, title, datalist);\r\n        if (bottomSheetFragment.isVisible()) {\r\n            bottomSheetFragment.dismiss();\r\n        }\r\n        if (bottomSheetFragment.isAdded()) {\r\n            bottomSheetFragment.dismiss();\r\n        }\r\n        bottomSheetFragment.show(getSupportFragmentManager(), bottomSheetFragment.getTag());\r\n    }\r\n\r\n    private void pickerView(int actionId, boolean viewMode, Bitmap selectedBitmap) {\r\n        PickerFragment pickerFragment = new PickerFragment(act);\r\n        pickerFragment.setEnableViewMode(viewMode);\r\n        pickerFragment.setActionId(actionId);\r\n\r\n        if (viewMode) {\r\n            pickerFragment.setSelectedBitmapForFullView(selectedBitmap);\r\n        }\r\n        PickerFragment.HandlerImageLoad imageLoad = new PickerFragment.HandlerImageLoad() {\r\n            @Override\r\n            public void onGalleryResult(int flag, Bitmap bitmap) {\r\n                if (flag == Constant.PICKER_FIRST) {\r\n                    Glide.with(act).clear(binding.viewImgFirst);\r\n                    Glide.with(act).clear(binding.selectframe1);\r\n                    binding.viewImgFirst.setImageBitmap(bitmap);\r\n                    binding.imgEmptyStateFirst.setVisibility(View.GONE);\r\n                    binding.actionDeleteFirst.setVisibility(View.VISIBLE);\r\n                    selectedLogo = bitmap;\r\n                    binding.viewImgFirst.setTag(\"1\");\r\n                    if (!isEditModeEnable) {\r\n\r\n                    }\r\n                    binding.viewImgFirst.setVisibility(View.VISIBLE);\r\n                }\r\n\r\n\r\n            }\r\n        };\r\n        pickerFragment.setImageLoad(imageLoad);\r\n        pickerFragment.show(getSupportFragmentManager(), pickerFragment.getTag());\r\n    }\r\n\r\n    @Override\r\n    public void onBackPressed() {\r\n        CodeReUse.activityBackPress(act);\r\n    }\r\n\r\n\r\n    private CommonListModel selectedCountry;\r\n    private CommonListModel selectedState;\r\n    private CommonListModel selectedCity;\r\n\r\n    @Override\r\n    public void onItemSelection(int calledFlag, int position, CommonListModel listModel) {\r\n        if (bottomSheetFragment != null && bottomSheetFragment.isVisible()) {\r\n            bottomSheetFragment.dismiss();\r\n        }\r\n        if (countrySelectionFragment != null && countrySelectionFragment.isVisible()) {\r\n            countrySelectionFragment.dismiss();\r\n        }\r\n\r\n        if (calledFlag == BRAND_CATEGORY) {\r\n            binding.categoryEdt.setText(listModel.getName());\r\n            commonListModel = listModel;\r\n        }\r\n\r\n//        if (calledFlag == COUNTRY) {\r\n//            if (!listModel.getId().equalsIgnoreCase(\"-1\")) {\r\n//                binding.countryEdt.setText(listModel.getName());\r\n//                selectedCountry = listModel;\r\n//                binding.stateLayout.setVisibility(View.VISIBLE);\r\n//                binding.stateEdt.setText(\"\");\r\n//                binding.cityEdt.setText(\"\");\r\n//                selectedCity = null;\r\n//                selectedState = null;\r\n//\r\n//                stateList.clear();\r\n//                getCountryStateCity(CALL_STATE);\r\n//            } else {\r\n//                binding.countryEdt.setText(\"\");\r\n//                selectedCountry = null;\r\n//\r\n//                binding.stateEdt.setText(\"\");\r\n//                selectedState = null;\r\n//                binding.cityEdt.setText(\"\");\r\n//                selectedCity = null;\r\n//\r\n//                binding.cityLayout.setVisibility(View.GONE);\r\n//                binding.stateLayout.setVisibility(View.GONE);\r\n//            }\r\n//        }\r\n\r\n        if (calledFlag == STATE) {\r\n            if (!listModel.getId().equalsIgnoreCase(\"-1\")) {\r\n                binding.stateEdt.setText(listModel.getName());\r\n                selectedState = listModel;\r\n                binding.cityLayout.setVisibility(View.VISIBLE);\r\n                binding.cityEdt.setText(\"\");\r\n                selectedCity = null;\r\n                cityList.clear();\r\n                getCountryStateCity(CALL_CITY);\r\n            } else {\r\n                selectedState = null;\r\n                binding.stateEdt.setText(\"\");\r\n\r\n                binding.cityEdt.setText(\"\");\r\n                selectedCity = null;\r\n\r\n                binding.cityLayout.setVisibility(View.GONE);\r\n\r\n            }\r\n        }\r\n\r\n        if (calledFlag == CITY) {\r\n            if (!listModel.getId().equalsIgnoreCase(\"-1\")) {\r\n                binding.cityEdt.setText(listModel.getName());\r\n                selectedCity = listModel;\r\n            } else {\r\n                binding.cityEdt.setText(\"\");\r\n                selectedCity = null;\r\n            }\r\n        }\r\n    }\r\n\r\n    private void requestAgain() {\r\n        ActivityCompat.requestPermissions(act,\r\n                new String[]{Manifest.permission.CAMERA, Manifest.permission.WRITE_EXTERNAL_STORAGE,\r\n                        Manifest.permission.READ_EXTERNAL_STORAGE},\r\n                CodeReUse.ASK_PERMISSSION);\r\n    }\r\n\r\n    @Override\r\n    public void alertListenerClick() {\r\n        requestAgain();\r\n    }\r\n\r\n    public void captureScreenShort() {\r\n        getWindow().setFlags(WindowManager.LayoutParams.FLAG_SECURE, WindowManager.LayoutParams.FLAG_SECURE);\r\n    }\r\n\r\n\r\n    int CALL_COUNTRY = 0;\r\n    int CALL_STATE = 1;\r\n    int CALL_CITY = 2;\r\n\r\n    private void getCountryStateCity(int flag) {\r\n        if (isLoading)\r\n            return;\r\n        isLoading = true;\r\n        String apiUrl = \"\";\r\n\r\n\r\n        if (flag == CALL_STATE) {\r\n            apiUrl = APIs.GET_STATE + \"/101\"; //+ selectedCountry.getId();\r\n            stateList.clear();\r\n        }\r\n\r\n        if (flag == CALL_CITY) {\r\n            apiUrl = APIs.GET_CITY + \"/\" + selectedState.getId();\r\n            cityList.clear();\r\n        }\r\n        Utility.Log(\"API : \", apiUrl);\r\n        Utility.showLoadingTran(act);\r\n        StringRequest request = new StringRequest(Request.Method.GET, apiUrl, new Response.Listener<String>() {\r\n            @Override\r\n            public void onResponse(String response) {\r\n                Utility.Log(\"GET_COUNTRY : \", response);\r\n                Utility.dismissLoadingTran();\r\n                isLoading = false;\r\n                try {\r\n                    if (ResponseHandler.isSuccess(response, null)) {\r\n                        JSONObject responseJson = ResponseHandler.createJsonObject(response);\r\n                        JSONArray jsonArray = ResponseHandler.getJSONArray(responseJson, \"data\");\r\n                        for (int i = 0; i < jsonArray.length(); i++) {\r\n                            JSONObject itemObj = jsonArray.getJSONObject(i);\r\n                            CommonListModel listModel = new CommonListModel();\r\n                            listModel.setLayoutType(CommonListModel.LAYOUT_BLOCK);\r\n                            listModel.setId(ResponseHandler.getString(itemObj, \"id\"));\r\n                            listModel.setName(ResponseHandler.getString(itemObj, \"name\"));\r\n\r\n                            if (flag == CALL_STATE) {\r\n                                stateList.add(listModel);\r\n                            }\r\n\r\n                            if (flag == CALL_CITY) {\r\n                                cityList.add(listModel);\r\n                            }\r\n                        }\r\n\r\n                        if (flag == CALL_STATE && stateList.size() != 0) {\r\n                            for (int i = 0; i < stateList.size(); i++) {\r\n                                if (binding.stateEdt.getText().toString().equalsIgnoreCase(stateList.get(i).getName())) {\r\n                                    selectedState = stateList.get(i);\r\n                                    getCountryStateCity(CALL_CITY);\r\n                                    break;\r\n                                }\r\n                            }\r\n                        }\r\n\r\n\r\n                        if (wantToShowDropDown) {\r\n                            if (flag == CALL_STATE) {\r\n                                chooseFragment(STATE, stateTtitle, stateList, binding.stateEdt.getText().toString());\r\n                            }\r\n                            if (flag == CALL_CITY) {\r\n                                chooseFragment(CITY, cityTitle, cityList, binding.cityEdt.getText().toString());\r\n                            }\r\n                        }\r\n                    }\r\n\r\n\r\n                } catch (JSONException e) {\r\n                    e.printStackTrace();\r\n                    Utility.dismissLoadingTran();\r\n                }\r\n            }\r\n        }, new Response.ErrorListener() {\r\n            @Override\r\n            public void onErrorResponse(VolleyError error) {\r\n                error.printStackTrace();\r\n                isLoading = false;\r\n            }\r\n        }) {\r\n\r\n            @Override\r\n            public Map<String, String> getHeaders() throws AuthFailureError {\r\n                Map<String, String> params = new HashMap<String, String>();\r\n                params.put(\"Accept\", \"application/x-www-form-urlencoded\");//application/json\r\n                params.put(\"Content-Type\", \"application/x-www-form-urlencoded\");\r\n                params.put(\"X-Authorization\", \"Bearer\" + prefManager.getUserToken());\r\n                Log.e(\"Token\", params.toString());\r\n                return params;\r\n            }\r\n\r\n\r\n            @Override\r\n            protected Map<String, String> getParams() throws AuthFailureError {\r\n                HashMap<String, String> map = new HashMap<>();\r\n\r\n\r\n                Utility.Log(\"Params : \", map.toString());\r\n                return map;\r\n            }\r\n        };\r\n        RequestQueue queue = Volley.newRequestQueue(this);\r\n        queue.add(request);\r\n\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/app/brandmania/Activity/brand/UpdateBandList.java b/app/src/main/java/com/app/brandmania/Activity/brand/UpdateBandList.java
--- a/app/src/main/java/com/app/brandmania/Activity/brand/UpdateBandList.java	(revision 9f316353b6784bffd0bc962d6abb94b9d35bb532)
+++ b/app/src/main/java/com/app/brandmania/Activity/brand/UpdateBandList.java	(date 1638526305500)
@@ -865,7 +865,6 @@
                             }
                         }
 
-
                         if (wantToShowDropDown) {
                             if (flag == CALL_STATE) {
                                 chooseFragment(STATE, stateTtitle, stateList, binding.stateEdt.getText().toString());
@@ -876,7 +875,6 @@
                         }
                     }
 
-
                 } catch (JSONException e) {
                     e.printStackTrace();
                     Utility.dismissLoadingTran();
@@ -889,7 +887,6 @@
                 isLoading = false;
             }
         }) {
-
             @Override
             public Map<String, String> getHeaders() throws AuthFailureError {
                 Map<String, String> params = new HashMap<String, String>();
@@ -900,7 +897,6 @@
                 return params;
             }
 
-
             @Override
             protected Map<String, String> getParams() throws AuthFailureError {
                 HashMap<String, String> map = new HashMap<>();
Index: app/src/main/java/com/app/brandmania/Fragment/bottom/ProfileFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.app.brandmania.Fragment.bottom;\r\n\r\nimport android.app.Activity;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.content.pm.PackageManager;\r\nimport android.graphics.Color;\r\nimport android.graphics.drawable.ColorDrawable;\r\nimport android.net.Uri;\r\nimport android.os.Bundle;\r\nimport android.util.Log;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\n\r\nimport androidx.databinding.DataBindingUtil;\r\n\r\nimport com.android.volley.AuthFailureError;\r\nimport com.android.volley.Request;\r\nimport com.android.volley.RequestQueue;\r\nimport com.android.volley.Response;\r\nimport com.android.volley.VolleyError;\r\nimport com.android.volley.toolbox.StringRequest;\r\nimport com.android.volley.toolbox.Volley;\r\nimport com.app.brandmania.Activity.about_us.AboutUsActivity;\r\nimport com.app.brandmania.Activity.about_us.AddReportAndBug;\r\nimport com.app.brandmania.Activity.about_us.AppIntroActivity;\r\nimport com.app.brandmania.Activity.about_us.FaqActivity;\r\nimport com.app.brandmania.Activity.about_us.HelpAndSupport;\r\nimport com.app.brandmania.Activity.about_us.PartnerProgramActivity;\r\nimport com.app.brandmania.Activity.basics.LoginActivity;\r\nimport com.app.brandmania.Activity.basics.ReferNEarnActivity;\r\nimport com.app.brandmania.Activity.brand.ViewBrandActivity;\r\nimport com.app.brandmania.Activity.packages.PackageActivity;\r\nimport com.app.brandmania.Common.Constant;\r\nimport com.app.brandmania.Common.HELPER;\r\nimport com.app.brandmania.Common.MakeMyBrandApp;\r\nimport com.app.brandmania.Common.ObserverActionID;\r\nimport com.app.brandmania.Common.PreafManager;\r\nimport com.app.brandmania.Common.ResponseHandler;\r\nimport com.app.brandmania.Fragment.BaseFragment;\r\nimport com.app.brandmania.Model.BrandListItem;\r\nimport com.app.brandmania.R;\r\nimport com.app.brandmania.utils.APIs;\r\nimport com.app.brandmania.utils.CodeReUse;\r\nimport com.app.brandmania.utils.Utility;\r\nimport com.app.brandmania.databinding.DialogFacebookLikesBinding;\r\nimport com.app.brandmania.databinding.FragmentProfileBinding;\r\n\r\nimport org.json.JSONException;\r\nimport org.json.JSONObject;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\nimport java.util.Observable;\r\n\r\npublic class ProfileFragment extends BaseFragment {\r\n    Activity act;\r\n    private FragmentProfileBinding binding;\r\n\r\n\r\n    @Override\r\n    public View provideFragmentView(LayoutInflater inflater, ViewGroup parent, Bundle savedInstanceState) {\r\n        act = getActivity();\r\n        binding = DataBindingUtil.inflate(inflater, R.layout.fragment_profile, parent, false);\r\n\r\n        if (prefManager.getActiveBrand() != null)\r\n            binding.businessName.setText(prefManager.getActiveBrand().getName());\r\n\r\n            binding.mybusinessRelative.setOnClickListener(new View.OnClickListener() {\r\n                @Override\r\n                public void onClick(View v) {\r\n                    Intent i = new Intent(act, ViewBrandActivity.class);\r\n                    startActivity(i);\r\n                    act.overridePendingTransition(R.anim.slide_right_in, R.anim.slide_right_out);\r\n                }\r\n            });\r\n\r\n        binding.introLayout.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                Intent i = new Intent(act, AppIntroActivity.class);\r\n                startActivity(i);\r\n                act.overridePendingTransition(R.anim.slide_right_in, R.anim.slide_right_out);\r\n            }\r\n        });\r\n\r\n        if (!prefManager.getAppTutorial().isEmpty()) {\r\n            binding.introLayout.setVisibility(View.VISIBLE);\r\n            binding.videoLine.setVisibility(View.VISIBLE);\r\n        }\r\n\r\n        binding.logoutRelative.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n\r\n                prefManager.Logout();\r\n                Intent i = new Intent(act, LoginActivity.class);\r\n                i.addCategory(Intent.CATEGORY_HOME);\r\n                i.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\r\n                startActivity(i);\r\n                act.overridePendingTransition(R.anim.slide_right_in, R.anim.slide_right_out);\r\n                act.finish();\r\n            }\r\n        });\r\n\r\n        if (prefManager.getActiveBrand() != null) {\r\n            binding.referNEarnLayout.setOnClickListener(new View.OnClickListener() {\r\n                @Override\r\n                public void onClick(View v) {\r\n                    Intent i = new Intent(act, ReferNEarnActivity.class);\r\n                    startActivity(i);\r\n                    act.overridePendingTransition(R.anim.slide_right_in, R.anim.slide_right_out);\r\n                }\r\n            });\r\n        } else {\r\n            binding.referNEarnLayout.setVisibility(View.GONE);\r\n        }\r\n\r\n        binding.helpandsupportLayout.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                Intent i = new Intent(act, HelpAndSupport.class);\r\n                startActivity(i);\r\n                act.overridePendingTransition(R.anim.slide_right_in, R.anim.slide_right_out);\r\n\r\n            }\r\n        });\r\n        binding.partnerProgRelative.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n\r\n                Intent i = new Intent(act, PartnerProgramActivity.class);\r\n                startActivity(i);\r\n                act.overridePendingTransition(R.anim.slide_right_in, R.anim.slide_right_out);\r\n\r\n            }\r\n        });\r\n        binding.myFaqRelative.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                Intent i = new Intent(act, FaqActivity.class);\r\n                startActivity(i);\r\n                act.overridePendingTransition(R.anim.slide_right_in, R.anim.slide_right_out);\r\n\r\n            }\r\n        });\r\n        binding.aboutUsRelative.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                Intent i = new Intent(act, AboutUsActivity.class);\r\n                i.putExtra(\"aboutUs\", \"aboutUs\");\r\n                startActivity(i);\r\n                act.overridePendingTransition(R.anim.slide_right_in, R.anim.slide_right_out);\r\n\r\n            }\r\n        });\r\n        binding.shareText.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                Intent shareIntent = new Intent(android.content.Intent.ACTION_SEND);\r\n                shareIntent.setType(\"text/plain\");\r\n                // shareIntent.putExtra(Intent.EXTRA_SUBJECT,\"Insert Subject here\");\r\n                String app_url = \"https://play.google.com/store/apps/details?id=com.make.mybrand\";\r\n                shareIntent.putExtra(android.content.Intent.EXTRA_TEXT, app_url);\r\n                startActivity(Intent.createChooser(shareIntent, \"Share via\"));\r\n            }\r\n        });\r\n        binding.packageRelative.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                Intent intent = new Intent(act, PackageActivity.class);\r\n                intent.putExtra(\"Profile\", \"1\");\r\n                startActivity(intent);\r\n                act.overridePendingTransition(R.anim.slide_right_in, R.anim.slide_right_out);\r\n            }\r\n        });\r\n        binding.rateUsLayout.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                Uri uri = Uri.parse(\"https://play.google.com/store/apps/details?id=com.make.mybrand\");\r\n                Intent intent = new Intent(Intent.ACTION_VIEW, uri);\r\n                try {\r\n                    startActivity(intent);\r\n                } catch (Exception e) {\r\n\r\n                }\r\n\r\n            }\r\n        });\r\n        binding.reportbugsLayout.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                Intent intent = new Intent(act, AddReportAndBug.class);\r\n                startActivity(intent);\r\n                act.overridePendingTransition(R.anim.slide_right_in, R.anim.slide_right_out);\r\n            }\r\n        });\r\n        binding.appVersionTxt.setText(\"App Version \" + Constant.F_VERSION);\r\n\r\n        binding.contactTxtLayout.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                if (prefManager.getActiveBrand() != null) {\r\n                    HELPER.WHATSAPP_REDIRECTION_2(act, prefManager.getActiveBrand().getName(), prefManager.getMobileNumber());\r\n                } else {\r\n                    HELPER.WHATSAPP_REDIRECTION_2(act, \"\", prefManager.getMobileNumber());\r\n                }\r\n            }\r\n        });\r\n        binding.visitFacebook.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                facebookPageDialog();\r\n            }\r\n        });\r\n        binding.websiteLayout.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                Uri webpage = Uri.parse(\"http://brandmaniaapp.in\");\r\n                Intent intent = new Intent(Intent.ACTION_VIEW, webpage);\r\n                //intent.setPackage(\"com.android.chrome\");\r\n                startActivity(intent);\r\n            }\r\n        });\r\n\r\n        binding.privacyPolicy.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                Intent i = new Intent(act, AboutUsActivity.class);\r\n                i.putExtra(\"termsNCondition\", \"aboutUs\");\r\n                startActivity(i);\r\n                act.overridePendingTransition(R.anim.slide_right_in, R.anim.slide_right_out);\r\n            }\r\n        });\r\n\r\n        return binding.getRoot();\r\n    }\r\n\r\n    public static String FACEBOOK_URL = \"https://www.facebook.com/brandmania2020\";\r\n    public static String FACEBOOK_PAGE_ID = \"103655598316587\";\r\n\r\n\r\n    ArrayList<BrandListItem> multiListItems = new ArrayList<>();\r\n\r\n    private void getBrandList() {\r\n\r\n        Utility.Log(\"API : \", APIs.GET_BRAND);\r\n        StringRequest stringRequest = new StringRequest(Request.Method.POST, APIs.GET_BRAND, new Response.Listener<String>() {\r\n            @Override\r\n            public void onResponse(String response) {\r\n                Utility.Log(\"GET_BRAND : \", response);\r\n                try {\r\n                    JSONObject jsonObject = new JSONObject(response);\r\n                    multiListItems = ResponseHandler.HandleGetBrandList(jsonObject);\r\n                    if (multiListItems != null && multiListItems.size() != 0) {\r\n                        prefManager.setAddBrandList(multiListItems);\r\n                        for (int i = 0; i < multiListItems.size(); i++) {\r\n                            if (multiListItems.get(i).getId().equalsIgnoreCase(prefManager.getActiveBrand().getId())) {\r\n                                prefManager.setActiveBrand(multiListItems.get(i));\r\n                                break;\r\n                            }\r\n                        }\r\n\r\n                        //FirstLogin\r\n                        if (act.getIntent().hasExtra(\"FirstLogin\")) {\r\n                            prefManager.setIS_Brand(true);\r\n                            if (multiListItems.size() != 0) {\r\n                                prefManager.setActiveBrand(multiListItems.get(0));\r\n                            }\r\n                        }\r\n\r\n                        if (prefManager.getActiveBrand() == null) {\r\n                            if (multiListItems.size() != 0) {\r\n                                prefManager.setActiveBrand(multiListItems.get(0));\r\n                            }\r\n                        }\r\n                        prefManager = new PreafManager(act);\r\n                        binding.businessName.setText(prefManager.getActiveBrand().getName());\r\n                    }\r\n                } catch (JSONException e) {\r\n                    e.printStackTrace();\r\n                }\r\n\r\n\r\n            }\r\n        },\r\n                new Response.ErrorListener() {\r\n                    @Override\r\n                    public void onErrorResponse(VolleyError error) {\r\n                        error.printStackTrace();\r\n\r\n\r\n                    }\r\n                }\r\n        ) {\r\n            /**\r\n             * Passing some request headers*\r\n             */\r\n\r\n            @Override\r\n            public Map<String, String> getHeaders() throws AuthFailureError {\r\n                return getHeader(CodeReUse.GET_FORM_HEADER);\r\n            }\r\n\r\n\r\n            @Override\r\n            protected Map<String, String> getParams() {\r\n                Map<String, String> params = new HashMap<>();\r\n                Utility.Log(\"POSTED-PARAMS-\", params.toString());\r\n                return params;\r\n            }\r\n\r\n        };\r\n\r\n        RequestQueue queue = Volley.newRequestQueue(act);\r\n        queue.add(stringRequest);\r\n    }\r\n\r\n    @Override\r\n    public void update(Observable observable, Object data) {\r\n\r\n        if (MakeMyBrandApp.getInstance().getObserver().getValue() == ObserverActionID.REFRESH_BRAND_NAME) {\r\n            getBrandList();\r\n\r\n        }\r\n        if (MakeMyBrandApp.getInstance().getObserver().getValue() == ObserverActionID.APP_INTRO_REFRESH) {\r\n            prefManager = new PreafManager(act);\r\n            if (!prefManager.getAppTutorial().isEmpty()) {\r\n                binding.introLayout.setVisibility(View.VISIBLE);\r\n                binding.videoLine.setVisibility(View.VISIBLE);\r\n            }\r\n        }\r\n    }\r\n\r\n    public DialogFacebookLikesBinding facebookLikesBinding;\r\n\r\n    private void facebookPageDialog() {\r\n        facebookLikesBinding = DataBindingUtil.inflate(LayoutInflater.from(act), R.layout.dialog_facebook_likes, null, false);\r\n        androidx.appcompat.app.AlertDialog.Builder builder = new androidx.appcompat.app.AlertDialog.Builder(act, R.style.MyAlertDialogStyle_extend);\r\n        builder.setView(facebookLikesBinding.getRoot());\r\n        androidx.appcompat.app.AlertDialog alertDialog = builder.create();\r\n        alertDialog.setContentView(facebookLikesBinding.getRoot());\r\n\r\n        facebookLikesBinding.viewPackage.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                alertDialog.dismiss();\r\n                Intent facebookIntent = new Intent(Intent.ACTION_VIEW);\r\n                facebookIntent.setData(Uri.parse(FACEBOOK_URL));\r\n                startActivity(facebookIntent);\r\n            }\r\n        });\r\n        facebookLikesBinding.closeBtn.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                alertDialog.dismiss();\r\n            }\r\n        });\r\n\r\n        alertDialog.setCancelable(false);\r\n        alertDialog.getWindow().setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));\r\n        alertDialog.show();\r\n\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/app/brandmania/Fragment/bottom/ProfileFragment.java b/app/src/main/java/com/app/brandmania/Fragment/bottom/ProfileFragment.java
--- a/app/src/main/java/com/app/brandmania/Fragment/bottom/ProfileFragment.java	(revision 9f316353b6784bffd0bc962d6abb94b9d35bb532)
+++ b/app/src/main/java/com/app/brandmania/Fragment/bottom/ProfileFragment.java	(date 1638530281698)
@@ -68,14 +68,14 @@
         if (prefManager.getActiveBrand() != null)
             binding.businessName.setText(prefManager.getActiveBrand().getName());
 
-            binding.mybusinessRelative.setOnClickListener(new View.OnClickListener() {
-                @Override
-                public void onClick(View v) {
-                    Intent i = new Intent(act, ViewBrandActivity.class);
-                    startActivity(i);
-                    act.overridePendingTransition(R.anim.slide_right_in, R.anim.slide_right_out);
-                }
-            });
+        binding.mybusinessRelative.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                Intent i = new Intent(act, ViewBrandActivity.class);
+                startActivity(i);
+                act.overridePendingTransition(R.anim.slide_right_in, R.anim.slide_right_out);
+            }
+        });
 
         binding.introLayout.setOnClickListener(new View.OnClickListener() {
             @Override
@@ -109,9 +109,7 @@
             binding.referNEarnLayout.setOnClickListener(new View.OnClickListener() {
                 @Override
                 public void onClick(View v) {
-                    Intent i = new Intent(act, ReferNEarnActivity.class);
-                    startActivity(i);
-                    act.overridePendingTransition(R.anim.slide_right_in, R.anim.slide_right_out);
+                    HELPER.ROUTE(act, ReferNEarnActivity.class);
                 }
             });
         } else {
@@ -121,29 +119,19 @@
         binding.helpandsupportLayout.setOnClickListener(new View.OnClickListener() {
             @Override
             public void onClick(View v) {
-                Intent i = new Intent(act, HelpAndSupport.class);
-                startActivity(i);
-                act.overridePendingTransition(R.anim.slide_right_in, R.anim.slide_right_out);
-
+                HELPER.ROUTE(act, HelpAndSupport.class);
             }
         });
         binding.partnerProgRelative.setOnClickListener(new View.OnClickListener() {
             @Override
             public void onClick(View v) {
-
-                Intent i = new Intent(act, PartnerProgramActivity.class);
-                startActivity(i);
-                act.overridePendingTransition(R.anim.slide_right_in, R.anim.slide_right_out);
-
+                HELPER.ROUTE(act, PartnerProgramActivity.class);
             }
         });
         binding.myFaqRelative.setOnClickListener(new View.OnClickListener() {
             @Override
             public void onClick(View v) {
-                Intent i = new Intent(act, FaqActivity.class);
-                startActivity(i);
-                act.overridePendingTransition(R.anim.slide_right_in, R.anim.slide_right_out);
-
+                HELPER.ROUTE(act, FaqActivity.class);
             }
         });
         binding.aboutUsRelative.setOnClickListener(new View.OnClickListener() {
@@ -192,9 +180,7 @@
         binding.reportbugsLayout.setOnClickListener(new View.OnClickListener() {
             @Override
             public void onClick(View view) {
-                Intent intent = new Intent(act, AddReportAndBug.class);
-                startActivity(intent);
-                act.overridePendingTransition(R.anim.slide_right_in, R.anim.slide_right_out);
+                HELPER.ROUTE(act, AddReportAndBug.class);
             }
         });
         binding.appVersionTxt.setText("App Version " + Constant.F_VERSION);
@@ -234,14 +220,12 @@
                 act.overridePendingTransition(R.anim.slide_right_in, R.anim.slide_right_out);
             }
         });
-
         return binding.getRoot();
     }
 
     public static String FACEBOOK_URL = "https://www.facebook.com/brandmania2020";
     public static String FACEBOOK_PAGE_ID = "103655598316587";
 
-
     ArrayList<BrandListItem> multiListItems = new ArrayList<>();
 
     private void getBrandList() {
Index: app/src/main/res/layout/fragment_downloads.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<layout xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\r\n    xmlns:tools=\"http://schemas.android.com/tools\">\r\n\r\n    <RelativeLayout\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"match_parent\">\r\n\r\n        <androidx.appcompat.widget.Toolbar\r\n            android:id=\"@+id/my_toolbar\"\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:background=\"@color/colorPrimary\"\r\n            android:elevation=\"4dp\"\r\n            android:theme=\"@style/ThemeOverlay.AppCompat.ActionBar\"\r\n            android:visibility=\"visible\"\r\n            app:popupTheme=\"@style/ThemeOverlay.AppCompat.Light\">\r\n\r\n            <RelativeLayout\r\n                android:id=\"@+id/main_linearlayout_title\"\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:layout_marginTop=\"@dimen/_10sdp\"\r\n                android:layout_marginRight=\"@dimen/_7sdp\"\r\n                android:elevation=\"0dp\">\r\n\r\n                <TextView\r\n                    android:id=\"@+id/businessName\"\r\n                    android:layout_width=\"wrap_content\"\r\n                    android:layout_height=\"wrap_content\"\r\n                    android:layout_marginTop=\"@dimen/_10sdp\"\r\n                    android:fontFamily=\"@font/montserrat_semibold\"\r\n                    android:text=\"Download\"\r\n                    android:textColor=\"@color/colorNavText\"\r\n                    android:textSize=\"@dimen/_12sdp\"></TextView>\r\n\r\n            </RelativeLayout>\r\n        </androidx.appcompat.widget.Toolbar>\r\n\r\n        <ImageView\r\n            android:layout_width=\"@dimen/_300sdp\"\r\n            android:layout_height=\"@dimen/_300sdp\"\r\n            android:layout_alignParentBottom=\"true\"\r\n            android:layout_marginStart=\"-100dp\"\r\n            android:src=\"@drawable/bottom\">\r\n\r\n        </ImageView>\r\n\r\n\r\n        <com.google.android.material.tabs.TabLayout\r\n            android:id=\"@+id/tabLayout\"\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:layout_below=\"@+id/my_toolbar\"\r\n            android:layout_marginTop=\"-3dp\"\r\n            android:background=\"@color/colorNavText\"\r\n            android:visibility=\"visible\"\r\n            app:tabIndicatorColor=\"@color/colorPrimary\"\r\n            app:tabTextAppearance=\"@style/CustomViewAllTab\" />\r\n\r\n        <View\r\n            android:id=\"@+id/view\"\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"1dp\"\r\n            android:layout_below=\"@+id/tabLayout\"\r\n            android:background=\"@color/Graycolor\" />\r\n\r\n\r\n        <include\r\n            android:id=\"@+id/includeRegistration\"\r\n            layout=\"@layout/add_registration_layout\" />\r\n\r\n\r\n        <androidx.viewpager.widget.ViewPager\r\n            android:id=\"@+id/viewPager\"\r\n            android:layout_width=\"wrap_content\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:layout_below=\"@id/tabLayout\"\r\n            android:layout_centerInParent=\"true\"\r\n            tools:layout_editor_absoluteX=\"8dp\" />\r\n\r\n    </RelativeLayout>\r\n</layout>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/layout/fragment_downloads.xml b/app/src/main/res/layout/fragment_downloads.xml
--- a/app/src/main/res/layout/fragment_downloads.xml	(revision 9f316353b6784bffd0bc962d6abb94b9d35bb532)
+++ b/app/src/main/res/layout/fragment_downloads.xml	(date 1638526305485)
@@ -47,7 +47,6 @@
 
         </ImageView>
 
-
         <com.google.android.material.tabs.TabLayout
             android:id="@+id/tabLayout"
             android:layout_width="match_parent"
@@ -66,12 +65,10 @@
             android:layout_below="@+id/tabLayout"
             android:background="@color/Graycolor" />
 
-
         <include
             android:id="@+id/includeRegistration"
             layout="@layout/add_registration_layout" />
 
-
         <androidx.viewpager.widget.ViewPager
             android:id="@+id/viewPager"
             android:layout_width="wrap_content"
Index: app/src/main/java/com/app/brandmania/Activity/custom/ViewAllFrameImageActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.app.brandmania.Activity.custom;\r\n\r\nimport android.Manifest;\r\nimport android.annotation.SuppressLint;\r\nimport android.app.Activity;\r\nimport android.app.AlertDialog;\r\nimport android.content.Context;\r\nimport android.content.DialogInterface;\r\nimport android.content.Intent;\r\nimport android.content.pm.PackageManager;\r\nimport android.content.res.Resources;\r\nimport android.graphics.Bitmap;\r\nimport android.graphics.Canvas;\r\nimport android.graphics.Color;\r\nimport android.graphics.Typeface;\r\nimport android.graphics.drawable.BitmapDrawable;\r\nimport android.graphics.drawable.ColorDrawable;\r\nimport android.graphics.drawable.Drawable;\r\nimport android.graphics.drawable.GradientDrawable;\r\nimport android.net.Uri;\r\nimport android.os.Build;\r\nimport android.os.Bundle;\r\nimport android.os.Handler;\r\nimport android.provider.MediaStore;\r\nimport android.provider.Settings;\r\nimport android.util.DisplayMetrics;\r\nimport android.util.Log;\r\nimport android.util.TypedValue;\r\nimport android.view.GestureDetector;\r\nimport android.view.LayoutInflater;\r\nimport android.view.MotionEvent;\r\nimport android.view.ScaleGestureDetector;\r\nimport android.view.View;\r\nimport android.view.ViewConfiguration;\r\nimport android.view.ViewGroup;\r\nimport android.view.animation.LinearInterpolator;\r\nimport android.view.inputmethod.InputMethodManager;\r\nimport android.widget.ImageView;\r\nimport android.widget.RelativeLayout;\r\nimport android.widget.TextView;\r\n\r\nimport androidx.annotation.RequiresApi;\r\nimport androidx.constraintlayout.widget.ConstraintLayout;\r\nimport androidx.core.app.ActivityCompat;\r\nimport androidx.core.content.ContextCompat;\r\nimport androidx.databinding.DataBindingUtil;\r\nimport androidx.recyclerview.widget.GridLayoutManager;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport com.android.volley.AuthFailureError;\r\nimport com.android.volley.Request;\r\nimport com.android.volley.RequestQueue;\r\nimport com.android.volley.Response;\r\nimport com.android.volley.VolleyError;\r\nimport com.android.volley.toolbox.StringRequest;\r\nimport com.android.volley.toolbox.Volley;\r\nimport com.androidnetworking.AndroidNetworking;\r\nimport com.androidnetworking.common.ANRequest;\r\nimport com.androidnetworking.common.Priority;\r\nimport com.androidnetworking.error.ANError;\r\nimport com.androidnetworking.interfaces.JSONObjectRequestListener;\r\nimport com.androidnetworking.interfaces.UploadProgressListener;\r\nimport com.app.brandmania.Activity.about_us.AppIntroActivity;\r\nimport com.app.brandmania.Activity.packages.PackageActivity;\r\nimport com.app.brandmania.Adapter.FooterModel;\r\nimport com.app.brandmania.Adapter.ImageCategoryAddaptor;\r\nimport com.app.brandmania.Adapter.MultiListItem;\r\nimport com.app.brandmania.Adapter.ViewAllTopCustomeFrameTabAdapter;\r\nimport com.app.brandmania.Common.Constant;\r\nimport com.app.brandmania.Common.FooterHelper;\r\nimport com.app.brandmania.Common.MakeMyBrandApp;\r\nimport com.app.brandmania.Common.ObserverActionID;\r\nimport com.app.brandmania.Common.PreafManager;\r\nimport com.app.brandmania.Common.ResponseHandler;\r\nimport com.app.brandmania.Connection.BaseActivity;\r\nimport com.app.brandmania.DataBase.DBManager;\r\nimport com.app.brandmania.DataBase.DatabaseHelper;\r\nimport com.app.brandmania.Fragment.AddBrandFragment;\r\nimport com.app.brandmania.Fragment.bottom.PickerFragment;\r\nimport com.app.brandmania.Interface.AddTextEvent;\r\nimport com.app.brandmania.Interface.FilterListener;\r\nimport com.app.brandmania.Interface.FrameInterFace;\r\nimport com.app.brandmania.Interface.IBackendFrameSelect;\r\nimport com.app.brandmania.Interface.IColorChange;\r\nimport com.app.brandmania.Interface.IImageBritnessEvent;\r\nimport com.app.brandmania.Interface.IImageFromGalary;\r\nimport com.app.brandmania.Interface.IItaliTextEvent;\r\nimport com.app.brandmania.Interface.IRemoveFrame;\r\nimport com.app.brandmania.Interface.ITextBoldEvent;\r\nimport com.app.brandmania.Interface.ITextColorChangeEvent;\r\nimport com.app.brandmania.Interface.ITextSizeEvent;\r\nimport com.app.brandmania.Interface.ImageCateItemeInterFace;\r\nimport com.app.brandmania.Interface.IrotateEvent;\r\nimport com.app.brandmania.Interface.ItemeInterFace;\r\nimport com.app.brandmania.Interface.ThumbnailCallback;\r\nimport com.app.brandmania.Interface.alertListenerCallback;\r\nimport com.app.brandmania.Interface.onFooterSelectListener;\r\nimport com.app.brandmania.Model.BrandListItem;\r\nimport com.app.brandmania.Model.DashBoardItem;\r\nimport com.app.brandmania.Model.FrameItem;\r\nimport com.app.brandmania.Model.ImageFromGalaryModel;\r\nimport com.app.brandmania.Model.ImageList;\r\nimport com.app.brandmania.Model.LayoutModelClass;\r\nimport com.app.brandmania.R;\r\nimport com.app.brandmania.databinding.DialogUpgradeLayoutPackegeExpiredBindingImpl;\r\nimport com.app.brandmania.databinding.LayoutFooterEightteenBinding;\r\nimport com.app.brandmania.databinding.LayoutFooterElevenBinding;\r\nimport com.app.brandmania.databinding.LayoutFooterFifteenBinding;\r\nimport com.app.brandmania.databinding.LayoutFooterFourteenBinding;\r\nimport com.app.brandmania.databinding.LayoutFooterNineteenBinding;\r\nimport com.app.brandmania.databinding.LayoutFooterSeventeenBinding;\r\nimport com.app.brandmania.databinding.LayoutFooterSixteenBinding;\r\nimport com.app.brandmania.databinding.LayoutFooterThirteenBinding;\r\nimport com.app.brandmania.databinding.LayoutFooterTweloneBinding;\r\nimport com.app.brandmania.databinding.LayoutFooterTwentyBinding;\r\nimport com.app.brandmania.utils.APIs;\r\nimport com.app.brandmania.utils.CodeReUse;\r\nimport com.app.brandmania.utils.IFontChangeEvent;\r\nimport com.app.brandmania.utils.Utility;\r\nimport com.app.brandmania.databinding.ActivityViewAllFrameImageBinding;\r\nimport com.app.brandmania.databinding.DialogDiscardImageBinding;\r\nimport com.app.brandmania.databinding.DialogUpgradeDownloadLimitExpireBinding;\r\nimport com.app.brandmania.databinding.DialogUpgradeLayoutEnterpriseBinding;\r\nimport com.app.brandmania.databinding.DialogUpgradeLayoutSecondBinding;\r\nimport com.app.brandmania.databinding.LayoutForLoadEightBinding;\r\nimport com.app.brandmania.databinding.LayoutForLoadFiveBinding;\r\nimport com.app.brandmania.databinding.LayoutForLoadFourBinding;\r\nimport com.app.brandmania.databinding.LayoutForLoadNineBinding;\r\nimport com.app.brandmania.databinding.LayoutForLoadOneBinding;\r\nimport com.app.brandmania.databinding.LayoutForLoadSevenBinding;\r\nimport com.app.brandmania.databinding.LayoutForLoadSixBinding;\r\nimport com.app.brandmania.databinding.LayoutForLoadTenBinding;\r\nimport com.app.brandmania.databinding.LayoutForLoadThreeBinding;\r\nimport com.app.brandmania.databinding.LayoutForLoadTwoBinding;\r\nimport com.bumptech.glide.Glide;\r\nimport com.google.android.material.tabs.TabLayout;\r\nimport com.google.gson.Gson;\r\nimport com.jaredrummler.android.colorpicker.ColorPickerDialogListener;\r\nimport com.jaredrummler.android.colorpicker.ColorPickerView;\r\nimport com.theartofdev.edmodo.cropper.CropImage;\r\nimport com.theartofdev.edmodo.cropper.CropImageView;\r\nimport com.zomato.photofilters.imageprocessors.Filter;\r\n\r\nimport org.json.JSONArray;\r\nimport org.json.JSONException;\r\nimport org.json.JSONObject;\r\n\r\nimport java.io.ByteArrayOutputStream;\r\nimport java.io.File;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.FileOutputStream;\r\nimport java.io.IOException;\r\nimport java.io.InputStream;\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.ArrayList;\r\nimport java.util.Calendar;\r\nimport java.util.Date;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\nimport java.util.Observable;\r\n\r\nimport ja.burhanrashid52.photoeditor.PhotoFilter;\r\nimport smartdevelop.ir.eram.showcaseviewlib.GuideView;\r\nimport smartdevelop.ir.eram.showcaseviewlib.config.DismissType;\r\nimport smartdevelop.ir.eram.showcaseviewlib.config.Gravity;\r\nimport smartdevelop.ir.eram.showcaseviewlib.listener.GuideListener;\r\n\r\nimport static com.app.brandmania.Activity.details.ImageCategoryDetailActivity.DOWLOAD;\r\nimport static com.app.brandmania.Adapter.ImageCategoryAddaptor.FROM_VIEWALL;\r\nimport static com.app.brandmania.Fragment.top.EditTab.setBrightness;\r\n\r\n\r\npublic class ViewAllFrameImageActivity extends BaseActivity implements FrameInterFace, alertListenerCallback, ItemeInterFace,\r\n        ImageCateItemeInterFace, ITextColorChangeEvent, IFontChangeEvent, ITextBoldEvent, IItaliTextEvent, ColorPickerDialogListener,\r\n        IColorChange, ColorPickerView.OnColorChangedListener, ITextSizeEvent, onFooterSelectListener, View.OnTouchListener,\r\n        FilterListener, IImageBritnessEvent, IImageFromGalary, IRemoveFrame, IrotateEvent, ThumbnailCallback, IBackendFrameSelect, AddTextEvent {\r\n\r\n    private ActivityViewAllFrameImageBinding binding;\r\n    File new_file;\r\n    GestureDetector gestureDetector;\r\n     float angle = 0;\r\n    private int _xDelta;\r\n    private int _yDelta;\r\n     ImageFromGalaryModel imageFromGalaryModel;\r\n    Drawable yourDrawable;\r\n    public int startwidth;\r\n    private boolean isRemoveFrame = false;\r\n    TextView selectedForEdit;\r\n    Bitmap selectedImageBitmap = null;\r\n    int startheight;\r\n    private float d = 0f;\r\n    float dx = 0, dy = 0, x = 0, y = 0;\r\n    static final int NONE = 0;\r\n    static final int DRAG = 1;\r\n    static final int ZOOM = 2;\r\n\r\n\r\n    float oldDist = 1f;\r\n    private float newRot = 0f;\r\n    RelativeLayout.LayoutParams parms;\r\n    private float mScaleFactor = 1.0f;\r\n    ArrayList<ImageList> AddFavorite = new ArrayList<>();\r\n    ArrayList<BrandListItem> multiListItems = new ArrayList<>();\r\n    private Bitmap selectedLogo;\r\n    private boolean updateLogo = false;\r\n    private Uri mCropImageUri;\r\n    AlertDialog.Builder alertDialogBuilder;\r\n    private String loadDefaultFont = \"\";\r\n    private FooterModel selectedFooterModel;\r\n    float scalediff;\r\n    ArrayList<FrameItem> brandListItems = new ArrayList<>();\r\n    int isDownloadOrSharingOrFavPending = -1;\r\n\r\n    private ScaleGestureDetector scaleGestureDetector;\r\n\r\n    private boolean isUsingCustomFrame = true;\r\n    private ImageList selectedBackendFrame = null;\r\n    private int previousFontSize = -1;\r\n    int editorFragment;\r\n    private boolean isLoadItalic = false;\r\n    private boolean isLoadBold = false;\r\n    ArrayList<ImageList> menuModels = new ArrayList<>();\r\n    private int colorCodeForTextColor = 0;\r\n    private ImageList selectedObject;\r\n\r\n    int mode = NONE;\r\n     private int colorCodeForBackground = 0;\r\n    Gson gson;\r\n    public DBManager dbManager;\r\n     boolean canLoadImage = false;\r\n    boolean fromViewAll = false;\r\n    private float DefaultScaleX;\r\n    private float DefaultScaleY;\r\n\r\n\r\n    int CurrentFlagAlign = 1;\r\n    private int selectedTextAlignment;\r\n\r\n    public void setIconForAlignment() {\r\n\r\n        binding.editingBox.setTextAlignment(View.TEXT_ALIGNMENT_CENTER);\r\n        binding.textAlignment.setImageDrawable(ContextCompat.getDrawable(act, R.drawable.ic_centered_align));\r\n        binding.editingBox.setGravity(android.view.Gravity.CENTER);\r\n        binding.textAlignment.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n\r\n                if (CurrentFlagAlign == 0) {\r\n                    binding.textAlignment.setImageDrawable(ContextCompat.getDrawable(act, R.drawable.ic_centered_align));\r\n                    CurrentFlagAlign = 1;\r\n                    binding.editingBox.setTextAlignment(View.TEXT_ALIGNMENT_CENTER);\r\n                    selectedTextAlignment = View.TEXT_ALIGNMENT_CENTER;\r\n                    binding.editingBox.setGravity(android.view.Gravity.CENTER);\r\n                } else if (CurrentFlagAlign == 1) {\r\n                    binding.textAlignment.setImageDrawable(ContextCompat.getDrawable(act, R.drawable.ic_right_align));\r\n                    CurrentFlagAlign = 2;\r\n                    selectedTextAlignment = View.TEXT_ALIGNMENT_TEXT_END;\r\n                    binding.editingBox.setTextAlignment(View.TEXT_ALIGNMENT_TEXT_END);\r\n                    binding.editingBox.setGravity(android.view.Gravity.RIGHT | android.view.Gravity.CENTER);\r\n                } else if (CurrentFlagAlign == 2) {\r\n                    binding.textAlignment.setImageDrawable(ContextCompat.getDrawable(act, R.drawable.ic_left_align));\r\n                    CurrentFlagAlign = 0;\r\n                    selectedTextAlignment = View.TEXT_ALIGNMENT_TEXT_START;\r\n                    binding.editingBox.setTextAlignment(View.TEXT_ALIGNMENT_TEXT_START);\r\n                    binding.editingBox.setGravity(android.view.Gravity.LEFT | android.view.Gravity.CENTER);\r\n                }\r\n            }\r\n        });\r\n\r\n\r\n    }\r\n\r\n    @SuppressLint(\"ClickableViewAccessibility\")\r\n    @Override\r\n    public void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setTheme(R.style.AppTheme_material_theme);\r\n        binding = DataBindingUtil.setContentView(act, R.layout.activity_view_all_frame_image);\r\n        gson = new Gson();\r\n        dbManager = new DBManager(act);\r\n        selectedObject = gson.fromJson(getIntent().getStringExtra(\"selectedimage\"), ImageList.class);\r\n\r\n        setIconForAlignment();\r\n\r\n\r\n        CreateTabs();\r\n\r\n        DefaultScaleY = binding.editableImageview.getScaleY();\r\n        DefaultScaleX = binding.editableImageview.getScaleX();\r\n\r\n        binding.editableImageview.getLayoutParams().height = 150;\r\n        binding.editableImageview.getLayoutParams().width = 150;\r\n        binding.editableImageview.requestLayout();\r\n\r\n        DashBoardItem imageList = gson.fromJson(getIntent().getStringExtra(\"detailsObj\"), DashBoardItem.class);\r\n        binding.titleName.setText(imageList.getName());\r\n\r\n        binding.backImage.setDrawingCacheEnabled(true);\r\n\r\n        gestureDetector = new GestureDetector(this, new SingleTapConfirm());\r\n\r\n\r\n        TouchImageMotion();\r\n        GradientDrawable drawable = (GradientDrawable) binding.elementCustomFrame.getBackground();\r\n        drawable.setStroke((int) convertDpToPx(0), colorCodeForBackground);\r\n\r\n\r\n        if (prefManager.getActiveBrand() != null) {\r\n            updateLogo = prefManager.getActiveBrand().getLogo().isEmpty();\r\n        }\r\n\r\n\r\n        colorCodeForBackground = ContextCompat.getColor(act, R.color.colorPrimary);\r\n        // colorCodeForTextColor= ContextCompat.getColor(act,R.color.colorPrimary);\r\n        binding.logoEmptyState.setOnTouchListener(onTouchListener());\r\n        binding.logoCustom.setOnTouchListener(onTouchListener());\r\n        gestureDetector = new GestureDetector(this, new SingleTapConfirm());\r\n        scaleGestureDetector = new ScaleGestureDetector(this, new ScaleListener());\r\n        binding.backIcon.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                onBackPressed();\r\n            }\r\n        });\r\n        if (!prefManager.getAppTutorial().isEmpty()) {\r\n            binding.videoTutorial.setVisibility(View.VISIBLE);\r\n        }\r\n        binding.videoTutorial.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                Intent i = new Intent(act, AppIntroActivity.class);\r\n                startActivity(i);\r\n                act.overridePendingTransition(R.anim.slide_right_in, R.anim.slide_right_out);\r\n            }\r\n        });\r\n\r\n\r\n        binding.shareIcon.setOnClickListener(new View.OnClickListener() {\r\n            @RequiresApi(api = Build.VERSION_CODES.O)\r\n            @Override\r\n            public void onClick(View v) {\r\n                if (prefManager.getActiveBrand() != null) {\r\n                    if (manuallyEnablePermission(1)) {\r\n\r\n                        if (!Utility.isUserPaid(prefManager.getActiveBrand())) {\r\n\r\n                            if (selectedObject.isImageFree()) {\r\n                                if (isUsingCustomFrame && selectedFooterModel != null && !selectedFooterModel.isFree()) {\r\n                                    askForUpgradeToEnterpisePackage();\r\n                                    return;\r\n                                }\r\n                                requestAgain();\r\n                                saveImageToGallery(true, false);\r\n                                if (prefManager.getActiveBrand().getLogo().isEmpty() && selectedLogo != null) {\r\n                                    uploadLogoForBrand(selectedLogo);\r\n                                }\r\n                            } else {\r\n                                askForPayTheirPayment(\"You have selected premium design. To use this design please upgrade your package\");\r\n                            }\r\n                        } else {\r\n                            if (!Utility.isPackageExpired(act)) {\r\n                                requestAgain();\r\n                                saveImageToGallery(true, false);\r\n                                if (prefManager.getActiveBrand().getLogo().isEmpty() && selectedLogo != null) {\r\n                                    uploadLogoForBrand(selectedLogo);\r\n                                }\r\n                            } else {\r\n                                askForUpgradeToEnterpisePackaged();\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                }else{\r\n                    addBrandList();\r\n                }\r\n            }\r\n        });\r\n        LoadDataToUI();\r\n\r\n        if (prefManager.getActiveBrand() != null) {\r\n            if (prefManager.getActiveBrand().getLogo() != null && !prefManager.getActiveBrand().getLogo().isEmpty()) {\r\n                binding.logoEmptyState.setVisibility(View.GONE);\r\n                binding.logoCustom.setVisibility(View.VISIBLE);\r\n                binding.logoCustom.setVisibility(View.VISIBLE);\r\n                Glide.with(act)\r\n                        .load(prefManager.getActiveBrand().getLogo())\r\n                        .override(1600, 1600)\r\n                        .into(binding.logoCustom);\r\n                binding.logoCustom.setOnClickListener(new View.OnClickListener() {\r\n                    @Override\r\n                    public void onClick(View view) {\r\n                        onSelectImageClick(view);\r\n                    }\r\n                });\r\n            } else {\r\n                binding.logoEmptyState.setVisibility(View.VISIBLE);\r\n                binding.logoCustom.setVisibility(View.GONE);\r\n                binding.logoCustom.setOnClickListener(new View.OnClickListener() {\r\n                    @Override\r\n                    public void onClick(View view) {\r\n                        onSelectImageClick(view);\r\n                    }\r\n                });\r\n            }\r\n        } else {\r\n            binding.logoCustom.setVisibility(View.GONE);\r\n            binding.logoEmptyState.setVisibility(View.GONE);\r\n        }\r\n\r\n\r\n        if (!getIntent().hasExtra(\"viewAll\"))\r\n            LoadDataToUI();\r\n\r\n        binding.done.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                if (isTextEditing) {\r\n                    binding.textEditorView.setVisibility(View.GONE);\r\n                    binding.contentView.setEnabled(true);\r\n                    binding.contentView.setClickable(true);\r\n                    InputMethodManager imm = (InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE);\r\n                    imm.hideSoftInputFromWindow(binding.rootBackground.getWindowToken(), 0);\r\n                    if (binding.editingBox.getText().toString().trim().length() != 0) {\r\n                        selectedTextView.setText(binding.editingBox.getText().toString());\r\n                        selectedTextView.setTextAlignment(selectedTextAlignment);\r\n                    } else {\r\n                        binding.CustomImageMain.removeView(selectedTextView);\r\n                    }\r\n                } else {\r\n                    binding.textEditorView.setVisibility(View.GONE);\r\n                    binding.contentView.setEnabled(true);\r\n                    binding.contentView.setClickable(true);\r\n                    InputMethodManager imm = (InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE);\r\n                    imm.hideSoftInputFromWindow(binding.rootBackground.getWindowToken(), 0);\r\n                    addTextViewToLayout(binding.editingBox.getText().toString());\r\n                }\r\n                binding.editingBox.setText(\"\");\r\n            }\r\n        });\r\n        binding.recommendation.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                selectedTextView = null;\r\n                selectedForEdit = null;\r\n                for (int i = 0; i < binding.CustomImageMain.getChildCount(); i++) {\r\n                    if (binding.CustomImageMain.getChildAt(i) instanceof TextView) {\r\n                        InputMethodManager imm = (InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE);\r\n                        imm.hideSoftInputFromWindow(binding.rootBackground.getWindowToken(), 0);\r\n                        TextView textView = (TextView) binding.CustomImageMain.getChildAt(i);\r\n                        textView.setBackground(null);\r\n                    }\r\n                }\r\n\r\n            }\r\n        });\r\n        binding.logoCustom.setTag(\"0\");\r\n\r\n    }\r\n    AddBrandFragment addBrandFragment;\r\n    public void addBrandList() {\r\n        if (addBrandFragment!=null){\r\n            if (addBrandFragment.isVisible()){\r\n                addBrandFragment.dismiss();\r\n            }\r\n        }\r\n\r\n        addBrandFragment = new AddBrandFragment();\r\n        addBrandFragment.show(getSupportFragmentManager(), \"\");\r\n    }\r\n\r\n    DialogUpgradeLayoutPackegeExpiredBindingImpl expriredBinding;\r\n\r\n    public void askForUpgradeToEnterpisePackaged() {\r\n        expriredBinding = DataBindingUtil.inflate(LayoutInflater.from(act), R.layout.dialog_upgrade_layout_packege_expired, null, false);\r\n        androidx.appcompat.app.AlertDialog.Builder builder = new androidx.appcompat.app.AlertDialog.Builder(act, R.style.MyAlertDialogStyle_extend);\r\n        builder.setView(expriredBinding.getRoot());\r\n        androidx.appcompat.app.AlertDialog alertDialog = builder.create();\r\n        alertDialog.setContentView(expriredBinding.getRoot());\r\n\r\n        expriredBinding.viewPackage.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                alertDialog.dismiss();\r\n                Intent intent = new Intent(act, PackageActivity.class);\r\n                intent.putExtra(\"Profile\", \"1\");\r\n\r\n                act.startActivity(intent);\r\n                act.overridePendingTransition(R.anim.slide_right_in, R.anim.slide_right_out);\r\n            }\r\n        });\r\n        expriredBinding.closeBtn.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                alertDialog.dismiss();\r\n            }\r\n        });\r\n        expriredBinding.element3.setText(\"Please Upgrade your account for download more images\");\r\n        //alertDialog.setCancelable(false);\r\n        alertDialog.getWindow().setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));\r\n        alertDialog.show();\r\n    }\r\n\r\n\r\n    abstract class DoubleClickListener implements View.OnClickListener {\r\n        long lastClickTime = 0;\r\n        long DOUBLE_CLICK_TIME_DELTA = 500;\r\n\r\n        @Override\r\n        public void onClick(View v) {\r\n            long clickTime = System.currentTimeMillis();\r\n\r\n            if (clickTime - lastClickTime < DOUBLE_CLICK_TIME_DELTA) {\r\n                onDoubleClick(v);\r\n            } else {\r\n                onSingleClick(v);\r\n            }\r\n            lastClickTime = clickTime;\r\n\r\n        }\r\n\r\n        protected abstract void onDoubleClick(View v);\r\n\r\n        protected abstract void onSingleClick(View v);\r\n    }\r\n\r\n\r\n    private boolean isTextEditing = false;\r\n    private TextView selectedTextView;\r\n\r\n    public void addTextViewToLayout(String string) {\r\n\r\n        if (selectedForEdit != null)\r\n            selectedForEdit.setBackground(null);\r\n\r\n        TextView textView = new TextView(act, null);\r\n        RelativeLayout mRlayout = (RelativeLayout) findViewById(R.id.CustomImageMain);\r\n        RelativeLayout.LayoutParams mRparams = new RelativeLayout.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT);\r\n        mRparams.leftMargin = 200;\r\n        mRparams.topMargin = 600;\r\n        textView.setPadding(20, 20, 20, 20);\r\n        textView.setLayoutParams(mRparams);\r\n        textView.setText(string);\r\n        textView.setTextColor(Color.parseColor(\"#0C0C0C\"));\r\n        textView.setTextSize(13);\r\n        Typeface face = Typeface.createFromAsset(getAssets(), \"font/inter_semibold.otf\");\r\n        textView.setTypeface(face);\r\n        textView.setTextAlignment(selectedTextAlignment);\r\n        //textView.setBackgroundTintList(ColorStateList.valueOf(Color.TRANSPARENT));\r\n        textView.setOnTouchListener(onTouchListeneForEditText());\r\n        mRlayout.addView(textView);\r\n        textView.setOnClickListener(new DoubleClickListener() {\r\n            @Override\r\n            protected void onDoubleClick(View v) {\r\n              /*  isTextEditing=true;\r\n                binding.textEditorView.setVisibility(View.VISIBLE);\r\n                binding.contentView.setEnabled(false);\r\n                selectedTextView = textView;\r\n                binding.editingBox.setText(textView.getText().toString());*/\r\n            }\r\n\r\n            @Override\r\n            protected void onSingleClick(View v) {\r\n                selectedTextView = textView;\r\n                textView.setBackground(ContextCompat.getDrawable(act, R.drawable.editing_text_border));\r\n            }\r\n        });\r\n\r\n\r\n    }\r\n\r\n    @Override\r\n    public void onAddTextTrigger() {\r\n        CurrentFlagAlign = 1;\r\n        binding.editingBox.setTextAlignment(View.TEXT_ALIGNMENT_CENTER);\r\n        binding.textAlignment.setImageDrawable(ContextCompat.getDrawable(act, R.drawable.ic_centered_align));\r\n        selectedTextAlignment = View.TEXT_ALIGNMENT_TEXT_START;\r\n        binding.editingBox.setGravity(android.view.Gravity.CENTER);\r\n\r\n\r\n        isTextEditing = false;\r\n        binding.textEditorView.setVisibility(View.VISIBLE);\r\n        binding.contentView.setEnabled(false);\r\n        binding.contentView.setClickable(false);\r\n    }\r\n\r\n    public void askForDownloadImage() {\r\n        alertDialogBuilder = new AlertDialog.Builder(act);\r\n        alertDialogBuilder.setTitle(\"Save image\");\r\n        alertDialogBuilder.setMessage(\"You sure to save your image?\");\r\n        alertDialogBuilder.setPositiveButton(\"yes\",\r\n                (arg0, arg1) -> {\r\n                    requestAgain();\r\n                    saveImageToGallery(false, false);\r\n                });\r\n        alertDialogBuilder.setNegativeButton(\"No\", new DialogInterface.OnClickListener() {\r\n            public void onClick(DialogInterface dialog, int which) {\r\n                dialog.dismiss();\r\n            }\r\n        });\r\n\r\n        AlertDialog alertDialog = alertDialogBuilder.create();\r\n        alertDialog.setCancelable(false);\r\n        alertDialog.show();\r\n    }\r\n\r\n    private int IntroCounter = 0;\r\n\r\n    public void startIntro(View view, String title, String desc) {\r\n\r\n        new GuideView.Builder(this)\r\n                .setTitle(title)\r\n                .setContentText(desc)\r\n                .setGravity(Gravity.center)\r\n                .setDismissType(DismissType.anywhere)\r\n                .setTargetView(view)\r\n                .setContentTextSize(12)\r\n                .setTitleTextSize(14)\r\n                .setGuideListener(new GuideListener() {\r\n                    @Override\r\n                    public void onDismiss(View view) {\r\n                        IntroCounter++;\r\n                        showTabIntro(binding.viewPager.getChildAt(0), \"Category\", \"Choose your image as you want\");\r\n                    }\r\n                })\r\n                .build()\r\n                .show();\r\n    }\r\n\r\n    int tabIndex = 1;\r\n    boolean needToIntro = false;\r\n\r\n    public void showTabIntro(View view, String title, String desc) {\r\n\r\n        new GuideView.Builder(this)\r\n                .setTitle(title)\r\n                .setContentText(desc)\r\n                .setGravity(Gravity.center)\r\n                .setDismissType(DismissType.anywhere)\r\n                .setTargetView(view)\r\n                .setContentTextSize(12)\r\n                .setTitleTextSize(14)\r\n                .setGuideListener(new GuideListener() {\r\n                    @Override\r\n                    public void onDismiss(View view) {\r\n                        binding.viewPager.setCurrentItem(tabIndex);\r\n                        tabIndex++;\r\n                    }\r\n                })\r\n                .build()\r\n                .show();\r\n    }\r\n\r\n    @Override\r\n    public void update(Observable observable, Object data) {\r\n        super.update(observable, data);\r\n        if (MakeMyBrandApp.getInstance().getObserver().getValue() == ObserverActionID.GALLERY_CALLBACK) {\r\n            runOnUiThread(new Runnable() {\r\n                @Override\r\n                public void run() {\r\n\r\n                    screenExistDialog();\r\n\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    public void CreateTabs() {\r\n        binding.tabLayout.addTab(binding.tabLayout.newTab().setText(convertFirstUpper(\"Post\")));\r\n        binding.tabLayout.addTab(binding.tabLayout.newTab().setText(convertFirstUpper(\"Footer\")));\r\n        binding.tabLayout.addTab(binding.tabLayout.newTab().setText(convertFirstUpper(\"Gallery\")));\r\n        binding.tabLayout.addTab(binding.tabLayout.newTab().setText(convertFirstUpper(\"Frames\")));\r\n        binding.tabLayout.addTab(binding.tabLayout.newTab().setText(convertFirstUpper(\"Background\")));\r\n        binding.tabLayout.addTab(binding.tabLayout.newTab().setText(convertFirstUpper(\"Text\")));\r\n        binding.tabLayout.addTab(binding.tabLayout.newTab().setText(convertFirstUpper(\"Edit\")));\r\n        binding.tabLayout.setTabTextColors(Color.parseColor(\"#727272\"), Color.parseColor(\"#ad2753\"));\r\n        binding.tabLayout.setTabGravity(TabLayout.GRAVITY_FILL);\r\n        final ViewAllTopCustomeFrameTabAdapter adapter = new ViewAllTopCustomeFrameTabAdapter(act, getSupportFragmentManager(), binding.tabLayout.getTabCount());\r\n\r\n        if (getIntent().hasExtra(\"viewAll\"))\r\n            adapter.setViewAll(true);\r\n\r\n        binding.viewPager.setAdapter(adapter);\r\n        binding.viewPager.setOffscreenPageLimit(6);\r\n        binding.viewPager.addOnPageChangeListener(new TabLayout.TabLayoutOnPageChangeListener(binding.tabLayout));\r\n        binding.tabLayout.addOnTabSelectedListener(new TabLayout.OnTabSelectedListener() {\r\n            @Override\r\n            public void onTabSelected(TabLayout.Tab tab) {\r\n                binding.viewPager.setCurrentItem(tab.getPosition());\r\n                editorFragment = tab.getPosition();\r\n                if (editorFragment == 2) {\r\n                    canLoadImage = true;\r\n                }\r\n                if (needToIntro) {\r\n                    if (tabIndex == 1) {\r\n                        showTabIntro(binding.viewPager, \"Footer\", \"if you want to custom frame then choose your own footer\");\r\n                    }\r\n\r\n                    if (tabIndex == 2) {\r\n                        showTabIntro(binding.viewPager, \"Image\", \"Choose your image as you want\");\r\n                    }\r\n                    if (tabIndex == 3) {\r\n                        showTabIntro(binding.viewPager, \"Frames\", \"Apply custom frame\");\r\n                    }\r\n\r\n                    if (tabIndex == 4) {\r\n                        showTabIntro(binding.viewPager, \"Background\", \"Choose your background color as you want\");\r\n                    }\r\n                    if (tabIndex == 5) {\r\n                        showTabIntro(binding.viewPager, \"Text\", \"Change your text and icon color as u want\");\r\n\r\n                    }\r\n                    if (tabIndex == 6) {\r\n                        showTabIntro(binding.viewPager, \"Edit\", \"Change your image filter as u want\");\r\n                        needToIntro = false;\r\n                    }\r\n\r\n\r\n                }\r\n\r\n                InputMethodManager imm = (InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE);\r\n                imm.hideSoftInputFromWindow(binding.rootBackground.getWindowToken(), 0);\r\n            }\r\n\r\n            @Override\r\n            public void onTabUnselected(TabLayout.Tab tab) {\r\n            }\r\n\r\n            @Override\r\n            public void onTabReselected(TabLayout.Tab tab) {\r\n            }\r\n        });\r\n\r\n\r\n        if (prefManager.getViewAllFrameActivityIntro()) {\r\n            needToIntro = true;\r\n\r\n            if (binding.logoEmptyState.getVisibility() == View.VISIBLE)\r\n                startIntro(binding.logoEmptyState, \"Brand Logo\", \"Click on icon for choose your logo\\n you can resize and move logo around anywhere in the image\");\r\n            else\r\n                startIntro(binding.logoCustom, \"Brand Logo\", \"Click your logo to move around anywhere in the image\");\r\n\r\n            prefManager.setViewAllFrameActivityIntro(false);\r\n\r\n        } else {\r\n            //showTabIntro(binding.viewPager.getChildAt(0), \"Category\", \"Choose your image as you want\");\r\n        }\r\n\r\n\r\n    }\r\n\r\n    //load firstImage\r\n    public void loadFirstImage() {\r\n\r\n        FooterModel model = new FooterModel();\r\n        model.setLayoutType(FooterModel.LAYOUT_FRAME_SEVEN);\r\n        model.setFree(true);\r\n        if (prefManager.getActiveBrand() != null) {\r\n            model.setAddress(prefManager.getActiveBrand().getAddress());\r\n            model.setEmailId(prefManager.getActiveBrand().getEmail());\r\n            model.setContactNo(prefManager.getActiveBrand().getPhonenumber());\r\n            model.setWebsite(prefManager.getActiveBrand().getWebsite());\r\n        }\r\n        ((onFooterSelectListener) act).onFooterSelectEvent(FooterModel.LAYOUT_FRAME_SEVEN, model);\r\n    }\r\n\r\n    //For CustomFrame\r\n    public void onSelectImageClick(View view) {\r\n        if (binding.logoCustom.getTag().toString().equalsIgnoreCase(\"1\"))\r\n            pickerView(true, selectedLogo);\r\n        else\r\n            pickerView(false, null);\r\n\r\n        //CropImage.startPickImageActivity(this);\r\n    }\r\n\r\n    private void pickerView(boolean viewMode, Bitmap selectedBitmap) {\r\n        PickerFragment pickerFragment = new PickerFragment(act);\r\n        pickerFragment.setEnableViewMode(viewMode);\r\n        pickerFragment.setActionId(Constant.PICKER_FIRST);\r\n\r\n        if (viewMode) {\r\n            pickerFragment.setSelectedBitmapForFullView(selectedBitmap);\r\n        }\r\n        PickerFragment.HandlerImageLoad imageLoad = new PickerFragment.HandlerImageLoad() {\r\n            @Override\r\n            public void onGalleryResult(int flag, Bitmap bitmap) {\r\n                if (flag == Constant.PICKER_FIRST) {\r\n                    selectedLogo = bitmap;\r\n                    binding.logoCustom.setTag(\"1\");\r\n                    binding.logoCustom.setImageBitmap(bitmap);\r\n                    binding.logoCustom.setVisibility(View.VISIBLE);\r\n                    binding.logoEmptyState.setVisibility(View.GONE);\r\n                }\r\n\r\n            }\r\n        };\r\n        pickerFragment.setImageLoad(imageLoad);\r\n        pickerFragment.show(getSupportFragmentManager(), pickerFragment.getTag());\r\n    }\r\n\r\n    @SuppressLint(\"ClickableViewAccessibility\")\r\n    public void LoadDataToUI() {\r\n\r\n        prefManager = new PreafManager(act);\r\n        if (selectedObject != null) {\r\n            selectedObject.setTextX_Cordinate(\"100\");\r\n            selectedObject.setTextY_Cordinate(\"100\");\r\n            if (selectedObject.getX_conrdinate() == null || selectedObject.getX_conrdinate().equalsIgnoreCase(\"null\") || selectedObject.getX_conrdinate().isEmpty()) {\r\n                selectedObject.setX_conrdinate(String.valueOf(\"330\"));\r\n                selectedObject.setY_cordinate(String.valueOf(\"380\"));\r\n//                selectedObject.setTextX_Cordinate(\"100\");\r\n//                selectedObject.setTextY_Cordinate(\"100\");\r\n            }\r\n            if (selectedObject.getIndex() == 15) {\r\n                selectedObject.setX_conrdinate(String.valueOf(\"520\"));\r\n                selectedObject.setY_cordinate(String.valueOf(\"280\"));\r\n//                selectedObject.setTextX_Cordinate(\"100\");\r\n//                selectedObject.setTextY_Cordinate(\"260\");\r\n            }\r\n            if (selectedObject.getIndex() == 14) {\r\n                selectedObject.setX_conrdinate(String.valueOf(\"400\"));\r\n                selectedObject.setY_cordinate(String.valueOf(\"330\"));\r\n//                selectedObject.setTextX_Cordinate(\"220\");\r\n//                selectedObject.setTextY_Cordinate(\"280\");\r\n            }\r\n            if (selectedObject.getIndex() == 13) {\r\n                selectedObject.setX_conrdinate(String.valueOf(\"350\"));\r\n                selectedObject.setY_cordinate(String.valueOf(\"290\"));\r\n//                selectedObject.setTextX_Cordinate(\"230\");\r\n//                selectedObject.setTextY_Cordinate(\"280\");\r\n            }\r\n            if (selectedObject.getIndex() == 12) {\r\n                selectedObject.setX_conrdinate(String.valueOf(\"250\"));\r\n                selectedObject.setY_cordinate(String.valueOf(\"270\"));\r\n//                selectedObject.setTextX_Cordinate(\"50\");\r\n//                selectedObject.setTextY_Cordinate(\"250\");\r\n            }\r\n\r\n            if (selectedObject.getIndex() == 11) {\r\n                selectedObject.setX_conrdinate(String.valueOf(\"250\"));\r\n                selectedObject.setY_cordinate(String.valueOf(\"380\"));\r\n//                selectedObject.setTextX_Cordinate(\"250\");\r\n//                selectedObject.setTextY_Cordinate(\"250\");\r\n\r\n            }\r\n            if (selectedObject.getIndex() == 10) {\r\n                selectedObject.setX_conrdinate(String.valueOf(\"450\"));\r\n                selectedObject.setY_cordinate(String.valueOf(\"200\"));\r\n//                selectedObject.setTextX_Cordinate(\"50\");\r\n//                selectedObject.setTextY_Cordinate(\"250\");\r\n            }\r\n\r\n            if (selectedObject.getIndex() == 9) {\r\n//                selectedObject.setTextX_Cordinate(\"50\");\r\n//                selectedObject.setTextY_Cordinate(\"280\");\r\n            }\r\n\r\n//            if (selectedObject.getIndex() == 7){\r\n//                selectedObject.setTextX_Cordinate(\"50\");\r\n//                selectedObject.setTextY_Cordinate(\"250\");\r\n//            }\r\n\r\n\r\n            binding.simpleProgressBar.setVisibility(View.GONE);\r\n            Glide.with(getApplicationContext()).load(selectedObject.getFrame()).into(binding.backImage);\r\n\r\n            RelativeLayout.LayoutParams layoutParams = new RelativeLayout.LayoutParams(250, 250);\r\n//            int WeidthRefDevice=1080;\r\n//            int HeightRefDevice=2028;\r\n            int dpValuex = Integer.parseInt(selectedObject.getX_conrdinate());\r\n            int dpValuey = Integer.parseInt(selectedObject.getY_cordinate()); //margin in dips\r\n            DisplayMetrics displayMetrics = new DisplayMetrics();\r\n            getWindowManager().getDefaultDisplay().getMetrics(displayMetrics);\r\n            int height = displayMetrics.heightPixels;\r\n            int width = displayMetrics.widthPixels;\r\n\r\n            binding.editableImageview.setOnTouchListener(null);\r\n            Resources r = getResources();\r\n            int marginx = Math.round(TypedValue.applyDimension(\r\n                    TypedValue.COMPLEX_UNIT_DIP, dpValuex, r.getDisplayMetrics()));\r\n            ;//(int)((dpValuex * width)/WeidthRefDevice);  // margin in pixels\r\n            int marginy = Math.round(TypedValue.applyDimension(\r\n                    TypedValue.COMPLEX_UNIT_DIP, dpValuey, r.getDisplayMetrics()));\r\n            ;//(int)((dpValuey * height)/HeightRefDevice);  // margin in pixels\r\n\r\n            layoutParams.leftMargin = marginx;\r\n            layoutParams.topMargin = marginy;\r\n            layoutParams.bottomMargin = -250;\r\n            layoutParams.rightMargin = -250;\r\n\r\n\r\n            layoutParams = new RelativeLayout.LayoutParams(200, 200);\r\n            int WeidthRefDevice = 1080;\r\n            int HeightRefDevice = 2028;\r\n            dpValuex = Integer.parseInt(selectedObject.getX_conrdinate()); // margin in dips\r\n            dpValuey = Integer.parseInt(selectedObject.getY_cordinate()); // margin in dips\r\n            displayMetrics = new DisplayMetrics();\r\n            getWindowManager().getDefaultDisplay().getMetrics(displayMetrics);\r\n            height = displayMetrics.heightPixels;\r\n            width = displayMetrics.widthPixels;\r\n            marginx = (int) ((dpValuex * width) / WeidthRefDevice); // margin in pixels\r\n            marginy = (int) ((dpValuey * height) / HeightRefDevice); // margin in pixels\r\n            layoutParams.leftMargin = marginx;\r\n            layoutParams.topMargin = marginy;\r\n            layoutParams.bottomMargin = -250;\r\n            layoutParams.rightMargin = -250;\r\n            binding.editableImageview.setOnTouchListener(null);\r\n            layoutParams.height = 200;\r\n            layoutParams.width = 200;\r\n            binding.editableImageview.setScaleX(DefaultScaleX);\r\n            binding.editableImageview.setScaleY(DefaultScaleY);\r\n            binding.editableImageview.setRotation(0);\r\n            binding.editableImageview.setLayoutParams(layoutParams);\r\n            binding.editableImageview.setVisibility(View.VISIBLE);\r\n            binding.backImage.setVisibility(View.VISIBLE);\r\n            selectedImageBitmap = drawableToBitmap(ContextCompat.getDrawable(act, R.drawable.ic_gallry));\r\n            binding.editableImageview.setImageBitmap(selectedImageBitmap);\r\n\r\n\r\n            binding.editableImageview.requestLayout();\r\n\r\n            binding.editableImageview.setOnTouchListener(new View.OnTouchListener() {\r\n                @SuppressLint(\"ClickableViewAccessibility\")\r\n                @Override\r\n                public boolean onTouch(View view, MotionEvent motionEvent) {\r\n                    binding.viewPager.setCurrentItem(2);\r\n                    TouchImageMotion();\r\n                    return false;\r\n                }\r\n            });\r\n\r\n\r\n        } else {\r\n            // binding.simpleProgressBar.setVisibility(View.VISIBLE);\r\n        }\r\n        if (prefManager.getActiveBrand() != null) {\r\n            if (selectedFooterModel == null)\r\n                loadFirstImage();\r\n        }\r\n    }\r\n\r\n    //For adepter\r\n    public void setAdapter() {\r\n        ImageCategoryAddaptor menuAddaptor = new ImageCategoryAddaptor(menuModels, act);\r\n        menuAddaptor.setLayoutType(FROM_VIEWALL);\r\n        RecyclerView.LayoutManager mLayoutManager = new GridLayoutManager(this, 4);\r\n        binding.viewRecoRecycler.setLayoutManager(mLayoutManager);\r\n        binding.viewRecoRecycler.setHasFixedSize(true);\r\n        binding.viewRecoRecycler.setAdapter(menuAddaptor);\r\n\r\n\r\n    }\r\n\r\n    //For Image Select Interface\r\n    @Override\r\n    public void ImageCateonItemSelection(int position, ImageList listModel) {\r\n        selectedObject = listModel;\r\n        LoadDataToUI();\r\n        RelativeLayout.LayoutParams layoutParams = new RelativeLayout.LayoutParams(200, 200);\r\n        int WeidthRefDevice = 1080;\r\n        int HeightRefDevice = 2028;\r\n        int dpValuex = Integer.parseInt(selectedObject.getX_conrdinate()); // margin in dips\r\n        int dpValuey = Integer.parseInt(selectedObject.getY_cordinate()); // margin in dips\r\n        DisplayMetrics displayMetrics = new DisplayMetrics();\r\n        getWindowManager().getDefaultDisplay().getMetrics(displayMetrics);\r\n        int height = displayMetrics.heightPixels;\r\n        int width = displayMetrics.widthPixels;\r\n        int marginx = (int) ((dpValuex * width) / WeidthRefDevice); // margin in pixels\r\n        int marginy = (int) ((dpValuey * height) / HeightRefDevice); // margin in pixels\r\n        layoutParams.leftMargin = marginx;\r\n        layoutParams.topMargin = marginy;\r\n        layoutParams.bottomMargin = -250;\r\n        layoutParams.rightMargin = -250;\r\n        binding.editableImageview.setOnTouchListener(null);\r\n        layoutParams.height = 200;\r\n        layoutParams.width = 200;\r\n        binding.editableImageview.setScaleX(DefaultScaleX);\r\n        binding.editableImageview.setScaleY(DefaultScaleY);\r\n        binding.editableImageview.setRotation(0);\r\n        binding.editableImageview.setLayoutParams(layoutParams);\r\n        binding.editableImageview.setVisibility(View.VISIBLE);\r\n        binding.backImage.setVisibility(View.VISIBLE);\r\n        selectedImageBitmap = drawableToBitmap(ContextCompat.getDrawable(act, R.drawable.ic_gallry));\r\n        binding.editableImageview.setImageBitmap(selectedImageBitmap);\r\n        binding.editableImageview.requestLayout();\r\n        binding.editableImageview.setOnTouchListener(new View.OnTouchListener() {\r\n            @SuppressLint(\"ClickableViewAccessibility\")\r\n            @Override\r\n            public boolean onTouch(View view, MotionEvent motionEvent) {\r\n                binding.viewPager.setCurrentItem(2);\r\n                TouchImageMotion();\r\n                return false;\r\n            }\r\n        });\r\n\r\n\r\n        binding.simpleProgressBar.setVisibility(View.GONE);\r\n        if (prefManager.getActiveBrand() != null) {\r\n            if (selectedFooterModel == null)\r\n                loadFirstImage();\r\n\r\n            forCheckFavorite();\r\n        }\r\n\r\n    }\r\n\r\n    //For GetFrame\r\n    @Override\r\n    public void alertListenerClick() {\r\n        requestAgain();\r\n    }\r\n\r\n    private void requestAgain() {\r\n        ActivityCompat.requestPermissions(act,\r\n                new String[]{Manifest.permission.CAMERA, Manifest.permission.WRITE_EXTERNAL_STORAGE,\r\n                        Manifest.permission.READ_EXTERNAL_STORAGE},\r\n                CodeReUse.ASK_PERMISSSION);\r\n    }\r\n\r\n    @Override\r\n    public void onBackPressed() {\r\n        if (binding.textEditorView.getVisibility() == View.VISIBLE) {\r\n            binding.textEditorView.setVisibility(View.GONE);\r\n            binding.contentView.setEnabled(true);\r\n            binding.contentView.setClickable(true);\r\n            InputMethodManager imm = (InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE);\r\n            imm.hideSoftInputFromWindow(binding.rootBackground.getWindowToken(), 1);\r\n            return;\r\n        }\r\n        if (editorFragment == 2) {\r\n            MakeMyBrandApp.getInstance().getObserver().setValue(ObserverActionID.GALLERY_ACTION);\r\n        } else {\r\n            screenExistDialog();\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void onDialogDismissed(int dialogId) {\r\n    }\r\n\r\n    @RequiresApi(api = Build.VERSION_CODES.M)\r\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\r\n\r\n        // handle result of pick image chooser\r\n        super.onActivityResult(requestCode, resultCode, data);\r\n        if (requestCode == CropImage.PICK_IMAGE_CHOOSER_REQUEST_CODE && resultCode == Activity.RESULT_OK) {\r\n            Uri imageUri = CropImage.getPickImageResultUri(this, data);\r\n\r\n            if (CropImage.isReadExternalStoragePermissionsRequired(this, imageUri)) {\r\n                mCropImageUri = imageUri;\r\n                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\r\n                    requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, 0);\r\n                }\r\n            } else {\r\n                startCropImageActivity(imageUri);\r\n            }\r\n        }\r\n\r\n        // handle result of CropImageActivity\r\n        if (requestCode == CropImage.CROP_IMAGE_ACTIVITY_REQUEST_CODE) {\r\n            CropImage.ActivityResult result = CropImage.getActivityResult(data);\r\n            if (resultCode == RESULT_OK) {\r\n                binding.logoCustom.setVisibility(View.VISIBLE);\r\n                binding.logoEmptyState.setVisibility(View.GONE);\r\n                ((ImageView) findViewById(R.id.logoCustom)).setImageURI(result.getUri());\r\n                ImageView imageView = ((ImageView) findViewById(R.id.logoCustom));\r\n                selectedLogo = ((BitmapDrawable) imageView.getDrawable()).getBitmap();\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void onRequestPermissionsResult(int requestCode, String permissions[], int[] grantResults) {\r\n        super.onRequestPermissionsResult(requestCode, permissions, grantResults);\r\n        if (mCropImageUri != null && grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {\r\n            // required permissions granted, start crop image activity\r\n            startCropImageActivity(mCropImageUri);\r\n        } else {\r\n            //   Toast.makeText(this, \"Cancelling, required permissions are not granted\", Toast.LENGTH_LONG).show();\r\n        }\r\n        if (requestCode == CodeReUse.ASK_PERMISSSION) {\r\n            if (isDownloadOrSharingOrFavPending != -1) {\r\n                //for favourit\r\n                if (isDownloadOrSharingOrFavPending == 0) {\r\n                    isDownloadOrSharingOrFavPending = -1;\r\n//                    if (binding.fabroutIcon.getVisibility() == View.VISIBLE) {\r\n//                        binding.fabroutIcon.setVisibility(View.GONE);\r\n//                        binding.addfabroutIcon.setVisibility(View.VISIBLE);\r\n//                    }\r\n\r\n                    saveImageToGallery(false, true);\r\n                }\r\n                //for download\r\n                if (ContextCompat.checkSelfPermission(act, Manifest.permission.WRITE_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED) {\r\n\r\n                    if (isDownloadOrSharingOrFavPending == 1) {\r\n                        //  Toast.makeText(act, \"fdggdgd\", Toast.LENGTH_SHORT).show();\r\n                        isDownloadOrSharingOrFavPending = -1;\r\n                        if (!Utility.isUserPaid(prefManager.getActiveBrand())) {\r\n                            //freee ------\r\n                            if (selectedObject.isImageFree()) {\r\n                                if (isUsingCustomFrame && selectedFooterModel != null && !selectedFooterModel.isFree()) {\r\n                                    askForUpgradeToEnterpisePackage();\r\n                                    return;\r\n                                }\r\n                                getImageDownloadRights(\"Download\");\r\n                            } else {\r\n                                askForPayTheirPayment(\"You have selected premium design. To use this design please upgrade your package\");\r\n                            }\r\n                        } else {\r\n                            //paid\r\n                     /*if (isUsingCustomFrame && selectedFooterModel != null && !selectedFooterModel.isFree()) {\r\n                            askForUpgradeToEnterpisePackage();\r\n                            return;\r\n                        }*/\r\n                            getImageDownloadRights(\"Download\");\r\n                        }\r\n                    }\r\n                    //for share\r\n                    if (isDownloadOrSharingOrFavPending == 2) {\r\n                        isDownloadOrSharingOrFavPending = -1;\r\n                        if (!Utility.isUserPaid(prefManager.getActiveBrand())) {\r\n                            if (selectedObject.isImageFree()) {\r\n                                if (isUsingCustomFrame && selectedFooterModel != null && !selectedFooterModel.isFree()) {\r\n                                    askForUpgradeToEnterpisePackage();\r\n                                    return;\r\n                                }\r\n                                getImageDownloadRights(\"Share\");\r\n                            } else {\r\n                                askForPayTheirPayment(\"You have selected premium design. To use this design please upgrade your package\");\r\n                            }\r\n                        } else {\r\n                            getImageDownloadRights(\"Share\");\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private static final String SAMPLE_CROPPED_IMAGE_NAME = \"SampleCropImage\";\r\n\r\n    private void startCropImageActivity(Uri imageUri) {\r\n        CropImage.activity(imageUri)\r\n                .setGuidelines(CropImageView.Guidelines.ON)\r\n                .setMultiTouchEnabled(true)\r\n                .setOutputCompressFormat(Bitmap.CompressFormat.PNG)\r\n                .start(this);\r\n\r\n    }\r\n\r\n    public static String convertFirstUpper(String str) {\r\n\r\n        if (str == null || str.isEmpty()) {\r\n            return str;\r\n        }\r\n        Utility.Log(\"FirstLetter\", str.substring(0, 1) + \"    \" + str.substring(1));\r\n        return str.substring(0, 1).toUpperCase() + str.substring(1);\r\n    }\r\n\r\n\r\n    public DialogUpgradeLayoutSecondBinding secondBinding;\r\n\r\n    public void askForPayTheirPayment(String msg) {\r\n        secondBinding = DataBindingUtil.inflate(LayoutInflater.from(act), R.layout.dialog_upgrade_layout_second, null, false);\r\n        androidx.appcompat.app.AlertDialog.Builder builder = new androidx.appcompat.app.AlertDialog.Builder(act, R.style.MyAlertDialogStyle_extend);\r\n        builder.setView(secondBinding.getRoot());\r\n        androidx.appcompat.app.AlertDialog alertDialog = builder.create();\r\n        alertDialog.setContentView(secondBinding.getRoot());\r\n        secondBinding.element3.setText(msg);\r\n        secondBinding.viewPackage.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                alertDialog.dismiss();\r\n                Intent intent = new Intent(act, PackageActivity.class);\r\n                intent.putExtra(\"Profile\", \"1\");\r\n\r\n                act.startActivity(intent);\r\n                act.overridePendingTransition(R.anim.slide_right_in, R.anim.slide_right_out);\r\n            }\r\n        });\r\n        secondBinding.closeBtn.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                alertDialog.dismiss();\r\n            }\r\n        });\r\n\r\n         alertDialog.setCancelable(false);\r\n        alertDialog.getWindow().setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));\r\n        alertDialog.show();\r\n    }\r\n\r\n    public static Uri getImageUri(Context inContext, Bitmap inImage) {\r\n        ByteArrayOutputStream bytes = new ByteArrayOutputStream();\r\n        inImage.compress(Bitmap.CompressFormat.JPEG, 100, bytes);\r\n        String path = MediaStore.Images.Media.insertImage(inContext.getContentResolver(), inImage, \"IMG_\" + Calendar.getInstance().getTime(), null);\r\n        return Uri.parse(path);\r\n    }\r\n\r\n    @Override\r\n    public void onImageFromGalaryItemSelection(int position, ImageFromGalaryModel listModel) {\r\n        if (canLoadImage) {\r\n            try {\r\n                imageFromGalaryModel = listModel;\r\n\r\n                binding.editableImageview.setVisibility(View.VISIBLE);\r\n                RelativeLayout.LayoutParams layoutParams = new RelativeLayout.LayoutParams(200, 200);\r\n                if (fromViewAll) {\r\n                    int WeigthRefDevice = 1080;\r\n                    int HeightRefDevice = 2028;\r\n                    int dpValuex = Integer.parseInt(selectedObject.getX_conrdinate()); // margin in dips\r\n                    int dpValuey = Integer.parseInt(selectedObject.getY_cordinate()); // margin in dips\r\n                    DisplayMetrics displayMetrics = new DisplayMetrics();\r\n                    getWindowManager().getDefaultDisplay().getMetrics(displayMetrics);\r\n                    int height = displayMetrics.heightPixels;\r\n                    int width = displayMetrics.widthPixels;\r\n                    int marginx = (int) ((dpValuex * width) / WeigthRefDevice); // margin in pixels\r\n                    int marginy = (int) ((dpValuey * height) / HeightRefDevice); // margin in pixel\r\n                    layoutParams.leftMargin = marginx;\r\n                    layoutParams.topMargin = marginy;\r\n\r\n                } else {\r\n                    fromViewAll = true;\r\n                }\r\n                layoutParams.bottomMargin = -250;\r\n                layoutParams.rightMargin = -250;\r\n                binding.editableImageview.setLayoutParams(layoutParams);\r\n                TouchImageMotion();\r\n                InputStream inputStream = getContentResolver().openInputStream(listModel.getUri());\r\n                yourDrawable = Drawable.createFromStream(inputStream, listModel.getUri().toString());\r\n                binding.editableImageview.setImageDrawable(yourDrawable);\r\n                BitmapDrawable drawable = (BitmapDrawable) binding.editableImageview.getDrawable();\r\n                selectedImageBitmap = drawable.getBitmap();\r\n                binding.editableImageview.requestFocus();\r\n            } catch (FileNotFoundException e) {\r\n\r\n            }\r\n        } else {\r\n            binding.editableImageview.setVisibility(View.VISIBLE);\r\n            RelativeLayout.LayoutParams layoutParams = new RelativeLayout.LayoutParams(200, 200);\r\n            if (fromViewAll) {\r\n                int WeigthRefDevice = 1080;\r\n                int HeightRefDevice = 2028;\r\n                int dpValuex = Integer.parseInt(selectedObject.getX_conrdinate()); // margin in dips\r\n                int dpValuey = Integer.parseInt(selectedObject.getY_cordinate()); // margin in dips\r\n                DisplayMetrics displayMetrics = new DisplayMetrics();\r\n                getWindowManager().getDefaultDisplay().getMetrics(displayMetrics);\r\n                int height = displayMetrics.heightPixels;\r\n                int width = displayMetrics.widthPixels;\r\n                int marginx = (int) ((dpValuex * width) / WeigthRefDevice); // margin in pixels\r\n                int marginy = (int) ((dpValuey * height) / HeightRefDevice); // margin in pixels\r\n                layoutParams.leftMargin = marginx;\r\n                layoutParams.topMargin = marginy;\r\n                binding.editableImageview.setLayoutParams(layoutParams);\r\n                binding.editableImageview.setVisibility(View.VISIBLE);\r\n                binding.backImage.setVisibility(View.VISIBLE);\r\n                //selectedImageBitmap=drawableToBitmap(ContextCompat.getDrawable(act,R.drawable.ic_gallry));\r\n                binding.editableImageview.setImageBitmap(selectedImageBitmap);\r\n                binding.editableImageview.requestFocus();\r\n\r\n            } else {\r\n                fromViewAll = true;\r\n            }\r\n\r\n\r\n            binding.editableImageview.setOnTouchListener(new View.OnTouchListener() {\r\n                @Override\r\n                public boolean onTouch(View view, MotionEvent motionEvent) {\r\n                    binding.viewPager.setCurrentItem(2);\r\n                    TouchImageMotion();\r\n                    return false;\r\n                }\r\n            });\r\n\r\n        }\r\n    }\r\n\r\n    public static Bitmap drawableToBitmap(Drawable drawable) {\r\n        Bitmap bitmap = null;\r\n\r\n        if (drawable instanceof BitmapDrawable) {\r\n            BitmapDrawable bitmapDrawable = (BitmapDrawable) drawable;\r\n            if (bitmapDrawable.getBitmap() != null) {\r\n                return bitmapDrawable.getBitmap();\r\n            }\r\n        }\r\n\r\n        if (drawable.getIntrinsicWidth() <= 0 || drawable.getIntrinsicHeight() <= 0) {\r\n            bitmap = Bitmap.createBitmap(1, 1, Bitmap.Config.ARGB_8888);\r\n        } else {\r\n            bitmap = Bitmap.createBitmap(drawable.getIntrinsicWidth(), drawable.getIntrinsicHeight(), Bitmap.Config.ARGB_8888);\r\n            bitmap = Bitmap.createScaledBitmap(bitmap, 100, 100, true);\r\n\r\n        }\r\n\r\n        Canvas canvas = new Canvas(bitmap);\r\n        drawable.setBounds(0, 0, canvas.getWidth(), canvas.getHeight());\r\n        drawable.draw(canvas);\r\n\r\n        return bitmap;\r\n    }\r\n\r\n    //show dialog for upgrading package for using all 6 frames\r\n    public DialogUpgradeDownloadLimitExpireBinding expireBinding;\r\n\r\n    private void downloadLimitExpireDialog(String msg) {\r\n        expireBinding = DataBindingUtil.inflate(LayoutInflater.from(act), R.layout.dialog_upgrade_download_limit_expire, null, false);\r\n        androidx.appcompat.app.AlertDialog.Builder builder = new androidx.appcompat.app.AlertDialog.Builder(act, R.style.MyAlertDialogStyle_extend);\r\n        builder.setView(expireBinding.getRoot());\r\n        androidx.appcompat.app.AlertDialog alertDialog = builder.create();\r\n        alertDialog.setContentView(expireBinding.getRoot());\r\n        expireBinding.element3.setText(msg);\r\n        expireBinding.viewPackage.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                alertDialog.dismiss();\r\n                Intent intent = new Intent(act, PackageActivity.class);\r\n                intent.putExtra(\"Profile\", \"1\");\r\n\r\n                act.startActivity(intent);\r\n                act.overridePendingTransition(R.anim.slide_right_in, R.anim.slide_right_out);\r\n            }\r\n        });\r\n        expireBinding.closeBtn.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                alertDialog.dismiss();\r\n            }\r\n        });\r\n\r\n        alertDialog.setCancelable(false);\r\n        alertDialog.getWindow().setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));\r\n        alertDialog.show();\r\n\r\n    }\r\n\r\n    androidx.appcompat.app.AlertDialog alertDialog;\r\n    DialogDiscardImageBinding discardImageBinding;\r\n\r\n    public void screenExistDialog() {\r\n        if (alertDialog != null && alertDialog.isShowing())\r\n            alertDialog.dismiss();\r\n\r\n        if (act != null) {\r\n            discardImageBinding = DataBindingUtil.inflate(LayoutInflater.from(act), R.layout.dialog_discard_image, null, false);\r\n            androidx.appcompat.app.AlertDialog.Builder builder = new androidx.appcompat.app.AlertDialog.Builder(act, R.style.MyAlertDialogStyle_extend);\r\n            builder.setView(discardImageBinding.getRoot());\r\n            alertDialog = builder.create();\r\n            alertDialog.setContentView(discardImageBinding.getRoot());\r\n\r\n            discardImageBinding.noTxt.setOnClickListener(new View.OnClickListener() {\r\n                @Override\r\n                public void onClick(View v) {\r\n                    alertDialog.dismiss();\r\n\r\n\r\n                }\r\n            });\r\n            discardImageBinding.yesTxt.setOnClickListener(new View.OnClickListener() {\r\n                @Override\r\n                public void onClick(View v) {\r\n                    alertDialog.dismiss();\r\n                    CodeReUse.activityBackPress(act);\r\n                }\r\n            });\r\n            if (!isFinishing() || !isDestroyed()) {\r\n                alertDialog.setCancelable(true);\r\n                alertDialog.getWindow().setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));\r\n                alertDialog.show();\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    // ask to upgrade package to 999 for use all frames\r\n    DialogUpgradeLayoutEnterpriseBinding enterpriseBinding;\r\n\r\n    public void askForUpgradeToEnterpisePackage() {\r\n        enterpriseBinding = DataBindingUtil.inflate(LayoutInflater.from(act), R.layout.dialog_upgrade_layout_enterprise, null, false);\r\n        androidx.appcompat.app.AlertDialog.Builder builder = new androidx.appcompat.app.AlertDialog.Builder(act, R.style.MyAlertDialogStyle_extend);\r\n        builder.setView(enterpriseBinding.getRoot());\r\n        androidx.appcompat.app.AlertDialog alertDialog = builder.create();\r\n        alertDialog.setContentView(enterpriseBinding.getRoot());\r\n\r\n        enterpriseBinding.viewPackage.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                alertDialog.dismiss();\r\n                Intent intent = new Intent(act, PackageActivity.class);\r\n                intent.putExtra(\"Profile\", \"1\");\r\n\r\n                act.startActivity(intent);\r\n                act.overridePendingTransition(R.anim.slide_right_in, R.anim.slide_right_out);\r\n            }\r\n        });\r\n        enterpriseBinding.closeBtn.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                alertDialog.dismiss();\r\n            }\r\n        });\r\n        enterpriseBinding.element3.setText(\"You have selected premium footer design. To use this design please upgrade your package\");\r\n        //alertDialog.setCancelable(false);\r\n        alertDialog.getWindow().setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));\r\n        alertDialog.show();\r\n    }\r\n\r\n\r\n    public boolean manuallyEnablePermission(int pendingActivity) {\r\n        isDownloadOrSharingOrFavPending = pendingActivity;\r\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\r\n            if (!shouldShowRequestPermissionRationale(Manifest.permission.WRITE_EXTERNAL_STORAGE)) {\r\n                if (ContextCompat.checkSelfPermission(act, Manifest.permission.WRITE_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED) {\r\n                    new AlertDialog.Builder(act)\r\n                            .setMessage(\"Allow BrandMania to access photos, files to download and share images \")\r\n                            .setCancelable(true)\r\n                            .setPositiveButton(\"OK\", new DialogInterface.OnClickListener() {\r\n                                @Override\r\n                                public void onClick(DialogInterface dialogInterface, int i) {\r\n                                    dialogInterface.dismiss();\r\n                                    startActivity(new Intent(Settings.ACTION_APPLICATION_DETAILS_SETTINGS,\r\n                                            Uri.fromParts(\"package\", act.getPackageName(), null)));\r\n                                }\r\n                            })\r\n                            .show();\r\n                    return false;\r\n                } else {\r\n                    return true;\r\n                }\r\n\r\n            } else {\r\n                if (ContextCompat.checkSelfPermission(act, Manifest.permission.WRITE_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED) {\r\n                    new AlertDialog.Builder(act)\r\n                            .setMessage(\"Allow BrandMania to access photos, files to download and share images \")\r\n                            .setCancelable(true)\r\n                            .setPositiveButton(\"OK\", new DialogInterface.OnClickListener() {\r\n                                @Override\r\n                                public void onClick(DialogInterface dialogInterface, int i) {\r\n                                    dialogInterface.dismiss();\r\n                                    ActivityCompat.requestPermissions(act,\r\n                                            new String[]{Manifest.permission.CAMERA, Manifest.permission.WRITE_EXTERNAL_STORAGE,\r\n                                                    Manifest.permission.READ_EXTERNAL_STORAGE},\r\n                                            CodeReUse.ASK_PERMISSSION);\r\n                                }\r\n                            })\r\n                            .show();\r\n                    return false;\r\n                } else {\r\n\r\n                    return true;\r\n                }\r\n\r\n\r\n            }\r\n        } else {\r\n            if (ContextCompat.checkSelfPermission(act, Manifest.permission.WRITE_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED) {\r\n                new AlertDialog.Builder(act)\r\n                        .setMessage(\"Allow BrandMania to access photos, files to download and share images \")\r\n                        .setCancelable(true)\r\n                        .setPositiveButton(\"OK\", new DialogInterface.OnClickListener() {\r\n                            @Override\r\n                            public void onClick(DialogInterface dialogInterface, int i) {\r\n                                dialogInterface.dismiss();\r\n                                ActivityCompat.requestPermissions(act,\r\n                                        new String[]{Manifest.permission.CAMERA, Manifest.permission.WRITE_EXTERNAL_STORAGE,\r\n                                                Manifest.permission.READ_EXTERNAL_STORAGE},\r\n                                        CodeReUse.ASK_PERMISSSION);\r\n                            }\r\n                        })\r\n                        .show();\r\n                return false;\r\n            } else {\r\n\r\n                return true;\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    //create bitmap from view and returns it\r\n    private Bitmap getBitmapFromView(View view) {\r\n        //Define a bitmap with the same size as the view\r\n        Bitmap returnedBitmap = Bitmap.createBitmap(view.getWidth(), view.getHeight(), Bitmap.Config.ARGB_8888);\r\n        //Bind a canvas to it\r\n        Canvas canvas = new Canvas(returnedBitmap);\r\n        //Get the view's background\r\n        Drawable bgDrawable = view.getBackground();\r\n        if (bgDrawable != null) {\r\n            //has background drawable, then draw it on the canvas\r\n            bgDrawable.draw(canvas);\r\n        } else {\r\n            //does not have background drawable, then draw white background on the canvas\r\n            canvas.drawColor(Color.WHITE);\r\n        }\r\n        // draw the view on the canvas\r\n        view.draw(canvas);\r\n        view.setBackground(null);\r\n\r\n        //return the bitmap\r\n        return returnedBitmap;\r\n    }\r\n\r\n    public void saveImageToGallery(boolean wantToShare, boolean isFavourite) {\r\n        for (int i = 0; i < binding.CustomImageMain.getChildCount(); i++) {\r\n            if (binding.CustomImageMain.getChildAt(i) instanceof TextView) {\r\n                TextView textView = (TextView) binding.CustomImageMain.getChildAt(i);\r\n                textView.setBackground(null);\r\n            }\r\n        }\r\n\r\n        Utility.showLoadingTran(act);\r\n        Drawable bitmapFrame;\r\n        if (isUsingCustomFrame) {\r\n            bitmapFrame = new BitmapDrawable(getResources(), getBitmapFromView(binding.CustomImageMain));\r\n        } else {\r\n            bitmapFrame = new BitmapDrawable(getResources(), FooterHelper.getCustomFrameInBitmap1(binding.CustomImageMain, binding.editableImageview, binding.backendFrame));\r\n        }\r\n        Drawable ImageDrawable = (BitmapDrawable) binding.editableImageview.getDrawable();\r\n        Bitmap merged = Bitmap.createBitmap(1000, 1000, Bitmap.Config.ARGB_8888);\r\n        Canvas canvas = new Canvas(merged);\r\n        bitmapFrame.setBounds(0, 0, 1000, 1000);\r\n        ImageDrawable.setBounds(0, 0, 1000, 1000);\r\n        ImageDrawable.draw(canvas);\r\n        bitmapFrame.draw(canvas);\r\n\r\n        FileOutputStream fileOutputStream = null;\r\n        File file = FooterHelper.createNewFolderForImages();\r\n        if (!file.exists() && !file.mkdirs()) {\r\n            return;\r\n        }\r\n        SimpleDateFormat simpleDateFormat = new SimpleDateFormat(\"yyyymmsshhmmss\");\r\n        String date = simpleDateFormat.format(new Date());\r\n        String name = \"image\" + System.currentTimeMillis() + \".jpg\";\r\n        String file_name = file.getAbsolutePath() + \"/\" + name;\r\n        new_file = new File(file_name);\r\n\r\n        try {\r\n            fileOutputStream = new FileOutputStream(new_file);\r\n            Bitmap bitmap = merged;\r\n            bitmap.compress(Bitmap.CompressFormat.PNG, 80, fileOutputStream);\r\n            fileOutputStream.flush();\r\n            fileOutputStream.close();\r\n        } catch (FileNotFoundException e) {\r\n            e.printStackTrace();\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n        Utility.dismissLoadingTran();\r\n        FooterHelper.refreshgallery(act, new_file);\r\n\r\n\r\n        if (!isFavourite) {\r\n            if (wantToShare) {\r\n                if (prefManager.getActiveBrand() != null) {\r\n                    if (isUsingCustomFrame) {\r\n                        if (!isRemoveFrame) {\r\n                            ((onFooterSelectListener) act).onFooterSelectEvent(selectedFooterModel.getLayoutType(), selectedFooterModel);\r\n                            binding.FrameImageDuplicate.setVisibility(View.GONE);\r\n                            binding.FrameImageDuplicate.setImageBitmap(null);\r\n                        }\r\n\r\n\r\n                    }\r\n                }\r\n\r\n\r\n                FooterHelper.triggerShareIntent(act, new_file, merged);\r\n\r\n            }\r\n            dbManager.insertStaticContent(new_file.toString(), DatabaseHelper.FLAG_DOWNLOAD);\r\n            InputStream inputStream = null;\r\n            try {\r\n\r\n                if (imageFromGalaryModel != null) {\r\n                    inputStream = getContentResolver().openInputStream(imageFromGalaryModel.getUri());\r\n                    yourDrawable = Drawable.createFromStream(inputStream, imageFromGalaryModel.getUri().toString());\r\n                } else {\r\n                    yourDrawable = ContextCompat.getDrawable(act, R.drawable.photo);\r\n                }\r\n\r\n                binding.editableImageview.setImageDrawable(yourDrawable);\r\n                BitmapDrawable drawable = (BitmapDrawable) binding.editableImageview.getDrawable();\r\n                selectedImageBitmap = drawable.getBitmap();\r\n            } catch (FileNotFoundException e) {\r\n                e.printStackTrace();\r\n            }\r\n            downloadAndShareApi(DOWLOAD, merged);\r\n        }\r\n\r\n        CodeReUse.activityBackPress(act);\r\n    }\r\n\r\n    private void downloadAndShareApi(final int download, Bitmap customImage) {\r\n\r\n        Utility.showLoadingTran(act);\r\n        Utility.Log(\"API : \", APIs.DOWNLOAD_SHARE);\r\n        File img1File = null;\r\n        if (customImage != null) {\r\n            img1File = CodeReUse.createFileFromBitmap(act, \"photo.jpeg\", customImage);\r\n        }\r\n\r\n        ANRequest.MultiPartBuilder request = AndroidNetworking.upload(APIs.DOWNLOAD_SHARE)\r\n                .addHeaders(\"Accept\", \"application/json\")\r\n                .addHeaders(\"Content-Type\", \"application/json\")\r\n                .addHeaders(\"X-Authorization\", \"Bearer\" + prefManager.getUserToken())\r\n                .setPriority(Priority.HIGH);\r\n\r\n\r\n        if (isUsingCustomFrame) {\r\n            request.addMultipartParameter(\"brand_id\", prefManager.getActiveBrand().getId());\r\n            request.addMultipartParameter(\"image_id\", selectedObject.getImageid());\r\n            request.addMultipartParameter(\"is_custom\", \"1\");\r\n            request.addMultipartParameter(\"footer_id\", String.valueOf(selectedFooterModel.getLayoutType()));\r\n            if (img1File != null) {\r\n                request.addMultipartFile(\"image\", img1File);\r\n            }\r\n        } else {\r\n            request.addMultipartParameter(\"brand_id\", prefManager.getActiveBrand().getId());\r\n            request.addMultipartParameter(\"image_id\", selectedObject.getImageid());\r\n            request.addMultipartParameter(\"frame_id\", selectedBackendFrame.getFrame1Id());\r\n            request.addMultipartParameter(\"is_custom\", \"0\");\r\n        }\r\n        request.addMultipartParameter(\"type\", String.valueOf(download));\r\n        request.build().setUploadProgressListener(new UploadProgressListener() {\r\n            @Override\r\n            public void onProgress(long bytesUploaded, long totalBytes) {\r\n                // do anything with progress\r\n            }\r\n        })\r\n                .getAsJSONObject(new JSONObjectRequestListener() {\r\n                    @Override\r\n                    public void onResponse(JSONObject response) {\r\n                        Utility.dismissLoadingTran();\r\n                        Utility.Log(\"DOWNLOAD_SHARE : \", response);\r\n                        if (updateLogo && selectedLogo != null)\r\n                            uploadLogoForBrand(selectedLogo);\r\n\r\n                        if (download == DOWLOAD) {\r\n                            //this is coding for can we change logo or not\r\n                            String usedImageCountStr = prefManager.getActiveBrand().getNo_of_used_image();\r\n                            if (usedImageCountStr.isEmpty())\r\n                                usedImageCountStr = \"0\";\r\n\r\n                            int usedCounter = Integer.parseInt(usedImageCountStr) + 1;\r\n                            BrandListItem brandListItem = prefManager.getActiveBrand();\r\n                            brandListItem.setNo_of_used_image(String.valueOf(usedCounter));\r\n                            prefManager.setActiveBrand(brandListItem);\r\n                            prefManager = new PreafManager(act);\r\n                        }\r\n\r\n                    }\r\n\r\n                    @Override\r\n                    public void onError(ANError error) {\r\n\r\n                        Utility.dismissLoadingTran();\r\n\r\n                    }\r\n                });\r\n    }\r\n\r\n    //backend frame load\r\n    @Override\r\n    public void onBackendFrameChoose(ImageList imageList, int position) {\r\n        binding.backendFrame.setVisibility(View.VISIBLE);\r\n        binding.elementCustomFrame.setVisibility(View.GONE);\r\n        selectedBackendFrame = imageList;\r\n        Glide.with(getApplicationContext()).load(imageList.getFrame1()).into(binding.backendFrame);\r\n        isUsingCustomFrame = false;\r\n        forCheckFavorite();\r\n    }\r\n\r\n    //fire on footer select listener\r\n    @Override\r\n    public void onFooterSelectEvent(int footerLayout, FooterModel footerModel) {\r\n\r\n        isUsingCustomFrame = true;\r\n        binding.backendFrame.setVisibility(View.GONE);\r\n        binding.elementCustomFrame.setVisibility(View.VISIBLE);\r\n\r\n        GradientDrawable drawable = (GradientDrawable) binding.elementCustomFrame.getBackground();\r\n        drawable.setStroke((int) convertDpToPx(borderSize), colorCodeForBackground);\r\n        this.footerLayout = footerLayout;\r\n        selectedFooterModel = footerModel;\r\n        addDynamicFooter(footerLayout, false);\r\n        forCheckFavorite();\r\n\r\n        changeBorderColorAsFrame();\r\n        loadSameColorToBackgroundAndTextAgain();\r\n        ((ITextSizeEvent) act).onfontSize(previousFontSize);\r\n    }\r\n\r\n    //check for added to fav or not\r\n    public void forCheckFavorite() {\r\n        prefManager = new PreafManager(act);\r\n        AddFavorite = prefManager.getSavedFavorites();\r\n        if (AddFavorite != null) {\r\n            boolean isImageFound = false;\r\n            for (int i = 0; i < AddFavorite.size(); i++) {\r\n                if (prefManager.getActiveBrand().getId().equalsIgnoreCase(AddFavorite.get(i).getBrandId())) {\r\n                    if (isUsingCustomFrame) {\r\n                        if (AddFavorite.get(i).isCustom()) {\r\n                            if (AddFavorite.get(i).getId().equals(selectedObject.getId())) {\r\n//                                binding.addfabroutIcon.setVisibility(View.VISIBLE);\r\n//                                binding.fabroutIcon.setVisibility(View.GONE);\r\n                                isImageFound = true;\r\n                                break;\r\n                            } else {\r\n//                                binding.addfabroutIcon.setVisibility(View.GONE);\r\n//                                binding.fabroutIcon.setVisibility(View.VISIBLE);\r\n                            }\r\n                        }\r\n\r\n                    } else {\r\n                        if (!AddFavorite.get(i).isCustom()) {\r\n                            if (AddFavorite.get(i).getId().equals(selectedObject.getId()) && AddFavorite.get(i).getFrame1Id().equalsIgnoreCase(selectedBackendFrame.getFrame1Id())) {\r\n//                                binding.addfabroutIcon.setVisibility(View.VISIBLE);\r\n//                                binding.fabroutIcon.setVisibility(View.GONE);\r\n                                isImageFound = true;\r\n                                break;\r\n                            } else {\r\n//                                binding.addfabroutIcon.setVisibility(View.GONE);\r\n//                                binding.fabroutIcon.setVisibility(View.VISIBLE);\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                }\r\n            }\r\n            if (!isImageFound) {\r\n//                binding.addfabroutIcon.setVisibility(View.GONE);\r\n//                binding.fabroutIcon.setVisibility(View.VISIBLE);\r\n            }\r\n        }\r\n    }\r\n\r\n    //for adding footer dynamically\r\n    int footerLayout = 1;\r\n    LayoutModelClass layoutModelClass;\r\n\r\n    private void addDynamicFooter(int layoutType, boolean isReload) {\r\n        layoutModelClass = new LayoutModelClass();\r\n        binding.elementFooter.removeAllViews();\r\n        footerLayout = layoutType;\r\n        if (layoutType == FooterModel.LAYOUT_FRAME_ONE) {\r\n            LayoutForLoadOneBinding oneBinding = DataBindingUtil.inflate(LayoutInflater.from(act), R.layout.layout_for_load_one, null, false);\r\n            if (prefManager.getActiveBrand() != null)\r\n                FooterHelper.loadFrameFirstData(act, oneBinding);\r\n            layoutModelClass.setOneBinding(oneBinding);\r\n            binding.elementFooter.addView(oneBinding.getRoot());\r\n\r\n        } else if (layoutType == FooterModel.LAYOUT_FRAME_TWO) {\r\n            LayoutForLoadTwoBinding twoBinding = DataBindingUtil.inflate(LayoutInflater.from(act), R.layout.layout_for_load_two, null, false);\r\n            layoutModelClass.setTwoBinding(twoBinding);\r\n            if (prefManager.getActiveBrand() != null)\r\n                FooterHelper.loadFrameTwoData(act, twoBinding);\r\n            binding.elementFooter.addView(twoBinding.getRoot());\r\n\r\n        } else if (layoutType == FooterModel.LAYOUT_FRAME_THREE) {\r\n            LayoutForLoadThreeBinding threeBinding = DataBindingUtil.inflate(LayoutInflater.from(act), R.layout.layout_for_load_three, null, false);\r\n            binding.elementFooter.addView(threeBinding.getRoot());\r\n            layoutModelClass.setThreeBinding(threeBinding);\r\n            if (prefManager.getActiveBrand() != null)\r\n                FooterHelper.loadFrameThreeData(act, threeBinding);\r\n        } else if (layoutType == FooterModel.LAYOUT_FRAME_FOUR) {\r\n            LayoutForLoadFourBinding fourBinding = DataBindingUtil.inflate(LayoutInflater.from(act), R.layout.layout_for_load_four, null, false);\r\n            binding.elementFooter.addView(fourBinding.getRoot());\r\n            layoutModelClass.setFourBinding(fourBinding);\r\n            if (prefManager.getActiveBrand() != null)\r\n                FooterHelper.loadFrameFourData(act, fourBinding);\r\n        } else if (layoutType == FooterModel.LAYOUT_FRAME_FIVE) {\r\n            LayoutForLoadFiveBinding fiveBinding = DataBindingUtil.inflate(LayoutInflater.from(act), R.layout.layout_for_load_five, null, false);\r\n            binding.elementFooter.addView(fiveBinding.getRoot());\r\n            layoutModelClass.setFiveBinding(fiveBinding);\r\n            if (prefManager.getActiveBrand() != null)\r\n                FooterHelper.loadFrameFiveData(act, fiveBinding);\r\n        } else if (layoutType == FooterModel.LAYOUT_FRAME_SIX) {\r\n            LayoutForLoadSixBinding sixBinding = DataBindingUtil.inflate(LayoutInflater.from(act), R.layout.layout_for_load_six, null, false);\r\n            binding.elementFooter.addView(sixBinding.getRoot());\r\n            layoutModelClass.setSixBinding(sixBinding);\r\n            if (prefManager.getActiveBrand() != null)\r\n                FooterHelper.loadFrameSixData(act, sixBinding);\r\n        } else if (layoutType == FooterModel.LAYOUT_FRAME_SEVEN) {\r\n            LayoutForLoadSevenBinding sevenBinding = DataBindingUtil.inflate(LayoutInflater.from(act), R.layout.layout_for_load_seven, null, false);\r\n            binding.elementFooter.addView(sevenBinding.getRoot());\r\n            layoutModelClass.setSevenBinding(sevenBinding);\r\n            if (prefManager.getActiveBrand() != null)\r\n                FooterHelper.loadFrameSevenData(act, sevenBinding);\r\n        } else if (layoutType == FooterModel.LAYOUT_FRAME_EIGHT) {\r\n            LayoutForLoadEightBinding eightBinding = DataBindingUtil.inflate(LayoutInflater.from(act), R.layout.layout_for_load_eight, null, false);\r\n            binding.elementFooter.addView(eightBinding.getRoot());\r\n            layoutModelClass.setEightBinding(eightBinding);\r\n            if (prefManager.getActiveBrand() != null)\r\n                FooterHelper.loadFrameEightData(act, eightBinding);\r\n        } else if (layoutType == FooterModel.LAYOUT_FRAME_NINE) {\r\n            LayoutForLoadNineBinding nineBinding = DataBindingUtil.inflate(LayoutInflater.from(act), R.layout.layout_for_load_nine, null, false);\r\n            binding.elementFooter.addView(nineBinding.getRoot());\r\n            layoutModelClass.setNineBinding(nineBinding);\r\n            if (prefManager.getActiveBrand() != null)\r\n                FooterHelper.loadFrameNineData(act, nineBinding);\r\n        } else if (layoutType == FooterModel.LAYOUT_FRAME_TEN) {\r\n            LayoutForLoadTenBinding tenBinding = DataBindingUtil.inflate(LayoutInflater.from(act), R.layout.layout_for_load_ten, null, false);\r\n            binding.elementFooter.addView(tenBinding.getRoot());\r\n            layoutModelClass.setTenBinding(tenBinding);\r\n            if (prefManager.getActiveBrand() != null)\r\n                FooterHelper.loadFrameTenData(act, tenBinding);\r\n        } else if (layoutType == FooterModel.LAYOUT_FRAME_ELEVEN) {\r\n            LayoutFooterElevenBinding elevenBinding = DataBindingUtil.inflate(LayoutInflater.from(act), R.layout.layout_footer_eleven, null, false);\r\n            binding.elementFooter.getLayoutParams().height = ConstraintLayout.LayoutParams.MATCH_PARENT;\r\n            binding.elementFooter.requestLayout();\r\n            binding.elementFooter.addView(elevenBinding.getRoot());\r\n            View view = elevenBinding.getRoot();\r\n            view.getLayoutParams().height = RelativeLayout.LayoutParams.MATCH_PARENT;\r\n            view.requestLayout();\r\n            layoutModelClass.setElevenBinding(elevenBinding);\r\n            if (prefManager.getActiveBrand() != null)\r\n                FooterHelper.loadFrameElevenData(act, elevenBinding);\r\n        } else if (layoutType == FooterModel.LAYOUT_FRAME_TWELVE) {\r\n            LayoutFooterTweloneBinding tweloneBinding = DataBindingUtil.inflate(LayoutInflater.from(act), R.layout.layout_footer_twelone, null, false);\r\n            binding.elementFooter.getLayoutParams().height = ConstraintLayout.LayoutParams.MATCH_PARENT;\r\n            binding.elementFooter.requestLayout();\r\n            binding.elementFooter.addView(tweloneBinding.getRoot());\r\n            View view = tweloneBinding.getRoot();\r\n            view.getLayoutParams().height = RelativeLayout.LayoutParams.MATCH_PARENT;\r\n            view.requestLayout();\r\n            layoutModelClass.setTwelveBinding(tweloneBinding);\r\n            if (prefManager.getActiveBrand() != null)\r\n                FooterHelper.loadFrameTweloneData(act, tweloneBinding);\r\n        } else if (layoutType == FooterModel.LAYOUT_FRAME_THIRTEEN) {\r\n            LayoutFooterThirteenBinding thirteenBinding = DataBindingUtil.inflate(LayoutInflater.from(act), R.layout.layout_footer_thirteen, null, false);\r\n            binding.elementFooter.getLayoutParams().height = ConstraintLayout.LayoutParams.MATCH_PARENT;\r\n            binding.elementFooter.requestLayout();\r\n            binding.elementFooter.addView(thirteenBinding.getRoot());\r\n            View view = thirteenBinding.getRoot();\r\n            view.getLayoutParams().height = RelativeLayout.LayoutParams.MATCH_PARENT;\r\n            view.requestLayout();\r\n            layoutModelClass.setThirteenBinding(thirteenBinding);\r\n            if (prefManager.getActiveBrand() != null)\r\n                FooterHelper.loadFrameThirteenData(act, thirteenBinding);\r\n        } else if (layoutType == FooterModel.LAYOUT_FRAME_FOURTEEN) {\r\n            LayoutFooterFourteenBinding fourteenBinding = DataBindingUtil.inflate(LayoutInflater.from(act), R.layout.layout_footer_fourteen, null, false);\r\n            binding.elementFooter.getLayoutParams().height = ConstraintLayout.LayoutParams.MATCH_PARENT;\r\n            binding.elementFooter.getLayoutParams().width = ConstraintLayout.LayoutParams.MATCH_PARENT;\r\n            binding.elementFooter.requestLayout();\r\n            binding.elementFooter.addView(fourteenBinding.getRoot());\r\n            View view = fourteenBinding.getRoot();\r\n            view.getLayoutParams().height = RelativeLayout.LayoutParams.MATCH_PARENT;\r\n            view.getLayoutParams().width = RelativeLayout.LayoutParams.MATCH_PARENT;\r\n            view.requestLayout();\r\n            layoutModelClass.setFourteenBinding(fourteenBinding);\r\n            if (prefManager.getActiveBrand() != null)\r\n                FooterHelper.loadFrameFourteenData(act, fourteenBinding);\r\n        } else if (layoutType == FooterModel.LAYOUT_FRAME_FIFTEEN) {\r\n            LayoutFooterFifteenBinding fifteenBinding = DataBindingUtil.inflate(LayoutInflater.from(act), R.layout.layout_footer_fifteen, null, false);\r\n            binding.elementFooter.getLayoutParams().height = ConstraintLayout.LayoutParams.MATCH_PARENT;\r\n            binding.elementFooter.getLayoutParams().width = ConstraintLayout.LayoutParams.MATCH_PARENT;\r\n            binding.elementFooter.requestLayout();\r\n            binding.elementFooter.addView(fifteenBinding.getRoot());\r\n            View view = fifteenBinding.getRoot();\r\n            view.getLayoutParams().height = RelativeLayout.LayoutParams.MATCH_PARENT;\r\n            view.getLayoutParams().width = RelativeLayout.LayoutParams.MATCH_PARENT;\r\n            view.requestLayout();\r\n            layoutModelClass.setFifteenBinding(fifteenBinding);\r\n            if (prefManager.getActiveBrand() != null)\r\n                FooterHelper.loadFrameFifteenData(act, fifteenBinding);\r\n        } else if (layoutType == FooterModel.LAYOUT_FRAME_SIXTEEN) {\r\n            LayoutFooterSixteenBinding sixteenBinding = DataBindingUtil.inflate(LayoutInflater.from(act), R.layout.layout_footer_sixteen, null, false);\r\n            binding.elementFooter.getLayoutParams().height = ConstraintLayout.LayoutParams.MATCH_PARENT;\r\n            binding.elementFooter.getLayoutParams().width = ConstraintLayout.LayoutParams.MATCH_PARENT;\r\n            binding.elementFooter.requestLayout();\r\n            binding.elementFooter.addView(sixteenBinding.getRoot());\r\n            View view = sixteenBinding.getRoot();\r\n            view.getLayoutParams().height = RelativeLayout.LayoutParams.MATCH_PARENT;\r\n            view.getLayoutParams().width = RelativeLayout.LayoutParams.MATCH_PARENT;\r\n            view.requestLayout();\r\n            layoutModelClass.setSixteenBinding(sixteenBinding);\r\n            if (prefManager.getActiveBrand() != null)\r\n                FooterHelper.loadFrame16Data(act, sixteenBinding);\r\n        } else if (layoutType == FooterModel.LAYOUT_FRAME_SEVENTEEN) {\r\n            LayoutFooterSeventeenBinding seventeenBinding = DataBindingUtil.inflate(LayoutInflater.from(act), R.layout.layout_footer_seventeen, null, false);\r\n            binding.elementFooter.getLayoutParams().height = ConstraintLayout.LayoutParams.MATCH_PARENT;\r\n            binding.elementFooter.getLayoutParams().width = ConstraintLayout.LayoutParams.MATCH_PARENT;\r\n            binding.elementFooter.requestLayout();\r\n            binding.elementFooter.addView(seventeenBinding.getRoot());\r\n            View view = seventeenBinding.getRoot();\r\n            view.getLayoutParams().height = RelativeLayout.LayoutParams.MATCH_PARENT;\r\n            view.getLayoutParams().width = RelativeLayout.LayoutParams.MATCH_PARENT;\r\n            view.requestLayout();\r\n            layoutModelClass.setSeventeenBinding(seventeenBinding);\r\n            if (prefManager.getActiveBrand() != null)\r\n                FooterHelper.loadFrame17Data(act, seventeenBinding);\r\n        } else if (layoutType == FooterModel.LAYOUT_FRAME_EIGHTEEN) {\r\n            LayoutFooterEightteenBinding eighteenBinding = DataBindingUtil.inflate(LayoutInflater.from(act), R.layout.layout_footer_eightteen, null, false);\r\n            binding.elementFooter.getLayoutParams().height = ConstraintLayout.LayoutParams.MATCH_PARENT;\r\n            binding.elementFooter.getLayoutParams().width = ConstraintLayout.LayoutParams.MATCH_PARENT;\r\n            binding.elementFooter.requestLayout();\r\n            binding.elementFooter.addView(eighteenBinding.getRoot());\r\n            View view = eighteenBinding.getRoot();\r\n            view.getLayoutParams().height = RelativeLayout.LayoutParams.MATCH_PARENT;\r\n            view.getLayoutParams().width = RelativeLayout.LayoutParams.MATCH_PARENT;\r\n            view.requestLayout();\r\n            layoutModelClass.setEightteenBinding(eighteenBinding);\r\n            if (prefManager.getActiveBrand() != null)\r\n                FooterHelper.loadFrame18Data(act, eighteenBinding);\r\n        } else if (layoutType == FooterModel.LAYOUT_FRAME_NINETEEN) {\r\n            LayoutFooterNineteenBinding nineteenBinding = DataBindingUtil.inflate(LayoutInflater.from(act), R.layout.layout_footer_nineteen, null, false);\r\n            binding.elementFooter.getLayoutParams().height = ConstraintLayout.LayoutParams.MATCH_PARENT;\r\n            binding.elementFooter.getLayoutParams().width = ConstraintLayout.LayoutParams.MATCH_PARENT;\r\n            binding.elementFooter.requestLayout();\r\n            binding.elementFooter.addView(nineteenBinding.getRoot());\r\n            View view = nineteenBinding.getRoot();\r\n            view.getLayoutParams().height = RelativeLayout.LayoutParams.MATCH_PARENT;\r\n            view.getLayoutParams().width = RelativeLayout.LayoutParams.MATCH_PARENT;\r\n            view.requestLayout();\r\n            layoutModelClass.setNineteenBinding(nineteenBinding);\r\n            if (prefManager.getActiveBrand() != null)\r\n                FooterHelper.loadFrame19Data(act, nineteenBinding);\r\n        } else if (layoutType == FooterModel.LAYOUT_FRAME_TWENTY) {\r\n            LayoutFooterTwentyBinding twentyBinding = DataBindingUtil.inflate(LayoutInflater.from(act), R.layout.layout_footer_twenty, null, false);\r\n            binding.elementFooter.getLayoutParams().height = ConstraintLayout.LayoutParams.MATCH_PARENT;\r\n            binding.elementFooter.getLayoutParams().width = ConstraintLayout.LayoutParams.MATCH_PARENT;\r\n            binding.elementFooter.requestLayout();\r\n            binding.elementFooter.addView(twentyBinding.getRoot());\r\n            View view = twentyBinding.getRoot();\r\n            view.getLayoutParams().height = RelativeLayout.LayoutParams.MATCH_PARENT;\r\n            view.getLayoutParams().width = RelativeLayout.LayoutParams.MATCH_PARENT;\r\n            view.requestLayout();\r\n            layoutModelClass.setTwentyBinding(twentyBinding);\r\n            if (prefManager.getActiveBrand() != null)\r\n                FooterHelper.loadFrame20Data(act, twentyBinding);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void onColorSelected(int dialogId, int colorCode) {\r\n\r\n    }\r\n\r\n    public void loadSameColorToBackgroundAndTextAgain() {\r\n\r\n        if (colorCodeForTextColor != 0) {\r\n            FooterHelper.baseForTextColor(act, footerLayout, layoutModelClass, colorCodeForTextColor);\r\n        }\r\n        FooterHelper.baseForBackground(act, footerLayout, layoutModelClass, colorCodeForBackground);\r\n        changeBorderColorAsFrame();\r\n\r\n        FooterHelper.baseForBold(isLoadBold, footerLayout, layoutModelClass);\r\n        FooterHelper.baseForItalic(isLoadItalic, footerLayout, layoutModelClass);\r\n\r\n        if (!loadDefaultFont.isEmpty()) {\r\n            FooterHelper.baseForFontChange(act, footerLayout, loadDefaultFont, layoutModelClass);\r\n        }\r\n\r\n\r\n    }\r\n\r\n    //for Text Color change\r\n    @Override\r\n    public void onColorChanged(int colorCode) {\r\n\r\n        if (editorFragment == 5 && selectedForEdit != null) {\r\n            selectedForEdit.setTextColor(colorCode);\r\n\r\n        } else if (editorFragment == 5) {\r\n            colorCodeForTextColor = colorCode;\r\n            FooterHelper.baseForTextColor(act, footerLayout, layoutModelClass, colorCode);\r\n        }\r\n\r\n    }\r\n\r\n    //on border size change\r\n    int borderSize;\r\n\r\n    @Override\r\n    public void onBorderSizeChange(int size) {\r\n        borderSize = size;\r\n        GradientDrawable drawable = (GradientDrawable) binding.elementCustomFrame.getBackground();\r\n        drawable.setStroke((int) convertDpToPx(size), colorCodeForBackground);\r\n    }\r\n\r\n    //for background color change\r\n    @Override\r\n    public void onChooseColor(int colorCode) {\r\n        colorCodeForBackground = colorCode;\r\n        // Toast.makeText(act, editorFragment+\"dfgdfgf\", Toast.LENGTH_SHORT).show();\r\n        if (editorFragment == 4) {\r\n            FooterHelper.baseForBackground(act, footerLayout, layoutModelClass, colorCode);\r\n            GradientDrawable drawable = (GradientDrawable) binding.elementCustomFrame.getBackground();\r\n            drawable.setStroke((int) convertDpToPx(borderSize), colorCodeForBackground);\r\n        }\r\n    }\r\n\r\n    private int convertDpToPx(int dp) {\r\n        return (int) (dp * Resources.getSystem().getDisplayMetrics().density);\r\n    }\r\n\r\n    public void changeBorderColorAsFrame() {\r\n        GradientDrawable drawable = (GradientDrawable) binding.elementCustomFrame.getBackground();\r\n        drawable.setStroke((int) convertDpToPx(borderSize), colorCodeForBackground);\r\n    }\r\n\r\n    @Override\r\n    public void onColorItemChange(int colorCode) {\r\n    }\r\n\r\n    //for font change\r\n    @Override\r\n    public void onFontChangeListenert(String Font) {\r\n        loadDefaultFont = Font;\r\n\r\n        if (editorFragment == 5 && selectedForEdit != null) {\r\n            Typeface custom_font = Typeface.createFromAsset(act.getAssets(), Font);\r\n            selectedForEdit.setTypeface(custom_font);\r\n            // selectedForEdit.setTextColor(colorCode);\r\n        } else {\r\n            FooterHelper.baseForFontChange(act, footerLayout, Font, layoutModelClass);\r\n        }\r\n    }\r\n\r\n    //for underline\r\n    //for font size\r\n    @Override\r\n    public void onfontSize(int textsize) {\r\n\r\n        if (editorFragment == 5 && selectedForEdit != null) {\r\n            selectedForEdit.setTextSize(textsize);\r\n        } else {\r\n            FooterHelper.baseForTextSize(textsize, footerLayout, layoutModelClass);\r\n        }\r\n\r\n    }\r\n\r\n    //for bold text\r\n    @Override\r\n    public void onBoldTextChange(boolean Bold) {\r\n        if (Bold) {\r\n\r\n            isLoadBold = Bold;\r\n            if (editorFragment == 5 && selectedForEdit != null) {\r\n                Utility.setBold(selectedForEdit, true);\r\n\r\n            } else {\r\n                FooterHelper.baseForBold(Bold, footerLayout, layoutModelClass);\r\n            }\r\n\r\n        } else {\r\n\r\n            if (editorFragment == 5 && selectedForEdit != null) {\r\n                Utility.setBold(selectedForEdit, false);\r\n\r\n            } else {\r\n                FooterHelper.baseForBold(Bold, footerLayout, layoutModelClass);\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n    //for italic\r\n    @Override\r\n    public void onItalicTextChange(boolean Italic) {\r\n        isLoadItalic = Italic;\r\n        if (Italic) {\r\n            if (editorFragment == 5 && selectedForEdit != null) {\r\n\r\n                Utility.setItalicText(selectedForEdit, true);\r\n            } else {\r\n                FooterHelper.baseForItalic(Italic, footerLayout, layoutModelClass);\r\n            }\r\n\r\n        } else {\r\n            if (editorFragment == 5 && selectedForEdit != null) {\r\n\r\n                Utility.setItalicText(selectedForEdit, false);\r\n            } else {\r\n                FooterHelper.baseForItalic(Italic, footerLayout, layoutModelClass);\r\n            }\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void onRemoveSelectEvent() {\r\n        isUsingCustomFrame = true;\r\n        isRemoveFrame = true;\r\n        //Toast.makeText(act, \"dsgfgds\", Toast.LENGTH_SHORT).show();\r\n        binding.elementCustomFrame.setVisibility(View.GONE);\r\n        binding.backendFrame.setImageBitmap(null);\r\n        binding.FrameImageDuplicate.setImageBitmap(null);\r\n\r\n        //    binding.frameImage.setVisibility(View.GONE);\r\n    }\r\n\r\n    @Override\r\n    public boolean onTouch(View view, MotionEvent motionEvent) {\r\n        return false;\r\n    }\r\n\r\n    @Override\r\n    public void onFilterSelected(PhotoFilter photoFilter) {\r\n        //mPhotoEditor.setFilterEffect(photoFilter);\r\n    }\r\n\r\n    @Override\r\n    public void onFrameItemSelection(int position, MultiListItem listModel) {\r\n\r\n    }\r\n\r\n    @Override\r\n    public void onItemSelection(int position, MultiListItem listModel) {\r\n        binding.backendFrame.setImageResource(listModel.getImage());\r\n    }\r\n\r\n    @Override\r\n    public void onThumbnailClick(Filter filter) {\r\n        int width = selectedImageBitmap.getWidth();\r\n        int height = selectedImageBitmap.getHeight();\r\n\r\n        Log.v(\"Pictures\", \"Width and height are \" + width + \"--\" + height);\r\n\r\n        if (width > height) {\r\n            // landscape\r\n            float ratio = (float) width / binding.editableImageview.getWidth();\r\n            width = binding.editableImageview.getWidth();\r\n            height = (int) (height / ratio);\r\n        } else if (height > width) {\r\n            // portrait\r\n            float ratio = (float) height / binding.editableImageview.getHeight();\r\n            height = binding.editableImageview.getHeight();\r\n            width = (int) (width / ratio);\r\n        } else {\r\n            // square\r\n            height = binding.editableImageview.getHeight();\r\n            width = binding.editableImageview.getWidth();\r\n        }\r\n\r\n\r\n        binding.editableImageview.setImageBitmap(filter.processFilter(Bitmap.createScaledBitmap(selectedImageBitmap, width, height, false)));\r\n    }\r\n\r\n    @Override\r\n    public void onimageBritness(int britness) {\r\n        binding.editableImageview.setColorFilter(setBrightness(britness));\r\n    }\r\n\r\n    @Override\r\n    public void onRotateImage(int rotate) {\r\n        binding.editableImageview.setRotation(binding.editableImageview.getRotation() + 90);\r\n    }\r\n\r\n    @Override\r\n    public void onCropImage() {\r\n    }\r\n\r\n\r\n\r\n    private class SingleTapConfirm extends GestureDetector.SimpleOnGestureListener {\r\n        @Override\r\n        public boolean onSingleTapUp(MotionEvent event) {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    //zoom Logo\r\n    @Override\r\n    public boolean onTouchEvent(MotionEvent motionEvent) {\r\n        scaleGestureDetector.onTouchEvent(motionEvent);\r\n        binding.logoCustom.onTouchEvent(motionEvent);\r\n        return true;\r\n    }\r\n\r\n    private class ScaleListener extends ScaleGestureDetector.SimpleOnScaleGestureListener {\r\n        @Override\r\n        public boolean onScale(ScaleGestureDetector scaleGestureDetector) {\r\n            mScaleFactor *= scaleGestureDetector.getScaleFactor();\r\n            mScaleFactor = Math.max(0.1f, Math.min(mScaleFactor, 10.0f));\r\n            binding.logoCustom.setScaleX(mScaleFactor);\r\n            binding.logoCustom.setScaleY(mScaleFactor);\r\n            return true;\r\n        }\r\n    }\r\n\r\n    //API CALLS---------------------\r\n\r\n    //api for access rights\r\n    private void getImageDownloadRights(String flag) {\r\n        Utility.showLoadingTran(act);\r\n        Utility.Log(\"API : \", APIs.CUSTOM_FRAME_ACCESS);\r\n        StringRequest stringRequest = new StringRequest(Request.Method.POST, APIs.CUSTOM_FRAME_ACCESS, new Response.Listener<String>() {\r\n            @Override\r\n            public void onResponse(String response) {\r\n                Utility.dismissLoadingTran();\r\n                Utility.Log(\"Access-Rights-Response:\", response);\r\n                JSONObject respJson = ResponseHandler.createJsonObject(response);\r\n                if (ResponseHandler.getBool(respJson, \"status\")) {\r\n                    JSONArray dataJson = ResponseHandler.getJSONArray(respJson, \"data\");\r\n                    try {\r\n                          int imageCounter = Integer.parseInt(ResponseHandler.getString(dataJson.getJSONObject(0), \"total_img_counter\").equalsIgnoreCase(\"Unlimited\") ? \"-1\" : ResponseHandler.getString(dataJson.getJSONObject(0), \"total_img_counter\"));\r\n\r\n                        int used_img_counter = ResponseHandler.getString(dataJson.getJSONObject(0), \"frame_counter\").equals(\"\") ? 0 : Integer.parseInt(ResponseHandler.getString(dataJson.getJSONObject(0), \"used_img_counter\"));\r\n\r\n\r\n                        if (ResponseHandler.getBool(dataJson.getJSONObject(0), \"status\")) {\r\n\r\n                            if (Utility.isUserPaid(prefManager.getActiveBrand())) {\r\n\r\n                                if (imageCounter == -1 || used_img_counter <= imageCounter) {\r\n                                    if (flag.equalsIgnoreCase(\"Download\"))\r\n                                        askForDownloadImage();\r\n                                    else {\r\n                                        requestAgain();\r\n                                        saveImageToGallery(true, false);\r\n                                    }\r\n                                } else {\r\n                                    downloadLimitExpireDialog(\"Your download limit is expired for your current package. To get more images please upgrade your package\");\r\n                                }\r\n\r\n                            } else {\r\n                                if (flag.equalsIgnoreCase(\"Download\"))\r\n                                    askForDownloadImage();\r\n                                else {\r\n                                    requestAgain();\r\n                                    saveImageToGallery(true, false);\r\n                                }\r\n                            }\r\n\r\n                        } else {\r\n\r\n                            downloadLimitExpireDialog(\"You have already used one image for today, As you are free user you can download or share only one image in a day for 7 days. To get more images please upgrade your package\");\r\n                            //Toast.makeText(act, \"You can't download image bcoz your limit get expire for one day\", Toast.LENGTH_SHORT).show();\r\n                        }\r\n                    } catch (JSONException e) {\r\n                        e.printStackTrace();\r\n                    }\r\n\r\n                } else {\r\n\r\n                }\r\n\r\n            }\r\n        },\r\n                new Response.ErrorListener() {\r\n                    @Override\r\n                    public void onErrorResponse(VolleyError error) {\r\n                        Utility.dismissLoadingTran();\r\n                        error.printStackTrace();\r\n\r\n                    }\r\n                }\r\n        ) {\r\n            /**\r\n             * Passing some request headers*\r\n             */\r\n            @Override\r\n            public Map<String, String> getHeaders() throws AuthFailureError {\r\n                Map<String, String> params = new HashMap<String, String>();\r\n                params.put(\"Accept\", \"application/x-www-form-urlencoded\");//application/json\r\n                params.put(\"Content-Type\", \"application/x-www-form-urlencoded\");\r\n                params.put(\"X-Authorization\", \"Bearer\" + prefManager.getUserToken());\r\n                return params;\r\n            }\r\n\r\n            @Override\r\n            protected Map<String, String> getParams() {\r\n                Map<String, String> params = new HashMap<>();\r\n                if (prefManager.getActiveBrand() != null) {\r\n                    params.put(\"brand_id\", prefManager.getActiveBrand().getId());\r\n                }\r\n                Utility.Log(\"Params\", params.toString());\r\n                return params;\r\n            }\r\n\r\n        };\r\n\r\n        RequestQueue queue = Volley.newRequestQueue(act);\r\n        if (prefManager.getActiveBrand() != null) {\r\n            queue.add(stringRequest);\r\n        }\r\n    }\r\n\r\n    //update logo to brand\r\n    private void uploadLogoForBrand(Bitmap img) {\r\n        Utility.showLoadingTran(act);\r\n\r\n        File img1File = null;\r\n        if (img != null) {\r\n            img1File = CodeReUse.createFileFromBitmap(act, \"photo.jpeg\", img);\r\n        }\r\n        ANRequest.MultiPartBuilder request = AndroidNetworking.upload(APIs.EDIT_BRAND)\r\n                .addHeaders(\"Accept\", \"application/json\")\r\n                .addHeaders(\"Content-Type\", \"application/json\")\r\n                .addHeaders(\"X-Authorization\", \"Bearer\" + prefManager.getUserToken())\r\n                .addMultipartParameter(\"brand_id\", prefManager.getActiveBrand().getId())\r\n                .setPriority(Priority.HIGH);\r\n\r\n        if (img1File != null) {\r\n            request.addMultipartFile(\"br_logo\", img1File);\r\n        }\r\n\r\n        request.build().setUploadProgressListener(new UploadProgressListener() {\r\n            @Override\r\n            public void onProgress(long bytesUploaded, long totalBytes) {\r\n                // do anything with progress\r\n            }\r\n        })\r\n                .getAsJSONObject(new JSONObjectRequestListener() {\r\n                    @Override\r\n                    public void onResponse(JSONObject response) {\r\n                        Utility.dismissLoadingTran();\r\n\r\n                        Utility.Log(\"Logo Uploaded\", response);\r\n                    }\r\n\r\n                    @Override\r\n                    public void onError(ANError error) {\r\n                        Utility.dismissLoadingTran();\r\n\r\n                    }\r\n                });\r\n\r\n    }\r\n\r\n     private RelativeLayout.LayoutParams imgParams;\r\n    private float imgDX, imgDY;\r\n    private float imgX, imgY;\r\n    private int imgMode;\r\n    private float imgNewRot = 0f;\r\n\r\n     private View.OnTouchListener onTouchListener() {\r\n        return new View.OnTouchListener() {\r\n            Handler handler = new Handler();\r\n\r\n            int numberOfTaps = 0;\r\n            long lastTapTimeMs = 0;\r\n            long touchDownMs = 0;\r\n\r\n            @SuppressLint(\"ClickableViewAccessibility\")\r\n            @Override\r\n            public boolean onTouch(View view, MotionEvent event) {\r\n                switch (event.getAction()) {\r\n                    case MotionEvent.ACTION_DOWN:\r\n                        touchDownMs = System.currentTimeMillis();\r\n                        break;\r\n                    case MotionEvent.ACTION_UP:\r\n                        handler.removeCallbacksAndMessages(null);\r\n\r\n                        if ((System.currentTimeMillis() - touchDownMs) > ViewConfiguration.getTapTimeout()) {\r\n                            //it was not a tap\r\n                            numberOfTaps = 0;\r\n                            lastTapTimeMs = 0;\r\n                            break;\r\n                        }\r\n\r\n                        if (numberOfTaps > 0 && (System.currentTimeMillis() - lastTapTimeMs) < ViewConfiguration.getDoubleTapTimeout()) {\r\n                            numberOfTaps += 1;\r\n                        } else {\r\n                            numberOfTaps = 1;\r\n                        }\r\n\r\n                        lastTapTimeMs = System.currentTimeMillis();\r\n\r\n                        if (numberOfTaps == 1) {\r\n\r\n                            handler.postDelayed(new Runnable() {\r\n                                @Override\r\n                                public void run() {\r\n                                    if (prefManager.getActiveBrand()!=null) {\r\n                                        if (prefManager.getActiveBrand().getLogo().isEmpty()) {\r\n                                            onSelectImageClick(view);\r\n                                        } else {\r\n                                            if (!prefManager.getActiveBrand().getNo_of_used_image().equalsIgnoreCase(\"0\")) {\r\n                                                new AlertDialog.Builder(act)\r\n                                                        .setMessage(\"once you download or share image. You can't change your logo.\\nIf you want to change logo please contact to admin.\")\r\n                                                        .setCancelable(true)\r\n                                                        .setPositiveButton(\"OK\", new DialogInterface.OnClickListener() {\r\n                                                            @Override\r\n                                                            public void onClick(DialogInterface dialogInterface, int i) {\r\n                                                                dialogInterface.dismiss();\r\n                                                                ((alertListenerCallback) act).alertListenerClick();\r\n                                                            }\r\n                                                        })\r\n                                                        .show();\r\n                                            }\r\n                                        }\r\n                                    }else{\r\n                                        addBrandList();\r\n                                    }\r\n                                }\r\n                            }, ViewConfiguration.getDoubleTapTimeout());\r\n                        }\r\n                }\r\n                if (gestureDetector.onTouchEvent(event)) {\r\n                } else {\r\n                    switch (event.getAction() & MotionEvent.ACTION_MASK) {\r\n                        case MotionEvent.ACTION_DOWN:\r\n                            imgParams = (RelativeLayout.LayoutParams) view.getLayoutParams();\r\n\r\n                            imgDX = event.getRawX() - imgParams.leftMargin;\r\n                            imgDY = event.getRawY() - imgParams.topMargin;\r\n                            imgMode = DRAG;\r\n                            break;\r\n                        case MotionEvent.ACTION_POINTER_DOWN:\r\n                            oldDist = spacing(event);\r\n                            if (oldDist > 10f) {\r\n                                imgMode = ZOOM;\r\n                            }\r\n                            d = rotation(event);\r\n                            break;\r\n                        case MotionEvent.ACTION_UP:\r\n                            break;\r\n                        case MotionEvent.ACTION_POINTER_UP:\r\n                            imgMode = NONE;\r\n                            break;\r\n                        case MotionEvent.ACTION_MOVE:\r\n                            if (imgMode == DRAG) {\r\n                                imgX = event.getRawX();\r\n                                imgY = event.getRawY();\r\n                                imgParams.leftMargin = (int) (imgX - imgDX);\r\n                                imgParams.topMargin = (int) (imgY - imgDY);\r\n                                imgParams.rightMargin = 0;\r\n                                imgParams.bottomMargin = 0;\r\n                                imgParams.rightMargin = imgParams.leftMargin + (5 * imgParams.width);\r\n                                imgParams.bottomMargin = imgParams.topMargin + (10 * imgParams.height);\r\n                                view.setLayoutParams(imgParams);\r\n                            } else if (imgMode == ZOOM) {\r\n                                if (event.getPointerCount() == 2) {\r\n                                    imgNewRot = rotation(event);\r\n                                    float r = imgNewRot - d;\r\n                                    angle = r;\r\n                                    imgX = event.getRawX();\r\n                                    imgY = event.getRawY();\r\n                                    float newDist = spacing(event);\r\n                                    if (newDist > 10f) {\r\n                                        float scale = newDist / oldDist * view.getScaleX();\r\n                                        if (scale > 0.6) {\r\n                                            scalediff = scale;\r\n                                            view.setScaleX(scale);\r\n                                            view.setScaleY(scale);\r\n                                        }\r\n                                    }\r\n                                    view.animate().rotationBy(angle).setDuration(0).setInterpolator(new LinearInterpolator()).start();\r\n                                    imgX = event.getRawX();\r\n                                    imgY = event.getRawY();\r\n                                    imgParams.leftMargin = (int) ((imgX - imgDX) + scalediff);\r\n                                    imgParams.topMargin = (int) ((imgY - imgDY) + scalediff);\r\n                                    imgParams.rightMargin = 0;\r\n                                    imgParams.bottomMargin = 0;\r\n                                    imgParams.rightMargin = imgParams.leftMargin + (5 * imgParams.width);\r\n                                    imgParams.bottomMargin = imgParams.topMargin + (10 * imgParams.height);\r\n                                    view.setLayoutParams(imgParams);\r\n                                }\r\n                            }\r\n                            break;\r\n                    }\r\n\r\n                    binding.elementCustomFrame.invalidate();\r\n                }\r\n                return true;\r\n            }\r\n        };\r\n    }\r\n\r\n    int editMode;\r\n\r\n    private View.OnTouchListener onTouchListeneForEditText() {\r\n        return new View.OnTouchListener() {\r\n            Handler handler = new Handler();\r\n\r\n            int numberOfTaps = 0;\r\n            long lastTapTimeMs = 0;\r\n            long touchDownMs = 0;\r\n\r\n            public boolean onTouch(View view, MotionEvent event) {\r\n                if (selectedForEdit != null) {\r\n                    selectedForEdit.setBackground(null);\r\n                    selectedTextView = null;\r\n                    InputMethodManager imm = (InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE);\r\n                    imm.hideSoftInputFromWindow(binding.rootBackground.getWindowToken(), 0);\r\n                }\r\n\r\n                TextView textView = (TextView) view;\r\n\r\n                textView.setBackground(ContextCompat.getDrawable(act, R.drawable.editing_text_border));\r\n                selectedForEdit = textView;\r\n                switch (event.getAction()) {\r\n                    case MotionEvent.ACTION_DOWN:\r\n                        touchDownMs = System.currentTimeMillis();\r\n                        break;\r\n\r\n                    case MotionEvent.ACTION_UP:\r\n                        handler.removeCallbacksAndMessages(null);\r\n\r\n                        if ((System.currentTimeMillis() - touchDownMs) > ViewConfiguration.getTapTimeout()) {\r\n                            //it was not a tap\r\n                            numberOfTaps = 0;\r\n                            lastTapTimeMs = 0;\r\n                            break;\r\n                        }\r\n\r\n                        if (numberOfTaps > 0\r\n                                && (System.currentTimeMillis() - lastTapTimeMs) < ViewConfiguration.getDoubleTapTimeout()) {\r\n                            numberOfTaps += 1;\r\n                        } else {\r\n                            numberOfTaps = 1;\r\n                        }\r\n\r\n                        lastTapTimeMs = System.currentTimeMillis();\r\n\r\n                        if (numberOfTaps == 2) {\r\n                            handler.postDelayed(new Runnable() {\r\n                                @Override\r\n                                public void run() {\r\n                                    //handle double tap\r\n                                    selectedTextAlignment = textView.getTextAlignment();\r\n                                    if (selectedTextAlignment == View.TEXT_ALIGNMENT_TEXT_START) {\r\n                                        CurrentFlagAlign = 0;\r\n                                        binding.textAlignment.setImageDrawable(ContextCompat.getDrawable(act, R.drawable.ic_left_align));\r\n                                    }\r\n                                    if (selectedTextAlignment == View.TEXT_ALIGNMENT_CENTER) {\r\n                                        CurrentFlagAlign = 1;\r\n                                        binding.textAlignment.setImageDrawable(ContextCompat.getDrawable(act, R.drawable.ic_centered_align));\r\n                                    }\r\n                                    if (selectedTextAlignment == View.TEXT_ALIGNMENT_TEXT_END) {\r\n                                        CurrentFlagAlign = 2;\r\n                                        binding.textAlignment.setImageDrawable(ContextCompat.getDrawable(act, R.drawable.ic_right_align));\r\n                                    }\r\n\r\n                                    isTextEditing = true;\r\n                                    binding.textEditorView.setVisibility(View.VISIBLE);\r\n                                    binding.contentView.setEnabled(false);\r\n                                    binding.contentView.setClickable(false);\r\n                                    selectedTextView = textView;\r\n                                    binding.editingBox.setText(selectedTextView.getText().toString());\r\n                                }\r\n                            }, ViewConfiguration.getDoubleTapTimeout());\r\n                        }\r\n                }\r\n                if (gestureDetector.onTouchEvent(event)) {\r\n\r\n\r\n                    return true;\r\n                } else {\r\n                    final int X = (int) event.getRawX();\r\n                    final int Y = (int) event.getRawY();\r\n                    switch (event.getAction() & MotionEvent.ACTION_MASK) {\r\n                        case MotionEvent.ACTION_DOWN:\r\n                            RelativeLayout.LayoutParams lParams = (RelativeLayout.LayoutParams) view.getLayoutParams();\r\n                            _xDelta = X - lParams.leftMargin;\r\n                            _yDelta = Y - lParams.topMargin;\r\n                            editMode = DRAG;\r\n                            break;\r\n                        case MotionEvent.ACTION_POINTER_DOWN:\r\n                            oldDist = spacing(event);\r\n                            if (oldDist > 10f) {\r\n                                editMode = ZOOM;\r\n                            }\r\n                            d = rotation(event);\r\n                            break;\r\n                        case MotionEvent.ACTION_UP:\r\n                            break;\r\n                        case MotionEvent.ACTION_POINTER_UP:\r\n                            editMode = NONE;\r\n                            break;\r\n\r\n                        case MotionEvent.ACTION_MOVE:\r\n                            if (editMode == DRAG) {\r\n                                RelativeLayout.LayoutParams mRparams = (RelativeLayout.LayoutParams) view.getLayoutParams();\r\n                                mRparams.leftMargin = X - _xDelta;\r\n                                mRparams.topMargin = Y - _yDelta;\r\n                                mRparams.rightMargin = -250;\r\n                                mRparams.bottomMargin = -250;\r\n                                view.setLayoutParams(mRparams);\r\n                            } else if (editMode == ZOOM) {\r\n                                RelativeLayout.LayoutParams mRparams = (RelativeLayout.LayoutParams) view.getLayoutParams();\r\n\r\n                                if (event.getPointerCount() == 2) {\r\n                                    newRot = rotation(event);\r\n                                    float r = newRot - d;\r\n                                    angle = r;\r\n                                    x = event.getRawX();\r\n                                    y = event.getRawY();\r\n\r\n                                    view.animate().rotationBy(angle).setDuration(0).setInterpolator(new LinearInterpolator()).start();\r\n                                    x = event.getRawX();\r\n                                    y = event.getRawY();\r\n                                    mRparams.leftMargin = X - _xDelta;\r\n                                    mRparams.topMargin = Y - _yDelta;\r\n                                    mRparams.rightMargin = -250;\r\n                                    mRparams.bottomMargin = -250;\r\n                                    view.setLayoutParams(mRparams);\r\n                                }\r\n                            }\r\n                            break;\r\n                    }\r\n                    // root.invalidate();\r\n                    return false;\r\n                }\r\n            }\r\n        };\r\n    }\r\n\r\n    private float spacing(MotionEvent event) {\r\n        float x = event.getX(0) - event.getX(1);\r\n        float y = event.getY(0) - event.getY(1);\r\n        return (float) Math.sqrt(x * x + y * y);\r\n    }\r\n\r\n    private float rotation(MotionEvent event) {\r\n        double delta_x = (event.getX(0) - event.getX(1));\r\n        double delta_y = (event.getY(0) - event.getY(1));\r\n        double radians = Math.atan2(delta_y, delta_x);\r\n        return (float) Math.toDegrees(radians);\r\n    }\r\n\r\n    public void TouchImageMotion() {\r\n        binding.editableImageview.setOnTouchListener(new View.OnTouchListener() {\r\n            @SuppressLint(\"ClickableViewAccessibility\")\r\n            @Override\r\n            public boolean onTouch(View view, MotionEvent motionEvent) {\r\n                final ImageView view1 = (ImageView) view;\r\n                ((BitmapDrawable) view1.getDrawable()).setAntiAlias(true);\r\n                switch (motionEvent.getAction() & MotionEvent.ACTION_MASK) {\r\n                    case MotionEvent.ACTION_DOWN:\r\n                        parms = (RelativeLayout.LayoutParams) view.getLayoutParams();\r\n                        startwidth = parms.width;\r\n                        startheight = parms.height;\r\n                        dx = motionEvent.getRawX() - parms.leftMargin;\r\n                        dy = motionEvent.getRawY() - parms.topMargin;\r\n                        mode = DRAG;\r\n                        break;\r\n                    case MotionEvent.ACTION_POINTER_DOWN:\r\n                        oldDist = spacing(motionEvent);\r\n                        if (oldDist > 10f) {\r\n                            mode = ZOOM;\r\n                        }\r\n                        d = rotation(motionEvent);\r\n                        break;\r\n                    case MotionEvent.ACTION_UP:\r\n                        break;\r\n                    case MotionEvent.ACTION_POINTER_UP:\r\n                        mode = NONE;\r\n                        break;\r\n                    case MotionEvent.ACTION_MOVE:\r\n                        if (mode == DRAG) {\r\n                            x = motionEvent.getRawX();\r\n                            y = motionEvent.getRawY();\r\n                            parms.leftMargin = (int) (x - dx);\r\n                            parms.topMargin = (int) (y - dy);\r\n                            parms.rightMargin = 0;\r\n                            parms.bottomMargin = 0;\r\n                            parms.rightMargin = parms.leftMargin + (5 * parms.width);\r\n                            parms.bottomMargin = parms.topMargin + (10 * parms.height);\r\n                            view.setLayoutParams(parms);\r\n                        } else if (mode == ZOOM) {\r\n                            if (motionEvent.getPointerCount() == 2) {\r\n                                newRot = rotation(motionEvent);\r\n                                float r = newRot - d;\r\n                                angle = r;\r\n                                x = motionEvent.getRawX();\r\n                                y = motionEvent.getRawY();\r\n                                float newDist = spacing(motionEvent);\r\n                                if (newDist > 10f) {\r\n                                    float scale = newDist / oldDist * view.getScaleX();\r\n                                    if (scale > 0.6) {\r\n                                        scalediff = scale;\r\n                                        view.setScaleX(scale);\r\n                                        view.setScaleY(scale);\r\n                                    }\r\n                                }\r\n                                view.animate().rotationBy(angle).setDuration(0).setInterpolator(new LinearInterpolator()).start();\r\n                                x = motionEvent.getRawX();\r\n                                y = motionEvent.getRawY();\r\n                                parms.leftMargin = (int) ((x - dx) + scalediff);\r\n                                parms.topMargin = (int) ((y - dy) + scalediff);\r\n                                parms.rightMargin = 0;\r\n                                parms.bottomMargin = 0;\r\n                                parms.rightMargin = parms.leftMargin + (5 * parms.width);\r\n                                parms.bottomMargin = parms.topMargin + (10 * parms.height);\r\n                                view.setLayoutParams(parms);\r\n                            }\r\n                        }\r\n                        break;\r\n                }\r\n                return true;\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/app/brandmania/Activity/custom/ViewAllFrameImageActivity.java b/app/src/main/java/com/app/brandmania/Activity/custom/ViewAllFrameImageActivity.java
--- a/app/src/main/java/com/app/brandmania/Activity/custom/ViewAllFrameImageActivity.java	(revision 9f316353b6784bffd0bc962d6abb94b9d35bb532)
+++ b/app/src/main/java/com/app/brandmania/Activity/custom/ViewAllFrameImageActivity.java	(date 1638529750087)
@@ -178,10 +178,10 @@
     private ActivityViewAllFrameImageBinding binding;
     File new_file;
     GestureDetector gestureDetector;
-     float angle = 0;
+    float angle = 0;
     private int _xDelta;
     private int _yDelta;
-     ImageFromGalaryModel imageFromGalaryModel;
+    ImageFromGalaryModel imageFromGalaryModel;
     Drawable yourDrawable;
     public int startwidth;
     private boolean isRemoveFrame = false;
@@ -224,10 +224,10 @@
     private ImageList selectedObject;
 
     int mode = NONE;
-     private int colorCodeForBackground = 0;
+    private int colorCodeForBackground = 0;
     Gson gson;
     public DBManager dbManager;
-     boolean canLoadImage = false;
+    boolean canLoadImage = false;
     boolean fromViewAll = false;
     private float DefaultScaleX;
     private float DefaultScaleY;
@@ -370,7 +370,7 @@
                         }
                     }
 
-                }else{
+                } else {
                     addBrandList();
                 }
             }
@@ -456,10 +456,12 @@
         binding.logoCustom.setTag("0");
 
     }
+
     AddBrandFragment addBrandFragment;
+
     public void addBrandList() {
-        if (addBrandFragment!=null){
-            if (addBrandFragment.isVisible()){
+        if (addBrandFragment != null) {
+            if (addBrandFragment.isVisible()) {
                 addBrandFragment.dismiss();
             }
         }
@@ -1188,7 +1190,7 @@
             }
         });
 
-         alertDialog.setCancelable(false);
+        alertDialog.setCancelable(false);
         alertDialog.getWindow().setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));
         alertDialog.show();
     }
@@ -2155,7 +2157,6 @@
     }
 
 
-
     private class SingleTapConfirm extends GestureDetector.SimpleOnGestureListener {
         @Override
         public boolean onSingleTapUp(MotionEvent event) {
@@ -2197,7 +2198,7 @@
                 if (ResponseHandler.getBool(respJson, "status")) {
                     JSONArray dataJson = ResponseHandler.getJSONArray(respJson, "data");
                     try {
-                          int imageCounter = Integer.parseInt(ResponseHandler.getString(dataJson.getJSONObject(0), "total_img_counter").equalsIgnoreCase("Unlimited") ? "-1" : ResponseHandler.getString(dataJson.getJSONObject(0), "total_img_counter"));
+                        int imageCounter = Integer.parseInt(ResponseHandler.getString(dataJson.getJSONObject(0), "total_img_counter").equalsIgnoreCase("Unlimited") ? "-1" : ResponseHandler.getString(dataJson.getJSONObject(0), "total_img_counter"));
 
                         int used_img_counter = ResponseHandler.getString(dataJson.getJSONObject(0), "frame_counter").equals("") ? 0 : Integer.parseInt(ResponseHandler.getString(dataJson.getJSONObject(0), "used_img_counter"));
 
@@ -2322,13 +2323,13 @@
 
     }
 
-     private RelativeLayout.LayoutParams imgParams;
+    private RelativeLayout.LayoutParams imgParams;
     private float imgDX, imgDY;
     private float imgX, imgY;
     private int imgMode;
     private float imgNewRot = 0f;
 
-     private View.OnTouchListener onTouchListener() {
+    private View.OnTouchListener onTouchListener() {
         return new View.OnTouchListener() {
             Handler handler = new Handler();
 
@@ -2366,7 +2367,7 @@
                             handler.postDelayed(new Runnable() {
                                 @Override
                                 public void run() {
-                                    if (prefManager.getActiveBrand()!=null) {
+                                    if (prefManager.getActiveBrand() != null) {
                                         if (prefManager.getActiveBrand().getLogo().isEmpty()) {
                                             onSelectImageClick(view);
                                         } else {
@@ -2384,7 +2385,7 @@
                                                         .show();
                                             }
                                         }
-                                    }else{
+                                    } else {
                                         addBrandList();
                                     }
                                 }
