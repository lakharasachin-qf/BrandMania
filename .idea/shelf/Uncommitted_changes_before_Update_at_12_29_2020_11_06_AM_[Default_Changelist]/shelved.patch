Index: app/src/main/java/com/app/brandmania/Adapter/SliderAdapter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.app.brandmania.Adapter;\r\n\r\nimport android.app.Activity;\r\nimport android.content.Intent;\r\nimport android.util.Log;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.widget.Button;\r\nimport android.widget.ImageView;\r\nimport android.widget.RelativeLayout;\r\nimport android.widget.TextView;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\nimport androidx.viewpager2.widget.ViewPager2;\r\n\r\nimport com.app.brandmania.Activity.RazorPayActivity;\r\nimport com.app.brandmania.Common.Constant;\r\nimport com.app.brandmania.Common.PreafManager;\r\nimport com.app.brandmania.Model.SliderItem;\r\nimport com.app.brandmania.R;\r\nimport com.google.gson.Gson;\r\nimport com.makeramen.roundedimageview.RoundedImageView;\r\n\r\nimport java.util.List;\r\n\r\npublic class SliderAdapter extends RecyclerView.Adapter<SliderAdapter.SliderViewHolder> {\r\n   private List<SliderItem> sliderItems;\r\n   private ViewPager2 viewPager2;\r\n    Activity activity;\r\n    private String brandId;\r\n    PreafManager preafManager;\r\n    Gson gson;\r\n    public SliderAdapter(List<SliderItem> sliderItems, Activity activity, String selectedBrand) {\r\n        this.sliderItems = sliderItems;\r\n        this.activity = activity;\r\n        brandId=selectedBrand;\r\n        gson=new Gson();\r\n        preafManager=new PreafManager(activity);\r\n    }\r\n\r\n    @Override\r\n    public SliderViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\r\n        return new SliderViewHolder(LayoutInflater.from(parent.getContext()).inflate(R.layout.slide_item_container,parent,false));\r\n    }\r\n\r\n    @Override public void onBindViewHolder(@NonNull SliderViewHolder holder, int position) {\r\n            holder.setLayout(sliderItems.get(position));\r\n            holder.packageBtn.setOnClickListener(new View.OnClickListener() {\r\n                @Override\r\n                public void onClick(View view) {\r\n                    Intent intent=new Intent(activity, RazorPayActivity.class);\r\n                    intent.putExtra(\"AmountText\", holder.priceForPay.getText().toString());\r\n                    sliderItems.get(position).setBrandId(brandId);\r\n                    intent.putExtra(\"detailsObj\",gson.toJson(sliderItems.get(position)));\r\n                    activity.startActivity(intent);\r\n                 //   intent.addCategory(Intent.CATEGORY_HOME);\r\n                    //intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\r\n                    activity.overridePendingTransition(R.anim.slide_right_in, R.anim.slide_right_out);\r\n                }\r\n            });\r\n\r\n            if (activity.getIntent().hasExtra(\"Profile\") && preafManager.getActiveBrand().getPackage_id().equals(sliderItems.get(position).getPackageid())){\r\n                holder.packageBtn.setVisibility(View.GONE);\r\n\r\n                holder.subcribedBtn.setVisibility(View.VISIBLE);\r\n            }\r\n    }\r\n\r\n    @Override public int getItemCount() {\r\n        return sliderItems.size();\r\n    }\r\n\r\n    public class SliderViewHolder extends RecyclerView.ViewHolder\r\n    {\r\n        private TextView priceForPay;\r\n        private TextView packageTitle;\r\n        private TextView templateTitle;\r\n        private TextView imageTitle;\r\n        private TextView payTitle;\r\n        private TextView packageBtn;\r\n        private TextView subcribedBtn;\r\n        public SliderViewHolder(@NonNull View itemView) {\r\n            super(itemView);\r\n            priceForPay=itemView.findViewById(R.id.priceForPay);\r\n            packageTitle=itemView.findViewById(R.id.packageTitle);\r\n            templateTitle=itemView.findViewById(R.id.templateTiltle);\r\n            imageTitle=itemView.findViewById(R.id.ImageTiltle);\r\n            payTitle=itemView.findViewById(R.id.payTiltle);\r\n            packageBtn=itemView.findViewById(R.id.selectPlaneBtn);\r\n            subcribedBtn=itemView.findViewById(R.id.subscribePlaneBtn);\r\n        }\r\n        void setLayout(SliderItem sliderItem)\r\n        {\r\n\r\n            priceForPay.setText(sliderItem.getPriceForPay());\r\n            packageTitle.setText(sliderItem.getPackageTitle());\r\n            templateTitle.setText(sliderItem.getTemplateTitle()+\" - Template / Brand\");\r\n            imageTitle.setText(sliderItem.getImageTitle() + \" Image Download / Year\");\r\n            payTitle.setText(sliderItem.getPayTitle() +\" / Year\");\r\n\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/app/brandmania/Adapter/SliderAdapter.java	(revision 370ee30acca3d3d48ac095c84f0db25ae164c26e)
+++ app/src/main/java/com/app/brandmania/Adapter/SliderAdapter.java	(date 1609159932921)
@@ -61,7 +61,7 @@
                 }
             });
 
-            if (activity.getIntent().hasExtra("Profile") && preafManager.getActiveBrand().getPackage_id().equals(sliderItems.get(position).getPackageid())){
+            if (activity.getIntent().hasExtra("Profile") && preafManager.getActiveBrand().getPackage_id().equals(sliderItems.get(position).getPackageid()) && preafManager.getActiveBrand().getIs_payment_pending().equalsIgnoreCase("0")){
                 holder.packageBtn.setVisibility(View.GONE);
 
                 holder.subcribedBtn.setVisibility(View.VISIBLE);
Index: app/src/main/res/layout/frame_tab.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<layout>\r\n    <RelativeLayout\r\n        xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"match_parent\">\r\n\r\n        <androidx.recyclerview.widget.RecyclerView\r\n            android:id=\"@+id/frameRecycler\"\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"match_parent\">\r\n        </androidx.recyclerview.widget.RecyclerView>\r\n\r\n    </RelativeLayout>\r\n</layout>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/layout/frame_tab.xml	(revision 370ee30acca3d3d48ac095c84f0db25ae164c26e)
+++ app/src/main/res/layout/frame_tab.xml	(date 1609160760955)
@@ -4,12 +4,48 @@
         xmlns:android="http://schemas.android.com/apk/res/android"
         android:layout_width="match_parent"
         android:layout_height="match_parent">
-
-        <androidx.recyclerview.widget.RecyclerView
-            android:id="@+id/frameRecycler"
-            android:layout_width="match_parent"
-            android:layout_height="match_parent">
-        </androidx.recyclerview.widget.RecyclerView>
+        <androidx.core.widget.NestedScrollView
+            android:layout_width="match_parent"
+            android:layout_height="match_parent">
+            <LinearLayout
+                android:orientation="vertical"
+                android:layout_width="match_parent"
+                android:layout_height="match_parent">
+                <androidx.recyclerview.widget.RecyclerView
+                    android:nestedScrollingEnabled="false"
+                    android:id="@+id/frameRecycler"
+                    android:layout_width="match_parent"
+                    android:clipToPadding="false"
+                    android:paddingBottom="@dimen/_30sdp"
+                    android:layout_height="wrap_content">
+
+                </androidx.recyclerview.widget.RecyclerView>
 
+                <TextView
+                    android:layout_below="@+id/frameRecycler"
+                    android:layout_centerHorizontal="true"
+                    android:layout_gravity="center_horizontal"
+                    android:visibility="visible"
+                    android:layout_marginBottom="@dimen/_30sdp"
+                    android:backgroundTint="@color/colorthird"
+                    android:gravity="center"
+                    android:background="@drawable/buttoncornar"
+                    android:id="@+id/subscribePlaneBtn"
+                    android:layout_width="wrap_content"
+                    android:layout_height="@dimen/_28sdp"
+                    android:paddingStart="@dimen/_15sdp"
+                    android:paddingEnd="@dimen/_15sdp"
+                    android:layout_marginTop="@dimen/_10sdp"
+                    android:fontFamily="@font/inter_regular"
+                    android:text="Reuqest For Frame"
+                    android:textColor="#FFF"
+                    android:textAlignment="center"
+                    android:textAllCaps="false"
+                    android:textSize="@dimen/_10sdp"
+                    />
+
+            </LinearLayout>
+        </androidx.core.widget.NestedScrollView>
+
     </RelativeLayout>
 </layout>
\ No newline at end of file
Index: app/src/main/java/com/app/brandmania/Fragment/top/FrameTab.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.app.brandmania.Fragment.top;\r\n\r\nimport android.app.Activity;\r\nimport android.os.Bundle;\r\nimport android.util.Log;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\n\r\nimport androidx.databinding.DataBindingUtil;\r\nimport androidx.fragment.app.Fragment;\r\nimport androidx.recyclerview.widget.GridLayoutManager;\r\nimport androidx.recyclerview.widget.LinearLayoutManager;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport com.android.volley.AuthFailureError;\r\nimport com.android.volley.Request;\r\nimport com.android.volley.RequestQueue;\r\nimport com.android.volley.Response;\r\nimport com.android.volley.VolleyError;\r\nimport com.android.volley.toolbox.StringRequest;\r\nimport com.android.volley.toolbox.Volley;\r\nimport com.app.brandmania.Adapter.BrandAdapter;\r\nimport com.app.brandmania.Adapter.ImageCategoryAddaptor;\r\nimport com.app.brandmania.Adapter.MenuAddaptor;\r\nimport com.app.brandmania.Adapter.MultiListItem;\r\nimport com.app.brandmania.Common.PreafManager;\r\nimport com.app.brandmania.Common.ResponseHandler;\r\nimport com.app.brandmania.Model.BrandListItem;\r\nimport com.app.brandmania.Model.FrameItem;\r\nimport com.app.brandmania.Model.ImageList;\r\nimport com.app.brandmania.R;\r\nimport com.app.brandmania.Utils.APIs;\r\nimport com.app.brandmania.Utils.Utility;\r\nimport com.app.brandmania.databinding.FrameTabBinding;\r\nimport com.google.gson.Gson;\r\n\r\nimport org.json.JSONException;\r\nimport org.json.JSONObject;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\n\r\nimport static com.app.brandmania.Adapter.ImageCategoryAddaptor.FROM_VIEWALL;\r\n\r\npublic class FrameTab extends Fragment {\r\n\r\n    Activity act;\r\n    private FrameTabBinding binding;\r\n    private String is_frame=\"\";\r\n    PreafManager preafManager;\r\n    ArrayList<ImageList> menuModels = new ArrayList<>();\r\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\r\n                             Bundle savedInstanceState) {\r\n        act = getActivity();\r\n        binding= DataBindingUtil.inflate(inflater,R.layout.frame_tab,container,false);\r\n        preafManager=new PreafManager(getActivity());\r\n        getFrame();\r\n        return binding.getRoot();\r\n    }\r\n\r\n    public void setAdapterFrame() {\r\n        ImageCategoryAddaptor menuAddaptor = new ImageCategoryAddaptor(menuModels, act);\r\n        RecyclerView.LayoutManager mLayoutManager = new GridLayoutManager(act, 4);\r\n        binding.frameRecycler.setLayoutManager(mLayoutManager);\r\n        binding.frameRecycler.setHasFixedSize(true);\r\n        binding.frameRecycler.setAdapter(menuAddaptor);\r\n    }\r\n\r\n    private void getFrame() {\r\n        Utility.Log(\"API : \", APIs.GET_FRAME);\r\n        StringRequest stringRequest = new StringRequest(Request.Method.POST, APIs.GET_FRAME,new Response.Listener<String>() {\r\n            @Override\r\n            public void onResponse(String response) {\r\n\r\n                Utility.Log(\"GET_FRdsdAME : \", response);\r\n\r\n                try {\r\n                    JSONObject jsonObject = new JSONObject(response);\r\n                    menuModels = ResponseHandler.HandleGetFrameList(jsonObject);\r\n                    ImageCategoryAddaptor menuAddaptor = new ImageCategoryAddaptor(menuModels, act);\r\n                    RecyclerView.LayoutManager mLayoutManager = new GridLayoutManager(act, 4);\r\n                    binding.frameRecycler.setLayoutManager(mLayoutManager);\r\n                    binding.frameRecycler.setHasFixedSize(true);\r\n                    binding.frameRecycler.setAdapter(menuAddaptor);\r\n\r\n                } catch (JSONException e) {\r\n                    e.printStackTrace();\r\n                }\r\n\r\n            }\r\n        },\r\n                new Response.ErrorListener() {\r\n                    @Override\r\n                    public void onErrorResponse(VolleyError error) {\r\n\r\n                        error.printStackTrace();\r\n//                        String body;\r\n//                        body = new String(error.networkResponse.data, StandardCharsets.UTF_8);\r\n//                        Log.e(\"Load-Get_Exam \", body);\r\n\r\n                    }\r\n                }\r\n        ) {\r\n            /**\r\n             * Passing some request headers*\r\n             */\r\n            @Override\r\n            public Map<String, String> getHeaders() throws AuthFailureError {\r\n                Map<String, String> params = new HashMap<String, String>();\r\n                params.put(\"Accept\", \"application/x-www-form-urlencoded\");//application/json\r\n                params.put(\"Content-Type\", \"application/x-www-form-urlencoded\");\r\n                params.put(\"Authorization\", \"Bearer\" + preafManager.getUserToken());\r\n                Log.e(\"Token\", params.toString());\r\n                return params;\r\n            }\r\n\r\n            @Override\r\n            protected Map<String, String> getParams() {\r\n                Map<String, String> params = new HashMap<>();\r\n                params.put(\"brand_id\",preafManager.getActiveBrand().getId());\r\n                Utility.Log(\"POSTED-PARAMS-\", params.toString());\r\n                return params;\r\n            }\r\n\r\n        };\r\n\r\n        RequestQueue queue = Volley.newRequestQueue(act);\r\n        queue.add(stringRequest);\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/app/brandmania/Fragment/top/FrameTab.java	(revision 370ee30acca3d3d48ac095c84f0db25ae164c26e)
+++ app/src/main/java/com/app/brandmania/Fragment/top/FrameTab.java	(date 1609160750771)
@@ -1,6 +1,9 @@
 package com.app.brandmania.Fragment.top;
 
 import android.app.Activity;
+import android.content.Intent;
+import android.graphics.Color;
+import android.graphics.drawable.ColorDrawable;
 import android.os.Bundle;
 import android.util.Log;
 import android.view.LayoutInflater;
@@ -20,6 +23,7 @@
 import com.android.volley.VolleyError;
 import com.android.volley.toolbox.StringRequest;
 import com.android.volley.toolbox.Volley;
+import com.app.brandmania.Activity.PackageActivity;
 import com.app.brandmania.Adapter.BrandAdapter;
 import com.app.brandmania.Adapter.ImageCategoryAddaptor;
 import com.app.brandmania.Adapter.MenuAddaptor;
@@ -32,6 +36,7 @@
 import com.app.brandmania.R;
 import com.app.brandmania.Utils.APIs;
 import com.app.brandmania.Utils.Utility;
+import com.app.brandmania.databinding.DialogUpgradeLayoutBinding;
 import com.app.brandmania.databinding.FrameTabBinding;
 import com.google.gson.Gson;
 
@@ -57,9 +62,47 @@
         binding= DataBindingUtil.inflate(inflater,R.layout.frame_tab,container,false);
         preafManager=new PreafManager(getActivity());
         getFrame();
+        binding.subscribePlaneBtn.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                triggerUpgradePackage();
+            }
+        });
         return binding.getRoot();
     }
 
+    //show dialog for upgrading package for using all 6 frames
+    public DialogUpgradeLayoutBinding upgradeLayoutBinding;
+    private void triggerUpgradePackage() {
+        upgradeLayoutBinding=DataBindingUtil.inflate(LayoutInflater.from(act), R.layout.dialog_upgrade_layout, null, false);
+        androidx.appcompat.app.AlertDialog.Builder builder = new androidx.appcompat.app.AlertDialog.Builder(act, R.style.MyAlertDialogStyle_extend);
+        builder.setView(upgradeLayoutBinding.getRoot());
+        androidx.appcompat.app.AlertDialog alertDialog = builder.create();
+        alertDialog.setContentView(upgradeLayoutBinding.getRoot());
+
+        upgradeLayoutBinding.viewPackage.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                alertDialog.dismiss();
+                Intent intent = new Intent(act, PackageActivity.class);
+                act.startActivity(intent);
+                act.overridePendingTransition(R.anim.slide_right_in, R.anim.slide_right_out);
+            }
+        });
+        upgradeLayoutBinding.closeBtn.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                alertDialog.dismiss();
+            }
+        });
+
+        alertDialog.setCancelable(false);
+        alertDialog.getWindow().setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));
+        alertDialog.show();
+
+    }
+
+
     public void setAdapterFrame() {
         ImageCategoryAddaptor menuAddaptor = new ImageCategoryAddaptor(menuModels, act);
         RecyclerView.LayoutManager mLayoutManager = new GridLayoutManager(act, 4);
Index: app/src/main/java/com/app/brandmania/Activity/ViewAllImage.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.app.brandmania.Activity;\r\n\r\nimport android.Manifest;\r\nimport android.annotation.SuppressLint;\r\nimport android.app.Activity;\r\nimport android.app.AlertDialog;\r\nimport android.content.DialogInterface;\r\nimport android.content.Intent;\r\nimport android.content.pm.PackageManager;\r\nimport android.content.res.ColorStateList;\r\nimport android.graphics.Bitmap;\r\nimport android.graphics.BitmapFactory;\r\nimport android.graphics.Canvas;\r\nimport android.graphics.Color;\r\nimport android.graphics.PorterDuff;\r\nimport android.graphics.Typeface;\r\nimport android.graphics.drawable.BitmapDrawable;\r\nimport android.graphics.drawable.ColorDrawable;\r\nimport android.graphics.drawable.Drawable;\r\nimport android.net.Uri;\r\nimport android.os.Build;\r\nimport android.os.Bundle;\r\nimport android.os.Environment;\r\nimport android.provider.MediaStore;\r\nimport android.util.Log;\r\nimport android.view.GestureDetector;\r\nimport android.view.LayoutInflater;\r\nimport android.view.MotionEvent;\r\nimport android.view.ScaleGestureDetector;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.widget.ImageView;\r\nimport android.widget.LinearLayout;\r\nimport android.widget.RelativeLayout;\r\nimport android.widget.Toast;\r\n\r\nimport androidx.annotation.RequiresApi;\r\nimport androidx.core.app.ActivityCompat;\r\nimport androidx.databinding.DataBindingUtil;\r\nimport androidx.recyclerview.widget.GridLayoutManager;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\nimport androidx.viewpager.widget.ViewPager;\r\n\r\nimport com.android.volley.AuthFailureError;\r\nimport com.android.volley.Request;\r\nimport com.android.volley.RequestQueue;\r\nimport com.android.volley.Response;\r\nimport com.android.volley.VolleyError;\r\nimport com.android.volley.toolbox.StringRequest;\r\nimport com.android.volley.toolbox.Volley;\r\nimport com.androidnetworking.AndroidNetworking;\r\nimport com.androidnetworking.common.ANRequest;\r\nimport com.androidnetworking.common.Priority;\r\nimport com.androidnetworking.error.ANError;\r\nimport com.androidnetworking.interfaces.JSONObjectRequestListener;\r\nimport com.androidnetworking.interfaces.UploadProgressListener;\r\nimport com.app.brandmania.Adapter.FooterModel;\r\nimport com.app.brandmania.Adapter.ImageCateItemeInterFace;\r\nimport com.app.brandmania.Adapter.ImageCategoryAddaptor;\r\nimport com.app.brandmania.Adapter.ViewAllTopTabAdapter;\r\nimport com.app.brandmania.Common.PreafManager;\r\nimport com.app.brandmania.Common.ResponseHandler;\r\nimport com.app.brandmania.Connection.BaseActivity;\r\nimport com.app.brandmania.Interface.IBackendFrameSelect;\r\nimport com.app.brandmania.Interface.IColorChange;\r\nimport com.app.brandmania.Interface.IItaliTextEvent;\r\nimport com.app.brandmania.Interface.ITextBoldEvent;\r\nimport com.app.brandmania.Interface.ITextColorChangeEvent;\r\nimport com.app.brandmania.Interface.ITextSizeEvent;\r\nimport com.app.brandmania.Interface.IUnderLineTextEvent;\r\nimport com.app.brandmania.Interface.onFooterSelectListener;\r\nimport com.app.brandmania.Model.BrandListItem;\r\nimport com.app.brandmania.Model.DashBoardItem;\r\nimport com.app.brandmania.Model.FrameItem;\r\nimport com.app.brandmania.Model.ImageList;\r\nimport com.app.brandmania.R;\r\nimport com.app.brandmania.Utils.APIs;\r\nimport com.app.brandmania.Utils.CodeReUse;\r\nimport com.app.brandmania.Utils.IFontChangeEvent;\r\nimport com.app.brandmania.Utils.Utility;\r\nimport com.app.brandmania.databinding.ActivityViewAllImageBinding;\r\nimport com.app.brandmania.databinding.DialogUpgradeDownloadLimitExpireBinding;\r\nimport com.app.brandmania.databinding.DialogUpgradeLayoutBinding;\r\nimport com.app.brandmania.databinding.DialogUpgradeLayoutEnterpriseBinding;\r\nimport com.app.brandmania.databinding.DialogUpgradeLayoutSecondBinding;\r\nimport com.app.brandmania.databinding.LayoutForLoadFiveBinding;\r\nimport com.app.brandmania.databinding.LayoutForLoadFourBinding;\r\nimport com.app.brandmania.databinding.LayoutForLoadOneBinding;\r\nimport com.app.brandmania.databinding.LayoutForLoadSixBinding;\r\nimport com.app.brandmania.databinding.LayoutForLoadThreeBinding;\r\nimport com.app.brandmania.databinding.LayoutForLoadTwoBinding;\r\nimport com.bumptech.glide.Glide;\r\nimport com.google.android.material.tabs.TabLayout;\r\nimport com.google.gson.Gson;\r\nimport com.jaredrummler.android.colorpicker.ColorPickerDialogListener;\r\nimport com.jaredrummler.android.colorpicker.ColorPickerView;\r\nimport com.theartofdev.edmodo.cropper.CropImage;\r\nimport com.theartofdev.edmodo.cropper.CropImageView;\r\n\r\nimport org.json.JSONArray;\r\nimport org.json.JSONException;\r\nimport org.json.JSONObject;\r\n\r\nimport java.io.File;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.FileOutputStream;\r\nimport java.io.IOException;\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.ArrayList;\r\nimport java.util.Date;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\n\r\nimport smartdevelop.ir.eram.showcaseviewlib.GuideView;\r\nimport smartdevelop.ir.eram.showcaseviewlib.config.DismissType;\r\nimport smartdevelop.ir.eram.showcaseviewlib.config.Gravity;\r\nimport smartdevelop.ir.eram.showcaseviewlib.listener.GuideListener;\r\n\r\nimport static android.view.WindowManager.LayoutParams.SOFT_INPUT_ADJUST_PAN;\r\nimport static com.app.brandmania.Adapter.ImageCategoryAddaptor.FROM_VIEWALL;\r\n\r\npublic class ViewAllImage extends BaseActivity implements ImageCateItemeInterFace,alertListenerCallback, ITextColorChangeEvent, IFontChangeEvent,ITextBoldEvent,\r\n        IItaliTextEvent, ColorPickerDialogListener, IUnderLineTextEvent, IColorChange, ColorPickerView.OnColorChangedListener,\r\n        ITextSizeEvent, onFooterSelectListener, IBackendFrameSelect {\r\n    Activity act;\r\n    ViewPager viewPager;\r\n    private boolean isLoading = false;\r\n    ArrayList<ImageList> AddFavorite=new ArrayList<>();\r\n    private ActivityViewAllImageBinding binding;\r\n    ArrayList<BrandListItem> multiListItems=new ArrayList<>();\r\n    ArrayList<ImageList> menuModels = new ArrayList<>();\r\n    ArrayList<FrameItem> brandListItems = new ArrayList<>();\r\n    public static final int DOWLOAD = 1;\r\n    public static final int ADDFAV = 3;\r\n    private static final int REQUEST_CALL = 1;\r\n    public static final int REMOVEFAV = 3;\r\n    private String is_frame=\"\";\r\n    private String is_payment_pending=\"\";\r\n    private String packagee=\"\";\r\n    ArrayList<FrameItem> viewPagerItems = new ArrayList<>();\r\n    PreafManager preafManager;\r\n    Gson gson;\r\n    String Website;\r\n    private DashBoardItem imageList;\r\n    private ImageList selectedObject;\r\n    LinearLayout sliderDotspanel;\r\n    private int dotscount;\r\n    private ImageView[] dots;\r\n\r\n    FrameItem selectedModelFromView;\r\n    AlertDialog.Builder alertDialogBuilder;\r\n    File new_file;\r\n    private Uri mCropImageUri;\r\n    private ScaleGestureDetector scaleGestureDetector;\r\n    private float mScaleFactor = 1.0f;\r\n    int editorFragment;\r\n    private int xDelta;\r\n    private int yDelta;\r\n    private ViewGroup mainLayout;\r\n    private boolean isUserFree = true;\r\n    private boolean canDownload = true;\r\n    private int FrameCountForDownload = 2;\r\n\r\n    private boolean isUsingCustomFrame = true;\r\n\r\n    //Version 3\r\n    private ImageList selectedBackendFrame = null;\r\n    private FooterModel selectedFooterModel;\r\n    private boolean updateLogo = false;\r\n    private Bitmap selectedLogo;\r\n\r\n    @Override\r\n    public void onCreate(Bundle savedInstanceState) {\r\n        setTheme(R.style.AppTheme_material_theme);\r\n        super.onCreate(savedInstanceState);\r\n        act = this;\r\n        //triggerUpgradePackage();\r\n        act.getWindow().setSoftInputMode(SOFT_INPUT_ADJUST_PAN);\r\n        binding = DataBindingUtil.setContentView(act, R.layout.activity_view_all_image);\r\n        preafManager = new PreafManager(this);\r\n        binding.titleName.setSelected(true);\r\n        gson = new Gson();\r\n        selectedObject = gson.fromJson(getIntent().getStringExtra(\"selectedimage\"), ImageList.class);\r\n        getFrame();\r\n        getBrandList();\r\n        Website = preafManager.getActiveBrand().getWebsite();\r\n        imageList = gson.fromJson(getIntent().getStringExtra(\"detailsObj\"), DashBoardItem.class);\r\n        binding.titleName.setText(imageList.getName());\r\n       // getAllImages();\r\n        scaleGestureDetector = new ScaleGestureDetector(this, new ScaleListener());\r\n\r\n        mainLayout = (RelativeLayout) findViewById(R.id.elementCustomFrame);\r\n\r\n        updateLogo = preafManager.getActiveBrand().getLogo().isEmpty();\r\n\r\n\r\n        binding.logoEmptyState.setOnTouchListener(onTouchListener());\r\n        binding.logoCustom.setOnTouchListener(onTouchListener());\r\n        gestureDetector = new GestureDetector(this, new SingleTapConfirm());\r\n\r\n\r\n        binding.backIcon.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                onBackPressed();\r\n            }\r\n        });\r\n\r\n        binding.fabroutIcon.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                if (selectedBackendFrame != null)\r\n                    selectedObject.setFrame1Id(selectedBackendFrame.getFrame1Id());\r\n\r\n                selectedObject.setCustom(isUsingCustomFrame);\r\n\r\n                preafManager.AddToMyFavorites(selectedObject);\r\n\r\n                if (binding.fabroutIcon.getVisibility() == View.VISIBLE) {\r\n                    binding.fabroutIcon.setVisibility(View.GONE);\r\n                    binding.addfabroutIcon.setVisibility(View.VISIBLE);\r\n                }\r\n\r\n                downloadAndShareApi(ADDFAV,null);\r\n            }\r\n        });\r\n        binding.addfabroutIcon.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                if (selectedBackendFrame != null)\r\n                    selectedObject.setFrame1Id(selectedBackendFrame.getFrame1Id());\r\n\r\n                selectedObject.setCustom(isUsingCustomFrame);\r\n\r\n                preafManager.removeFromMyFavorites(selectedObject);\r\n\r\n                if (binding.addfabroutIcon.getVisibility() == View.VISIBLE) {\r\n                    binding.addfabroutIcon.setVisibility(View.GONE);\r\n                    binding.fabroutIcon.setVisibility(View.VISIBLE);\r\n                }\r\n\r\n                removeFromFavourite(REMOVEFAV);\r\n            }\r\n        });\r\n\r\n        binding.downloadIcon.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                if (selectedObject.isImageFree()) {\r\n                    if (isUsingCustomFrame && selectedFooterModel != null && !selectedFooterModel.isFree()) {\r\n                        askForUpgradeToEnterpisePackage();\r\n                        return;\r\n                    }\r\n                    getImageDownloadRights(\"Download\");\r\n                }else{\r\n                    askForPayTheirPayment();\r\n                }\r\n            }\r\n        });\r\n        binding.shareIcon.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                if (selectedObject.isImageFree()) {\r\n                    if (isUsingCustomFrame && selectedFooterModel != null && !selectedFooterModel.isFree()) {\r\n                        askForUpgradeToEnterpisePackage();\r\n                        return;\r\n                    }\r\n                    getImageDownloadRights(\"Share\");\r\n                }else{\r\n                    askForPayTheirPayment();\r\n                }\r\n\r\n            }\r\n        });\r\n\r\n       // binding.logoEmptyState.setVisibility(View.VISIBLE);\r\n\r\n        if (preafManager.getActiveBrand().getLogo() != null && !preafManager.getActiveBrand().getLogo().isEmpty() ) {\r\n            binding.logoEmptyState.setVisibility(View.GONE);\r\n            binding.logoCustom.setVisibility(View.VISIBLE);\r\n            binding.logoCustom.setVisibility(View.VISIBLE);\r\n            Glide.with(act)\r\n                    .load(preafManager.getActiveBrand().getLogo())\r\n                    .into(binding.logoCustom);\r\n            binding.logoCustom.setOnClickListener(new View.OnClickListener() {\r\n                @Override\r\n                public void onClick(View view) {\r\n                    onSelectImageClick(view);\r\n                }\r\n            });\r\n        }\r\n        else\r\n        {\r\n            binding.logoEmptyState.setVisibility(View.VISIBLE);\r\n            binding.logoCustom.setVisibility(View.GONE);\r\n\r\n            binding.logoCustom.setOnClickListener(new View.OnClickListener() {\r\n                @Override\r\n                public void onClick(View view) {\r\n                    onSelectImageClick(view);\r\n                }\r\n            });\r\n\r\n\r\n        }\r\n\r\n        if (!getIntent().hasExtra(\"viewAll\"))\r\n            LoadDataToUI();\r\n    }\r\n\r\n\r\n    public void askForDownloadImage(){\r\n        alertDialogBuilder = new AlertDialog.Builder(act);\r\n        alertDialogBuilder.setTitle(\"Save image\");\r\n        alertDialogBuilder.setMessage(\"You sure to save your image?\");\r\n        alertDialogBuilder.setPositiveButton(\"yes\",\r\n                new DialogInterface.OnClickListener() {\r\n                    @Override\r\n                    public void onClick(DialogInterface arg0, int arg1) {\r\n                        requestAgain();\r\n                        saveImageToGallery(false);\r\n\r\n\r\n                    }\r\n                });\r\n        alertDialogBuilder.setNegativeButton(\"No\", new DialogInterface.OnClickListener() {\r\n            public void onClick(DialogInterface dialog, int which) {\r\n                dialog.dismiss();\r\n            }\r\n        });\r\n\r\n        AlertDialog alertDialog = alertDialogBuilder.create();\r\n        alertDialog.setCancelable(false);\r\n        alertDialog.show();\r\n    }\r\n\r\n    public void isPermissionGranted(boolean permission) {\r\n        if (!permission) {\r\n            startActivity(new Intent(android.provider.Settings.ACTION_APPLICATION_DETAILS_SETTINGS,\r\n                    Uri.fromParts(\"package\", act.getPackageName(), null)));\r\n        }\r\n    }\r\n\r\n    private int IntroCounter = 0;\r\n\r\n    public void startIntro(View view, String title, String desc) {\r\n\r\n        new GuideView.Builder(this)\r\n                .setTitle(title)\r\n                .setContentText(desc)\r\n                .setGravity(Gravity.center)\r\n                .setDismissType(DismissType.anywhere)\r\n                .setTargetView(view)\r\n                .setContentTextSize(12)\r\n                .setTitleTextSize(14)\r\n                .setGuideListener(new GuideListener() {\r\n                    @Override\r\n                    public void onDismiss(View view) {\r\n                        IntroCounter++;\r\n\r\n                            if (IntroCounter == 1) {\r\n                                startIntro(binding.shareIcon, \"Share\", \"Share Your Image Directly\");\r\n                            }\r\n                            if (IntroCounter == 2) {\r\n                                startIntro(binding.fabroutIcon, \"Save\", \"Save To Your Brand\");\r\n                            }\r\n                            if (IntroCounter == 3) {\r\n                                startIntro(binding.viewPager.getChildAt(0), \"Catogery\", \"List of images\");\r\n                            }\r\n/*\r\n                        if (!is_frame.equalsIgnoreCase(\"1\") && preafManager.getFrameIntro()) {\r\n                            preafManager.setFrameIntro(false);\r\n                            if (IntroCounter == 4) {\r\n                                startIntro(binding.logoCard, \"Logo\", \"Change Your Logo\");\r\n                            }\r\n                            if (IntroCounter == 5) {\r\n                                startIntro(binding.customAddressEdit1, \"AddressText\", \"Change Your Address Text color\");\r\n                            }\r\n                            if (IntroCounter == 6) {\r\n                                startIntro(binding.customeContactEdit1, \"ContactText\", \"Change Your Contact Text color\");\r\n                            }\r\n                            if (IntroCounter == 7) {\r\n                                startIntro(binding.bottomBarView1, \"Address Background\", \"Change Your Address Background color\");\r\n                            }\r\n                            if (IntroCounter == 8) {\r\n                                startIntro(binding.bottomBarView2, \"Contac Background\", \"Change Your Contact Background color\");\r\n                            }\r\n                        }*/\r\n                    }\r\n                })\r\n                .build()\r\n                .show();\r\n    }\r\n\r\n    public void startIntroForFrameOnly(View view, String title, String desc) {\r\n\r\n        new GuideView.Builder(this)\r\n                .setTitle(title)\r\n                .setContentText(desc)\r\n                .setGravity(Gravity.center)\r\n                .setDismissType(DismissType.anywhere)\r\n                .setTargetView(view)\r\n                .setContentTextSize(12)\r\n                .setTitleTextSize(14)\r\n                .setGuideListener(new GuideListener() {\r\n                    @Override\r\n                    public void onDismiss(View view) {\r\n                            IntroCounter++;\r\n/*\r\n                            if (IntroCounter == 1) {\r\n                                startIntroForFrameOnly(binding.customAddressEdit1, \"Add Text\", \"Add text like email-id or address\");\r\n                            }\r\n                            if (IntroCounter == 2) {\r\n                                startIntroForFrameOnly(binding.customeContactEdit1, \"Add Text\", \"Add your contact no. here\");\r\n                            }\r\n                            if (IntroCounter == 3) {\r\n                                startIntroForFrameOnly(binding.bottomBarView1, \"Background\", \"Change background color as you want\");\r\n                            }\r\n                            if (IntroCounter == 4) {\r\n                                startIntroForFrameOnly(binding.bottomBarView2, \"Background\", \"Change background color as you want\");\r\n                            }*/\r\n\r\n                    }\r\n                })\r\n                .build()\r\n                .show();\r\n    }\r\n\r\n\r\n    public void CreateTabs(){\r\n        binding.tabLayout.addTab(binding.tabLayout.newTab().setText(convertFirstUpper(\"Category\")));\r\n        binding.tabLayout.addTab(binding.tabLayout.newTab().setText(convertFirstUpper(\"Background\")));\r\n        binding.tabLayout.addTab(binding.tabLayout.newTab().setText(convertFirstUpper(\"Text\")));\r\n        binding.tabLayout.addTab(binding.tabLayout.newTab().setText(convertFirstUpper(\"Footer\")));\r\n\r\n\r\n        if (!is_frame.equalsIgnoreCase(\"1\")) {\r\n            IntroCounter = 0;\r\n            preafManager.setFrameIntro(false);\r\n            startIntroForFrameOnly(binding.logoEmptyState, \"Logo\", \"you can upload logo here\");\r\n        } else {\r\n            if (preafManager.getViewAllActivityIntro()) {\r\n                startIntro(binding.downloadIcon, \"Download\", \"Download Image From here\");\r\n                preafManager.setViewAllActivityIntro(false);\r\n            }\r\n            binding.tabLayout.addTab(binding.tabLayout.newTab().setText(convertFirstUpper(\"Frames\")));\r\n        }\r\n\r\n        binding.tabLayout.setTabTextColors(Color.parseColor(\"#727272\"), Color.parseColor(\"#ad2753\"));\r\n        binding.tabLayout.setTabGravity(TabLayout.GRAVITY_FILL);\r\n        final ViewAllTopTabAdapter adapter = new ViewAllTopTabAdapter(act, getSupportFragmentManager(), binding.tabLayout.getTabCount());\r\n        if (getIntent().hasExtra(\"viewAll\"))\r\n            adapter.setViewAll(true);\r\n        binding.viewPager.setAdapter(adapter);\r\n        binding.viewPager.setOffscreenPageLimit(6);\r\n        binding.viewPager.addOnPageChangeListener(new TabLayout.TabLayoutOnPageChangeListener(binding.tabLayout));\r\n        binding.tabLayout.addOnTabSelectedListener(new TabLayout.OnTabSelectedListener() {\r\n            @Override\r\n            public void onTabSelected(TabLayout.Tab tab) {\r\n                binding.viewPager.setCurrentItem(tab.getPosition());\r\n                editorFragment=tab.getPosition();\r\n\r\n              //  handler(editorFragment);\r\n            }\r\n\r\n            @Override\r\n            public void onTabUnselected(TabLayout.Tab tab) {\r\n            }\r\n\r\n            @Override\r\n            public void onTabReselected(TabLayout.Tab tab) {\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    //load firstImage\r\n    public void loadFirstImage(){\r\n\r\n        FooterModel model = new FooterModel();\r\n        model.setLayoutType(FooterModel.LAYOUT_FRAME_ONE);\r\n        model.setFree(true);\r\n        model.setAddress(preafManager.getActiveBrand().getAddress());\r\n        model.setEmailId(preafManager.getActiveBrand().getEmail());\r\n        model.setContactNo(preafManager.getActiveBrand().getPhonenumber());\r\n        model.setWebsite(preafManager.getActiveBrand().getWebsite());\r\n        ((onFooterSelectListener) act).onFooterSelectEvent(FooterModel.LAYOUT_FRAME_ONE, model);\r\n    }\r\n\r\n    //For CustomFrame\r\n    public void onSelectImageClick(View view) {\r\n        CropImage.startPickImageActivity(this);\r\n    }\r\n\r\n    public void LoadDataToUI(){\r\n        preafManager=new PreafManager(act);\r\n        if (selectedObject != null) {\r\n            binding.simpleProgressBar.setVisibility(View.GONE);\r\n            Glide.with(getApplicationContext()).load(selectedObject.getFrame()).into(binding.recoImage);\r\n        } else {\r\n           // binding.simpleProgressBar.setVisibility(View.VISIBLE);\r\n        }\r\n        loadFirstImage();\r\n    }\r\n\r\n    //For RefresGalary\r\n    public void refreshgallery(File file) {\r\n        Intent intent = new Intent(Intent.ACTION_MEDIA_SCANNER_SCAN_FILE);\r\n        intent.setData(Uri.fromFile(file));\r\n        sendBroadcast(intent);\r\n    }\r\n\r\n    //For CreatFileeDisc For Download Image.........................\r\n    private File getDisc() {\r\n        File file = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DCIM);\r\n        return new File(file, \"BrandMania\");\r\n    }\r\n\r\n\r\n    //For adepter\r\n    public void setAdapter() {\r\n        ImageCategoryAddaptor menuAddaptor = new ImageCategoryAddaptor(menuModels, act);\r\n        menuAddaptor.setLayoutType(FROM_VIEWALL);\r\n        RecyclerView.LayoutManager mLayoutManager = new GridLayoutManager(this, 4);\r\n        binding.viewRecoRecycler.setLayoutManager(mLayoutManager);\r\n        binding.viewRecoRecycler.setHasFixedSize(true);\r\n        binding.viewRecoRecycler.setAdapter(menuAddaptor);\r\n\r\n     /*   if (getIntent().hasExtra(\"viewAll\")) {\r\n            binding.simpleProgressBar.setVisibility(View.VISIBLE);\r\n\r\n            selectedObject = menuModels.get(0);\r\n            LoadDataToUI();\r\n        } else {\r\n            Toast.makeText(act, \"dfgdfgdfgd\", Toast.LENGTH_SHORT).show();\r\n            binding.simpleProgressBar.setVisibility(View.GONE);\r\n        }*/\r\n\r\n    }\r\n\r\n\r\n\r\n    //For Image Select Interface\r\n    @Override\r\n    public void ImageCateonItemSelection(int position, ImageList listModel) {\r\n\r\n\r\n         //   binding.simpleProgressBar.setVisibility(View.GONE);\r\n            selectedObject = listModel;\r\n            LoadDataToUI();\r\n       // else {\r\n           // binding.simpleProgressBar.setVisibility(View.VISIBLE);\r\n        binding.simpleProgressBar.setVisibility(View.GONE);\r\n        loadFirstImage();\r\n    }\r\n\r\n    // For Frame Load View Pager\r\n    public void frameViewPager() {\r\n\r\n    }\r\n\r\n    public void AlertBoxForSaveFrame() {\r\n        alertDialogBuilder = new AlertDialog.Builder(act);\r\n        alertDialogBuilder.setTitle(\"Save Frame\");\r\n        alertDialogBuilder.setMessage(\"Do you want to save your template, you will not able to change once save.\");\r\n        alertDialogBuilder.setPositiveButton(\"yes\",\r\n                new DialogInterface.OnClickListener() {\r\n                    @Override\r\n                    public void onClick(DialogInterface arg0, int arg1) {\r\n\r\n                        /*binding.customFrameRelative.setVisibility(View.GONE);\r\n                        binding.FrameImageDuplicate.setVisibility(View.GONE);\r\n                        if (binding.customeContactEdit1.getText().toString().length()==0)\r\n                        {\r\n                            binding.customeContactEdit1.setVisibility(View.GONE);\r\n                        }\r\n                        if (binding.customFrameWebsite.getText().toString().length()==0)\r\n                        {\r\n                            binding.customFrameWebsite.setVisibility(View.GONE);\r\n                        }\r\n                        if (binding.customAddressEdit1.getText().toString().length()==0)\r\n                        {\r\n                            binding.customAddressEdit1.setVisibility(View.GONE);\r\n                        }*/\r\n                        //getCustomFrameInBitmap();\r\n\r\n                    }\r\n                });\r\n        alertDialogBuilder.setNegativeButton(\"No\", new DialogInterface.OnClickListener() {\r\n            public void onClick(DialogInterface dialog, int which) {\r\n                dialog.dismiss();\r\n            }\r\n        });\r\n\r\n        AlertDialog alertDialog = alertDialogBuilder.create();\r\n        alertDialog.setCancelable(false);\r\n        alertDialog.show();\r\n\r\n\r\n\r\n    }\r\n\r\n    //For GetFrame\r\n    @Override public void alertListenerClick() {\r\n        requestAgain();\r\n    }\r\n\r\n    private void requestAgain() {\r\n        ActivityCompat.requestPermissions(act,\r\n                new String[]{Manifest.permission.CAMERA, Manifest.permission.WRITE_EXTERNAL_STORAGE,\r\n                        Manifest.permission.READ_EXTERNAL_STORAGE},\r\n                CodeReUse.ASK_PERMISSSION);\r\n    }\r\n\r\n\r\n\r\n    @Override\r\n    public void onBackPressed() {\r\n        CodeReUse.activityBackPress(act);\r\n    }\r\n\r\n    @Override\r\n    public void onDialogDismissed(int dialogId) {\r\n    }\r\n\r\n\r\n    private void removeFromFavourite(final int removeFav) {\r\n        Utility.showLoadingTran(act);\r\n        Utility.Log(\"API : \", APIs.REMOVE_FAVOURIT);\r\n        StringRequest stringRequest = new StringRequest(Request.Method.POST, APIs.REMOVE_FAVOURIT, new Response.Listener<String>() {\r\n            @Override\r\n            public void onResponse(String response) {\r\n                Utility.dismissLoadingTran();\r\n                Utility.Log(\"REMOVE_FAVOURIT : \", response);\r\n\r\n                try {\r\n                    JSONObject jsonObject = new JSONObject(response);\r\n\r\n\r\n                } catch (JSONException e) {\r\n                    e.printStackTrace();\r\n                }\r\n\r\n            }\r\n        },\r\n                new Response.ErrorListener() {\r\n                    @Override\r\n                    public void onErrorResponse(VolleyError error) {\r\n                        Utility.dismissLoadingTran();\r\n                        error.printStackTrace();\r\n\r\n                    }\r\n                }\r\n        ) {\r\n            /**\r\n             * Passing some request headers*\r\n             */\r\n            @Override\r\n            public Map<String, String> getHeaders() throws AuthFailureError {\r\n                Map<String, String> params = new HashMap<String, String>();\r\n                params.put(\"Accept\", \"application/x-www-form-urlencoded\");//application/json\r\n                params.put(\"Content-Type\", \"application/x-www-form-urlencoded\");\r\n                params.put(\"Authorization\", \"Bearer\" + preafManager.getUserToken());\r\n                Log.e(\"Token\", params.toString());\r\n                return params;\r\n            }\r\n\r\n            @Override\r\n            protected Map<String, String> getParams() {\r\n                Map<String, String> params = new HashMap<>();\r\n                if (imageList != null) {\r\n                    params.put(\"brand_id\", preafManager.getActiveBrand().getId());\r\n                    params.put(\"image_id\", selectedObject.getImageid());\r\n                } else {\r\n                    params.put(\"brand_id\",  preafManager.getActiveBrand().getId());\r\n                    params.put(\"image_id\", selectedObject.getImageid());\r\n\r\n                }\r\n                params.put(\"type\", String.valueOf(removeFav));\r\n                Utility.Log(\"POSTED-PARAMS-\", params.toString());\r\n                return params;\r\n            }\r\n\r\n        };\r\n\r\n        RequestQueue queue = Volley.newRequestQueue(act);\r\n        queue.add(stringRequest);\r\n    }\r\n\r\n    @RequiresApi(api = Build.VERSION_CODES.M)\r\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\r\n\r\n        // handle result of pick image chooser\r\n        super.onActivityResult(requestCode, resultCode, data);\r\n        if (requestCode == CropImage.PICK_IMAGE_CHOOSER_REQUEST_CODE && resultCode == Activity.RESULT_OK) {\r\n            Uri imageUri = CropImage.getPickImageResultUri(this, data);\r\n\r\n            if (CropImage.isReadExternalStoragePermissionsRequired(this, imageUri)) {\r\n                mCropImageUri = imageUri;\r\n                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\r\n                    requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, 0);\r\n                }\r\n            } else {\r\n                startCropImageActivity(imageUri);\r\n            }\r\n        }\r\n\r\n        // handle result of CropImageActivity\r\n        if (requestCode == CropImage.CROP_IMAGE_ACTIVITY_REQUEST_CODE) {\r\n            CropImage.ActivityResult result = CropImage.getActivityResult(data);\r\n            if (resultCode == RESULT_OK) {\r\n                binding.logoCustom.setVisibility(View.VISIBLE);\r\n                binding.logoEmptyState.setVisibility(View.GONE);\r\n                ((ImageView) findViewById(R.id.logoCustom)).setImageURI(result.getUri());\r\n                ImageView imageView = ((ImageView) findViewById(R.id.logoCustom));\r\n                selectedLogo = ((BitmapDrawable) imageView.getDrawable()).getBitmap();\r\n            }\r\n        }\r\n    }\r\n\r\n    @Override public void onRequestPermissionsResult(int requestCode, String permissions[], int[] grantResults) {\r\n        if (mCropImageUri != null && grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {\r\n            // required permissions granted, start crop image activity\r\n            startCropImageActivity(mCropImageUri);\r\n        } else {\r\n            //   Toast.makeText(this, \"Cancelling, required permissions are not granted\", Toast.LENGTH_LONG).show();\r\n        }\r\n    }\r\n\r\n    private void startCropImageActivity(Uri imageUri) {\r\n        CropImage.activity(imageUri)\r\n                .setGuidelines(CropImageView.Guidelines.ON)\r\n                .setMultiTouchEnabled(true)\r\n                .start(this);\r\n    }\r\n    private void getBrandList() {\r\n        Utility.Log(\"API : \", APIs.GET_BRAND);\r\n        StringRequest stringRequest = new StringRequest(Request.Method.POST, APIs.GET_BRAND, new Response.Listener<String>() {\r\n            @Override\r\n            public void onResponse(String response) {\r\n               // binding.swipeContainer.setRefreshing(false);\r\n                Utility.Log(\"GET_BRAND : \", response);\r\n                ArrayList<BrandListItem> brandListItems=new ArrayList<>();\r\n                try {\r\n                    JSONObject jsonObject = new JSONObject(response);\r\n                    multiListItems = ResponseHandler.HandleGetBrandList(jsonObject);\r\n                    JSONArray dataJsonArray = ResponseHandler.getJSONArray(jsonObject, \"data\");\r\n                } catch (JSONException e) {\r\n                    e.printStackTrace();\r\n                }\r\n\r\n            }\r\n        },\r\n                new Response.ErrorListener() {\r\n                    @Override\r\n                    public void onErrorResponse(VolleyError error) {\r\n                       // binding.swipeContainer.setRefreshing(false);\r\n                        error.printStackTrace();\r\n\r\n\r\n\r\n                    }\r\n                }\r\n        ) {\r\n            /**\r\n             * Passing some request headers*\r\n             */\r\n\r\n            @Override\r\n            public Map<String, String> getHeaders() throws AuthFailureError {\r\n                Map<String, String> params = new HashMap<String, String>();\r\n                params.put(\"Accept\", \"application/json\");\r\n                params.put(\"Content-Type\", \"application/json\");\r\n                params.put(\"Authorization\",\"Bearer \"+preafManager.getUserToken());\r\n                Log.e(\"Token\",params.toString());\r\n                return params;\r\n            }\r\n\r\n\r\n            @Override\r\n            protected Map<String, String> getParams() {\r\n                Map<String, String> params = new HashMap<>();\r\n\r\n                Log.e(\"DateNdClass\", params.toString());\r\n                //params.put(\"upload_type_id\", String.valueOf(Constant.ADD_NOTICE));\r\n                Utility.Log(\"POSTED-PARAMS-\", params.toString());\r\n                return params;\r\n            }\r\n\r\n        };\r\n\r\n        RequestQueue queue = Volley.newRequestQueue(getApplicationContext());\r\n        queue.add(stringRequest);\r\n    }\r\n\r\n\r\n\r\n\r\n    public static String convertFirstUpper(String str) {\r\n\r\n        if (str == null || str.isEmpty()) {\r\n            return str;\r\n        }\r\n        Utility.Log(\"FirstLetter\", str.substring(0, 1) + \"    \" + str.substring(1));\r\n        return str.substring(0, 1).toUpperCase() + str.substring(1);\r\n    }\r\n\r\n\r\n    //version 3 ======================================\r\n\r\n    // ask for payment\r\n    public DialogUpgradeLayoutSecondBinding secondBinding;\r\n\r\n    public void askForPayTheirPayment() {\r\n        secondBinding = DataBindingUtil.inflate(LayoutInflater.from(act), R.layout.dialog_upgrade_layout_second, null, false);\r\n        androidx.appcompat.app.AlertDialog.Builder builder = new androidx.appcompat.app.AlertDialog.Builder(act, R.style.MyAlertDialogStyle_extend);\r\n        builder.setView(secondBinding.getRoot());\r\n        androidx.appcompat.app.AlertDialog alertDialog = builder.create();\r\n        alertDialog.setContentView(secondBinding.getRoot());\r\n\r\n        secondBinding.viewPackage.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                alertDialog.dismiss();\r\n                Intent intent = new Intent(act, PackageActivity.class);\r\n                act.startActivity(intent);\r\n                act.overridePendingTransition(R.anim.slide_right_in, R.anim.slide_right_out);\r\n            }\r\n        });\r\n        secondBinding.closeBtn.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                alertDialog.dismiss();\r\n            }\r\n        });\r\n\r\n        secondBinding.element3.setText(\"You haven't selected any package yet. Please choose any package for download more images\");\r\n        alertDialog.setCancelable(false);\r\n        alertDialog.getWindow().setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));\r\n        alertDialog.show();\r\n    }\r\n\r\n    //fire intent for share\r\n    public void triggerShareIntent(File new_file) {\r\n        Uri uri = Uri.parse(MediaStore.Images.Media.insertImage(getContentResolver(), BitmapFactory.decodeFile(new_file.getPath()), null, null));\r\n        Intent share = new Intent(Intent.ACTION_SEND);\r\n        share.setType(\"image/*\");\r\n        share.putExtra(Intent.EXTRA_STREAM, uri);\r\n        startActivity(Intent.createChooser(share, \"Share Image\"));\r\n    }\r\n\r\n\r\n    //show dialog for upgrading package for using all 6 frames\r\n    public DialogUpgradeLayoutBinding upgradeLayoutBinding;\r\n    private void triggerUpgradePackage() {\r\n        upgradeLayoutBinding=DataBindingUtil.inflate(LayoutInflater.from(act), R.layout.dialog_upgrade_layout, null, false);\r\n        androidx.appcompat.app.AlertDialog.Builder builder = new androidx.appcompat.app.AlertDialog.Builder(act, R.style.MyAlertDialogStyle_extend);\r\n        builder.setView(upgradeLayoutBinding.getRoot());\r\n        androidx.appcompat.app.AlertDialog alertDialog = builder.create();\r\n        alertDialog.setContentView(upgradeLayoutBinding.getRoot());\r\n\r\n        upgradeLayoutBinding.viewPackage.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                alertDialog.dismiss();\r\n                Intent intent = new Intent(act, PackageActivity.class);\r\n                act.startActivity(intent);\r\n                act.overridePendingTransition(R.anim.slide_right_in, R.anim.slide_right_out);\r\n            }\r\n        });\r\n        upgradeLayoutBinding.closeBtn.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                alertDialog.dismiss();\r\n            }\r\n        });\r\n\r\n        alertDialog.setCancelable(false);\r\n        alertDialog.getWindow().setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));\r\n        alertDialog.show();\r\n\r\n    }\r\n\r\n    //show dialog for upgrading package for using all 6 frames\r\n    public DialogUpgradeDownloadLimitExpireBinding expireBinding;\r\n\r\n    private void downloadLimitExpireDialog() {\r\n        expireBinding = DataBindingUtil.inflate(LayoutInflater.from(act), R.layout.dialog_upgrade_download_limit_expire, null, false);\r\n        androidx.appcompat.app.AlertDialog.Builder builder = new androidx.appcompat.app.AlertDialog.Builder(act, R.style.MyAlertDialogStyle_extend);\r\n        builder.setView(expireBinding.getRoot());\r\n        androidx.appcompat.app.AlertDialog alertDialog = builder.create();\r\n        alertDialog.setContentView(expireBinding.getRoot());\r\n\r\n        expireBinding.viewPackage.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                alertDialog.dismiss();\r\n                Intent intent = new Intent(act, PackageActivity.class);\r\n                act.startActivity(intent);\r\n                act.overridePendingTransition(R.anim.slide_right_in, R.anim.slide_right_out);\r\n            }\r\n        });\r\n        expireBinding.closeBtn.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                alertDialog.dismiss();\r\n            }\r\n        });\r\n\r\n        alertDialog.setCancelable(false);\r\n        alertDialog.getWindow().setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));\r\n        alertDialog.show();\r\n\r\n    }\r\n\r\n    // ask to upgrade package to 999 for use all frames\r\n    DialogUpgradeLayoutEnterpriseBinding enterpriseBinding;\r\n\r\n    public void askForUpgradeToEnterpisePackage() {\r\n        enterpriseBinding = DataBindingUtil.inflate(LayoutInflater.from(act), R.layout.dialog_upgrade_layout_enterprise, null, false);\r\n        androidx.appcompat.app.AlertDialog.Builder builder = new androidx.appcompat.app.AlertDialog.Builder(act, R.style.MyAlertDialogStyle_extend);\r\n        builder.setView(enterpriseBinding.getRoot());\r\n        androidx.appcompat.app.AlertDialog alertDialog = builder.create();\r\n        alertDialog.setContentView(enterpriseBinding.getRoot());\r\n\r\n        enterpriseBinding.viewPackage.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                alertDialog.dismiss();\r\n                Intent intent = new Intent(act, PackageActivity.class);\r\n                act.startActivity(intent);\r\n                act.overridePendingTransition(R.anim.slide_right_in, R.anim.slide_right_out);\r\n            }\r\n        });\r\n        enterpriseBinding.closeBtn.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                alertDialog.dismiss();\r\n            }\r\n        });\r\n        //alertDialog.setCancelable(false);\r\n        alertDialog.getWindow().setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));\r\n        alertDialog.show();\r\n    }\r\n\r\n\r\n    //for logo drag and click event handle\r\n    GestureDetector gestureDetector;\r\n\r\n    private View.OnTouchListener onTouchListener() {\r\n        return new View.OnTouchListener() {\r\n\r\n            @SuppressLint(\"ClickableViewAccessibility\")\r\n            @Override\r\n            public boolean onTouch(View view, MotionEvent event) {\r\n                if (gestureDetector.onTouchEvent(event)) {\r\n                    if ((preafManager.getActiveBrand().getLogo().isEmpty() && selectedLogo != null) || preafManager.getActiveBrand().getNo_of_used_image().equalsIgnoreCase(\"0\")) {\r\n                        onSelectImageClick(view);\r\n                    } else {\r\n                        Toast.makeText(act, \"You can't change your logo\", Toast.LENGTH_SHORT).show();\r\n                    }\r\n                }else {\r\n                    final int x = (int) event.getRawX();\r\n                    final int y = (int) event.getRawY();\r\n\r\n                    switch (event.getAction() & MotionEvent.ACTION_MASK) {\r\n\r\n                        case MotionEvent.ACTION_DOWN:\r\n                            RelativeLayout.LayoutParams lParams = (RelativeLayout.LayoutParams)\r\n                                    view.getLayoutParams();\r\n\r\n                            xDelta = x - lParams.leftMargin;\r\n                            yDelta = y - lParams.topMargin;\r\n                            break;\r\n\r\n                        case MotionEvent.ACTION_UP:\r\n\r\n                            Toast.makeText(act,\r\n                                    \"I'm here!\", Toast.LENGTH_SHORT)\r\n                                    .show();\r\n                            break;\r\n\r\n                        case MotionEvent.ACTION_MOVE:\r\n                            RelativeLayout.LayoutParams layoutParams = (RelativeLayout.LayoutParams) view\r\n                                    .getLayoutParams();\r\n                            layoutParams.leftMargin = x - xDelta;\r\n                            layoutParams.topMargin = y - yDelta;\r\n                            layoutParams.rightMargin = 0;\r\n                            layoutParams.bottomMargin = 0;\r\n                            view.setLayoutParams(layoutParams);\r\n                            break;\r\n                    }\r\n\r\n                    mainLayout.invalidate();\r\n                }\r\n                return true;\r\n            }\r\n        };\r\n    }\r\n\r\n\r\n    //save image with frame either custome or from backend\r\n    public void saveImageToGallery(boolean wantToShare) {\r\n\r\n        Drawable bitmapFrame;\r\n        if (isUsingCustomFrame){\r\n            bitmapFrame=new BitmapDrawable(getResources(), getCustomFrameInBitmap());\r\n        }else{\r\n            bitmapFrame=(BitmapDrawable) binding.backendFrame.getDrawable();\r\n        }\r\n        Drawable ImageDrawable = (BitmapDrawable) binding.recoImage.getDrawable();\r\n        Bitmap merged = Bitmap.createBitmap(1000, 1000, Bitmap.Config.ARGB_8888);\r\n        Canvas canvas = new Canvas(merged);\r\n        bitmapFrame.setBounds(0, 0, 1000, 1000);\r\n        ImageDrawable.setBounds(0, 0, 1000, 1000);\r\n        ImageDrawable.draw(canvas);\r\n        bitmapFrame.draw(canvas);\r\n\r\n        FileOutputStream fileOutputStream = null;\r\n        File file = getDisc();\r\n        if (!file.exists() && !file.mkdirs()) {\r\n            return;\r\n        }\r\n        SimpleDateFormat simpleDateFormat = new SimpleDateFormat(\"yyyymmsshhmmss\");\r\n        String date = simpleDateFormat.format(new Date());\r\n        String name = \"Img\" + date + \".jpg\";\r\n        String file_name = file.getAbsolutePath() + \"/\" + name;\r\n        new_file = new File(file_name);\r\n        try {\r\n            fileOutputStream = new FileOutputStream(new_file);\r\n            Bitmap bitmap = merged;\r\n            bitmap.compress(Bitmap.CompressFormat.JPEG, 100, fileOutputStream);\r\n            fileOutputStream.flush();\r\n            fileOutputStream.close();\r\n        } catch (FileNotFoundException e) {\r\n            e.printStackTrace();\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n        refreshgallery(new_file);\r\n\r\n        if (wantToShare){\r\n            if (isUsingCustomFrame) {\r\n                addDynamicFooter(selectedFooterModel.getLayoutType());\r\n                binding.FrameImageDuplicate.setVisibility(View.GONE);\r\n                binding.FrameImageDuplicate.setImageBitmap(null);\r\n            } else {\r\n                Glide.with(getApplicationContext()).load(selectedBackendFrame.getFrame1()).into(binding.backendFrame);\r\n            }\r\n            Glide.with(getApplicationContext()).load(selectedObject.getFrame()).into(binding.recoImage);\r\n            triggerShareIntent(new_file);\r\n        }else {\r\n            Toast.makeText(act, \"Your image is downloaded\", Toast.LENGTH_SHORT).show();\r\n            if (isUsingCustomFrame) {\r\n                addDynamicFooter(selectedFooterModel.getLayoutType());\r\n                binding.FrameImageDuplicate.setVisibility(View.GONE);\r\n                binding.FrameImageDuplicate.setImageBitmap(null);\r\n            } else {\r\n                Glide.with(getApplicationContext()).load(selectedBackendFrame.getFrame1()).into(binding.backendFrame);\r\n            }\r\n\r\n\r\n        }\r\n\r\n        downloadAndShareApi(DOWLOAD,merged);\r\n    }\r\n\r\n    //generate custom frame from relative layout\r\n    private Bitmap getCustomFrameInBitmap() {\r\n\r\n        Bitmap newFinal;\r\n        Bitmap returnedBitmap = Bitmap.createBitmap(binding.elementCustomFrame.getWidth(), binding.elementCustomFrame.getHeight(),Bitmap.Config.ARGB_8888);\r\n\r\n        Canvas canvas = new Canvas(returnedBitmap);\r\n\r\n        Drawable bgDrawable =binding.elementCustomFrame.getBackground();\r\n        if (bgDrawable!=null) {\r\n            bgDrawable.draw(canvas);\r\n        }   else{\r\n            canvas.drawColor(Color.TRANSPARENT, PorterDuff.Mode.CLEAR);\r\n\r\n        }\r\n        binding.elementCustomFrame.draw(canvas);\r\n\r\n        binding.FrameImageDuplicate.setVisibility(View.VISIBLE);\r\n\r\n        binding.FrameImageDuplicate.setImageBitmap(returnedBitmap);\r\n\r\n        BitmapDrawable drawable = (BitmapDrawable) binding.FrameImageDuplicate.getDrawable();\r\n\r\n        newFinal = drawable.getBitmap();\r\n\r\n        FileOutputStream fileOutputStream = null;\r\n        File file = getDisc();\r\n        if (!file.exists() && !file.mkdirs()) {\r\n            return null;\r\n        }\r\n        SimpleDateFormat simpleDateFormat = new SimpleDateFormat(\"yyyymmsshhmmss\");\r\n        String date = simpleDateFormat.format(new Date());\r\n        String name = \"Img\" + date + \".jpg\";\r\n        String file_name = file.getAbsolutePath() + \"/\" + name;\r\n        new_file = new File(file_name);\r\n        try {\r\n            fileOutputStream = new FileOutputStream(new_file);\r\n            Bitmap bitmap = newFinal;\r\n            bitmap.compress(Bitmap.CompressFormat.PNG, 100, fileOutputStream);\r\n\r\n            fileOutputStream.flush();\r\n            fileOutputStream.close();\r\n\r\n        } catch (FileNotFoundException e) {\r\n            e.printStackTrace();\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n        refreshgallery(new_file);\r\n        binding.FrameImageDuplicate.setVisibility(View.VISIBLE);\r\n        //newFinal bitmap\r\n        return newFinal;\r\n\r\n    }\r\n\r\n\r\n    //backend frame load\r\n    @Override\r\n    public void onBackendFrameChoose(ImageList imageList, int position) {\r\n        binding.backendFrame.setVisibility(View.VISIBLE);\r\n        binding.elementCustomFrame.setVisibility(View.GONE);\r\n        selectedBackendFrame=imageList;\r\n        Glide.with(getApplicationContext()).load(imageList.getFrame1()).into(binding.backendFrame);\r\n        isUsingCustomFrame = false;\r\n        forCheckFavorite();\r\n    }\r\n\r\n    //fire on footer select listener\r\n    @Override\r\n    public void onFooterSelectEvent(int footerLayout, FooterModel footerModel) {\r\n        isUsingCustomFrame = true;\r\n        binding.backendFrame.setVisibility(View.GONE);\r\n        binding.elementCustomFrame.setVisibility(View.VISIBLE);\r\n        selectedFooterModel = footerModel;\r\n        addDynamicFooter(footerLayout);\r\n        forCheckFavorite();\r\n    }\r\n\r\n    //check for added to fav or not\r\n    public void forCheckFavorite(){\r\n        preafManager=new PreafManager(act);\r\n        AddFavorite= preafManager.getSavedFavorites();\r\n\r\n        if (AddFavorite!=null) {\r\n            boolean isImageFound=false;\r\n            for (int i = 0; i < AddFavorite.size(); i++) {\r\n                if (isUsingCustomFrame){\r\n                    if (AddFavorite.get(i).isCustom()) {\r\n                        Log.e(\"FFF\",AddFavorite.get(i).getId()+\" \"+selectedObject.getId());\r\n                        if (AddFavorite.get(i).getId().equals(selectedObject.getId())) {\r\n                            binding.addfabroutIcon.setVisibility(View.VISIBLE);\r\n                            binding.fabroutIcon.setVisibility(View.GONE);\r\n                            isImageFound=true;\r\n                            break;\r\n                        } else {\r\n                            binding.addfabroutIcon.setVisibility(View.GONE);\r\n                            binding.fabroutIcon.setVisibility(View.VISIBLE);\r\n                        }\r\n                    }\r\n\r\n                }else {\r\n                    if (!AddFavorite.get(i).isCustom()) {\r\n                        if (AddFavorite.get(i).getId().equals(selectedObject.getId()) && AddFavorite.get(i).getFrame1Id().equalsIgnoreCase(selectedBackendFrame.getFrame1Id())) {\r\n                            binding.addfabroutIcon.setVisibility(View.VISIBLE);\r\n                            binding.fabroutIcon.setVisibility(View.GONE);\r\n                            isImageFound=true;\r\n                            break;\r\n                        } else {\r\n                            binding.addfabroutIcon.setVisibility(View.GONE);\r\n                            binding.fabroutIcon.setVisibility(View.VISIBLE);\r\n                        }\r\n                    }\r\n                }\r\n\r\n\r\n            }\r\n            if (!isImageFound) {\r\n                binding.addfabroutIcon.setVisibility(View.GONE);\r\n                binding.fabroutIcon.setVisibility(View.VISIBLE);\r\n            }\r\n        }\r\n    }\r\n\r\n    //for adding footer dynamically\r\n    int footerLayout = 1;\r\n    private LayoutForLoadOneBinding oneBinding;\r\n    private LayoutForLoadTwoBinding twoBinding;\r\n    private LayoutForLoadThreeBinding threeBinding;\r\n    private LayoutForLoadFourBinding fourBinding;\r\n    private LayoutForLoadFiveBinding fiveBinding;\r\n    private LayoutForLoadSixBinding sixBinding;\r\n\r\n    private void addDynamicFooter(int layoutType) {\r\n        binding.elementFooter.removeAllViews();\r\n        footerLayout=layoutType;\r\n        if (layoutType== FooterModel.LAYOUT_FRAME_ONE) {\r\n            oneBinding = DataBindingUtil.inflate(LayoutInflater.from(act), R.layout.layout_for_load_one, null, false);\r\n            binding.elementFooter.addView(oneBinding.getRoot());\r\n            loadFrameFirstData();\r\n        }\r\n        else if (layoutType== FooterModel.LAYOUT_FRAME_TWO) {\r\n            twoBinding = DataBindingUtil.inflate(LayoutInflater.from(act), R.layout.layout_for_load_two, null, false);\r\n            binding.elementFooter.addView(twoBinding.getRoot());\r\n            loadFrameTwoData();\r\n        }\r\n        else if (layoutType== FooterModel.LAYOUT_FRAME_THREE) {\r\n            threeBinding = DataBindingUtil.inflate(LayoutInflater.from(act), R.layout.layout_for_load_three, null, false);\r\n            binding.elementFooter.addView(threeBinding.getRoot());\r\n            loadFrameThreeData();\r\n        }\r\n        else if (layoutType== FooterModel.LAYOUT_FRAME_FOUR) {\r\n            fourBinding = DataBindingUtil.inflate(LayoutInflater.from(act), R.layout.layout_for_load_four, null, false);\r\n            binding.elementFooter.addView(fourBinding.getRoot());\r\n            loadFrameFourData();\r\n        }\r\n        else if (layoutType== FooterModel.LAYOUT_FRAME_FIVE) {\r\n            fiveBinding = DataBindingUtil.inflate(LayoutInflater.from(act), R.layout.layout_for_load_five, null, false);\r\n            binding.elementFooter.addView(fiveBinding.getRoot());\r\n            loadFrameFiveData();\r\n        }\r\n        else if (layoutType== FooterModel.LAYOUT_FRAME_SIX) {\r\n            sixBinding = DataBindingUtil.inflate(LayoutInflater.from(act), R.layout.layout_for_load_six, null, false);\r\n            binding.elementFooter.addView(sixBinding.getRoot());\r\n\r\n        }\r\n    }\r\n\r\n    @Override public void onColorItemChange(int colorCode) {\r\n    }\r\n    @Override public void onColorSelected(int dialogId, int colorCode) {\r\n\r\n    }\r\n\r\n    //for Text Color change\r\n    @Override public void onColorChanged(int colorCode) {\r\n        if (editorFragment==2) {\r\n            if (footerLayout==1){\r\n                ChangeTextColorForFrameOne(colorCode);\r\n            }else if (footerLayout==2){\r\n                ChangeTextColorForFrameTwo(colorCode);\r\n            }else if (footerLayout==3){\r\n                ChangeTextColorForFrameThree(colorCode);\r\n            }else if (footerLayout==4){\r\n                ChangeTextColorForFrameFour(colorCode);\r\n            }else if (footerLayout==5){\r\n                ChangeTextColorForFrameFive(colorCode);\r\n            }else if (footerLayout==6){\r\n                ChangeTextColorForFrameSix(colorCode);\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    //for background color change\r\n    @Override public void onChooseColor(int colorCode) {\r\n        if (editorFragment==1){\r\n            if (footerLayout==1){\r\n                ChangeBackgroundColorForFrameOne(colorCode);\r\n            }else if (footerLayout==2){\r\n                ChangeBackgroundColorForFrameTwo(colorCode);\r\n            }else if (footerLayout==3){\r\n\r\n            }else if (footerLayout==4){\r\n                ChangeBackgroundColorForFrameFour(colorCode);\r\n            }else if (footerLayout==5){\r\n                ChangeBackgroundColorForFrameFive(colorCode);\r\n            }else if (footerLayout==6){\r\n                ChangeBackgroundColorForFrameSix(colorCode);\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    //for font change\r\n    @Override public void onFontChangeListenert(String Font) {\r\n            if (footerLayout==1){\r\n                Typeface custom_font = Typeface.createFromAsset(act.getAssets(), Font);\r\n                oneBinding.gmailText.setTypeface(custom_font);\r\n                oneBinding.contactText.setTypeface(custom_font);\r\n                 oneBinding.locationText.setTypeface(custom_font);\r\n            }else if (footerLayout==2){\r\n                Typeface custom_font = Typeface.createFromAsset(act.getAssets(), Font);\r\n                twoBinding.gmailText.setTypeface(custom_font);\r\n                twoBinding.contactText.setTypeface(custom_font);\r\n                twoBinding.locationText.setTypeface(custom_font);\r\n                twoBinding.websiteText.setTypeface(custom_font);\r\n            }else if (footerLayout==3){\r\n                Typeface custom_font = Typeface.createFromAsset(act.getAssets(), Font);\r\n                threeBinding.gmailText.setTypeface(custom_font);\r\n                threeBinding.contactText.setTypeface(custom_font);\r\n                threeBinding.locationText.setTypeface(custom_font);\r\n                threeBinding.websiteText.setTypeface(custom_font);\r\n            }else if (footerLayout==4){\r\n                Typeface custom_font = Typeface.createFromAsset(act.getAssets(), Font);\r\n                fourBinding.gmailText.setTypeface(custom_font);\r\n                fourBinding.contactText.setTypeface(custom_font);\r\n                fourBinding.locationText.setTypeface(custom_font);\r\n                fourBinding.websiteText.setTypeface(custom_font);\r\n            }else if (footerLayout==5){\r\n                Typeface custom_font = Typeface.createFromAsset(act.getAssets(), Font);\r\n                fiveBinding.gmailText.setTypeface(custom_font);\r\n                fiveBinding.phoneTxt.setTypeface(custom_font);\r\n                fiveBinding.websiteText.setTypeface(custom_font);\r\n            }else if (footerLayout==6) {\r\n                Typeface custom_font = Typeface.createFromAsset(act.getAssets(), Font);\r\n                sixBinding.textElement1.setTypeface(custom_font);\r\n\r\n            }\r\n    }\r\n\r\n    //for underline\r\n    @Override public void onUnderLineItalic(boolean Left) {\r\n        if (Left) {\r\n            if (footerLayout==1) {\r\n                Utility.setUnderlineText(oneBinding.gmailText, true);\r\n                Utility.setUnderlineText(oneBinding.contactText, true);\r\n                Utility.setUnderlineText(oneBinding.locationText, true);\r\n\r\n\r\n            }else if (footerLayout==2) {\r\n                Utility.setUnderlineText(twoBinding.gmailText, true);\r\n                Utility.setUnderlineText(twoBinding.contactText, true);\r\n                Utility.setUnderlineText(twoBinding.locationText, true);\r\n                Utility.setUnderlineText(twoBinding.websiteText, true);\r\n\r\n            }else if (footerLayout==3) {\r\n                Utility.setUnderlineText(threeBinding.gmailText, true);\r\n                Utility.setUnderlineText(threeBinding.contactText, true);\r\n                Utility.setUnderlineText(threeBinding.locationText, true);\r\n                Utility.setUnderlineText(threeBinding.websiteText, true);\r\n\r\n\r\n            }else if (footerLayout==4) {\r\n\r\n                Utility.setUnderlineText(fourBinding.gmailText, true);\r\n                Utility.setUnderlineText(fourBinding.contactText, true);\r\n                Utility.setUnderlineText(fourBinding.locationText, true);\r\n                Utility.setUnderlineText(fourBinding.websiteText, true);\r\n            }else if (footerLayout==5) {\r\n                Utility.setUnderlineText(fiveBinding.gmailText, true);\r\n                Utility.setUnderlineText(fiveBinding.phoneTxt, true);\r\n                Utility.setUnderlineText(fiveBinding.websiteText, true);\r\n            }else if (footerLayout==6) {\r\n                Utility.setUnderlineText(sixBinding.textElement1, true);\r\n\r\n            }\r\n        }\r\n        else {\r\n            if (footerLayout == 1) {\r\n                Utility.setUnderlineText(oneBinding.gmailText, false);\r\n                Utility.setUnderlineText(oneBinding.contactText, false);\r\n                Utility.setUnderlineText(oneBinding.locationText, false);\r\n            } else if (footerLayout == 2) {\r\n                Utility.setUnderlineText(twoBinding.gmailText, false);\r\n                Utility.setUnderlineText(twoBinding.contactText, false);\r\n                Utility.setUnderlineText(twoBinding.locationText, false);\r\n                Utility.setUnderlineText(twoBinding.websiteText, false);\r\n            } else if (footerLayout == 3) {\r\n                Utility.setUnderlineText(threeBinding.gmailText, false);\r\n                Utility.setUnderlineText(threeBinding.contactText, false);\r\n                Utility.setUnderlineText(threeBinding.locationText, false);\r\n                Utility.setUnderlineText(threeBinding.websiteText, false);\r\n            } else if (footerLayout == 4) {\r\n\r\n                Utility.setUnderlineText(fourBinding.gmailText, false);\r\n                Utility.setUnderlineText(fourBinding.contactText, false);\r\n                Utility.setUnderlineText(fourBinding.locationText, false);\r\n                Utility.setUnderlineText(fourBinding.websiteText, false);\r\n            } else if (footerLayout == 5) {\r\n                Utility.setUnderlineText(fiveBinding.gmailText, false);\r\n                Utility.setUnderlineText(fiveBinding.phoneTxt, false);\r\n                Utility.setUnderlineText(fiveBinding.websiteText, false);\r\n            } else if (footerLayout == 6) {\r\n\r\n                Utility.setUnderlineText(sixBinding.textElement1, false);\r\n\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    //for font size\r\n    @Override public void onfontSize(int textsize) {\r\n        if (footerLayout==1){\r\n            oneBinding.gmailText.setTextSize(textsize);\r\n            oneBinding.contactText.setTextSize(textsize);\r\n            oneBinding.locationText.setTextSize(textsize);\r\n        }else if (footerLayout==2){\r\n\r\n            twoBinding.gmailText.setTextSize(textsize);\r\n            twoBinding.contactText.setTextSize(textsize);\r\n            twoBinding.locationText.setTextSize(textsize);\r\n            twoBinding.websiteText.setTextSize(textsize);\r\n        }else if (footerLayout==3){\r\n\r\n            threeBinding.gmailText.setTextSize(textsize);\r\n            threeBinding.contactText.setTextSize(textsize);\r\n            threeBinding.locationText.setTextSize(textsize);\r\n            threeBinding.websiteText.setTextSize(textsize);\r\n        }else if (footerLayout==4){\r\n\r\n            fourBinding.gmailText.setTextSize(textsize);\r\n            fourBinding.contactText.setTextSize(textsize);\r\n            fourBinding.locationText.setTextSize(textsize);\r\n            fourBinding.websiteText.setTextSize(textsize);\r\n        }else if (footerLayout==5){\r\n\r\n            fiveBinding.gmailText.setTextSize(textsize);\r\n            fiveBinding.phoneTxt.setTextSize(textsize);\r\n            fiveBinding.websiteText.setTextSize(textsize);\r\n        }else if (footerLayout==6) {\r\n\r\n            sixBinding.textElement1.setTextSize(textsize);\r\n\r\n        }\r\n\r\n    }\r\n\r\n    //for bold text\r\n    @Override public void onBoldTextChange(boolean Bold) {\r\n        if (Bold) {\r\n            if (footerLayout == 1) {\r\n                Utility.setBold(oneBinding.gmailText, true);\r\n                Utility.setBold(oneBinding.contactText, true);\r\n                Utility.setBold(oneBinding.locationText, true);\r\n\r\n\r\n            } else if (footerLayout == 2) {\r\n                Utility.setBold(twoBinding.gmailText, true);\r\n                Utility.setBold(twoBinding.contactText, true);\r\n                Utility.setBold(twoBinding.locationText, true);\r\n                Utility.setBold(twoBinding.websiteText, true);\r\n\r\n            } else if (footerLayout == 3) {\r\n                Utility.setBold(threeBinding.gmailText, true);\r\n                Utility.setBold(threeBinding.contactText, true);\r\n                Utility.setBold(threeBinding.locationText, true);\r\n                Utility.setBold(threeBinding.websiteText, true);\r\n\r\n\r\n            } else if (footerLayout == 4) {\r\n\r\n                Utility.setBold(fourBinding.gmailText, true);\r\n                Utility.setBold(fourBinding.contactText, true);\r\n                Utility.setBold(fourBinding.locationText, true);\r\n                Utility.setBold(fourBinding.websiteText, true);\r\n            } else if (footerLayout == 5) {\r\n                Utility.setBold(fiveBinding.gmailText, true);\r\n                Utility.setBold(fiveBinding.phoneTxt, true);\r\n                Utility.setBold(fiveBinding.websiteText, true);\r\n            } else if (footerLayout == 6) {\r\n                Utility.setBold(sixBinding.textElement1, true);\r\n\r\n            }\r\n\r\n        }else {\r\n            if (footerLayout == 1) {\r\n                Utility.setBold(oneBinding.gmailText, false);\r\n                Utility.setBold(oneBinding.contactText, false);\r\n                Utility.setBold(oneBinding.locationText, false);\r\n            } else if (footerLayout == 2) {\r\n                Utility.setBold(twoBinding.gmailText, false);\r\n                Utility.setBold(twoBinding.contactText, false);\r\n                Utility.setBold(twoBinding.locationText, false);\r\n                Utility.setBold(twoBinding.websiteText, false);\r\n            } else if (footerLayout == 3) {\r\n                Utility.setBold(threeBinding.gmailText, false);\r\n                Utility.setBold(threeBinding.contactText, false);\r\n                Utility.setBold(threeBinding.locationText, false);\r\n                Utility.setBold(threeBinding.websiteText, false);\r\n            } else if (footerLayout == 4) {\r\n\r\n                Utility.setBold(fourBinding.gmailText, false);\r\n                Utility.setBold(fourBinding.contactText, false);\r\n                Utility.setBold(fourBinding.locationText, false);\r\n                Utility.setBold(fourBinding.websiteText, false);\r\n            } else if (footerLayout == 5) {\r\n                Utility.setBold(fiveBinding.gmailText, false);\r\n                Utility.setBold(fiveBinding.phoneTxt, false);\r\n                Utility.setBold(fiveBinding.websiteText, false);\r\n            } else if (footerLayout == 6) {\r\n\r\n                Utility.setBold(sixBinding.textElement1, false);\r\n\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n    //for italic\r\n    @Override public void onItalicTextChange(boolean Italic) {\r\n        if (Italic) {\r\n\r\n            if (footerLayout == 1) {\r\n                Utility.setItalicText(oneBinding.gmailText, true);\r\n                Utility.setItalicText(oneBinding.contactText, true);\r\n                Utility.setItalicText(oneBinding.locationText, true);\r\n\r\n            } else if (footerLayout == 2) {\r\n\r\n                Utility.setItalicText(twoBinding.gmailText, true);\r\n                Utility.setItalicText(twoBinding.contactText, true);\r\n                Utility.setItalicText(twoBinding.locationText, true);\r\n                Utility.setItalicText(twoBinding.websiteText, true);\r\n\r\n            } else if (footerLayout == 3) {\r\n\r\n                Utility.setItalicText(threeBinding.gmailText, true);\r\n                Utility.setItalicText(threeBinding.contactText, true);\r\n                Utility.setItalicText(threeBinding.locationText, true);\r\n                Utility.setItalicText(threeBinding.websiteText, true);\r\n\r\n            } else if (footerLayout == 4) {\r\n                Utility.setItalicText(fourBinding.gmailText, true);\r\n                Utility.setItalicText(fourBinding.contactText, true);\r\n                Utility.setItalicText(fourBinding.locationText, true);\r\n                Utility.setItalicText(fourBinding.websiteText, true);\r\n            } else if (footerLayout == 5) {\r\n                Utility.setItalicText(fiveBinding.gmailText, true);\r\n                Utility.setItalicText(fiveBinding.phoneTxt, true);\r\n                Utility.setItalicText(fiveBinding.websiteText, true);\r\n            } else if (footerLayout == 6) {\r\n                Utility.setItalicText(sixBinding.textElement1, true);\r\n            }\r\n\r\n        } else {\r\n            if (footerLayout == 1) {\r\n                Utility.setItalicText(oneBinding.gmailText, false);\r\n                Utility.setItalicText(oneBinding.contactText, false);\r\n                Utility.setItalicText(oneBinding.locationText, false);\r\n            } else if (footerLayout == 2) {\r\n                Utility.setItalicText(twoBinding.gmailText, false);\r\n                Utility.setItalicText(twoBinding.contactText, false);\r\n                Utility.setItalicText(twoBinding.locationText, false);\r\n                Utility.setItalicText(twoBinding.websiteText, false);\r\n            } else if (footerLayout == 3) {\r\n                Utility.setItalicText(threeBinding.gmailText, false);\r\n                Utility.setItalicText(threeBinding.contactText, false);\r\n                Utility.setItalicText(threeBinding.locationText, false);\r\n                Utility.setItalicText(threeBinding.websiteText, false);\r\n            } else if (footerLayout == 4) {\r\n\r\n                Utility.setItalicText(fourBinding.gmailText, false);\r\n                Utility.setItalicText(fourBinding.contactText, false);\r\n                Utility.setItalicText(fourBinding.locationText, false);\r\n                Utility.setItalicText(fourBinding.websiteText, false);\r\n            } else if (footerLayout == 5) {\r\n                Utility.setItalicText(fiveBinding.gmailText, false);\r\n                Utility.setItalicText(fiveBinding.phoneTxt, false);\r\n                Utility.setItalicText(fiveBinding.websiteText, false);\r\n            } else if (footerLayout == 6) {\r\n\r\n                Utility.setItalicText(sixBinding.textElement1, false);\r\n\r\n            }\r\n\r\n\r\n        }\r\n    }\r\n\r\n\r\n    public void ChangeBackgroundColorForFrameOne(int colorCode) {\r\n        oneBinding.topView.setBackgroundColor(colorCode);\r\n        oneBinding.topView2.setBackgroundColor(colorCode);\r\n        oneBinding.addressLayoutElement2.setBackgroundColor(colorCode);\r\n    }\r\n\r\n    public void ChangeTextColorForFrameOne(int colodCode) {\r\n        oneBinding.gmailImage.setImageTintList(ColorStateList.valueOf(colodCode));\r\n        oneBinding.gmailText.setTextColor(colodCode);\r\n        oneBinding.contactImage.setImageTintList(ColorStateList.valueOf(colodCode));\r\n        oneBinding.contactText.setTextColor(colodCode);\r\n\r\n    }\r\n\r\n    public void ChangeBackgroundColorForFrameTwo(int colorCode) {\r\n        twoBinding.firstView.setBackgroundTintList(ColorStateList.valueOf(colorCode));\r\n        twoBinding.secondView.setBackgroundTintList(ColorStateList.valueOf(colorCode));\r\n\r\n    }\r\n\r\n    public void ChangeTextColorForFrameTwo(int colodCode) {\r\n        twoBinding.gmailImage.setBackgroundTintList(ColorStateList.valueOf(colodCode));\r\n        twoBinding.gmailText.setTextColor(colodCode);\r\n        twoBinding.contactImage.setBackgroundTintList(ColorStateList.valueOf(colodCode));\r\n        twoBinding.contactText.setTextColor(colodCode);\r\n        twoBinding.websiteImage.setBackgroundTintList(ColorStateList.valueOf(colodCode));\r\n        twoBinding.websiteText.setTextColor(colodCode);\r\n        twoBinding.locationImage.setBackgroundTintList(ColorStateList.valueOf(colodCode));\r\n        twoBinding.locationText.setTextColor(colodCode);\r\n\r\n    }\r\n    public void ChangeTextColorForFrameThree(int colodCode){\r\n        threeBinding.gmailImage.setImageTintList(ColorStateList.valueOf(colodCode));\r\n        threeBinding.gmailText.setTextColor(colodCode);\r\n        threeBinding.contactImage.setImageTintList(ColorStateList.valueOf(colodCode));\r\n        threeBinding.contactText.setTextColor(colodCode);\r\n        threeBinding.websiteImage.setImageTintList(ColorStateList.valueOf(colodCode));\r\n        threeBinding.websiteText.setTextColor(colodCode);\r\n        threeBinding.loacationImage.setImageTintList(ColorStateList.valueOf(colodCode));\r\n        threeBinding.locationText.setTextColor(colodCode);\r\n\r\n    }\r\n\r\n    public void ChangeBackgroundColorForFrameFour(int colorCode) {\r\n        fourBinding.topView2.setBackgroundColor(colorCode);\r\n    }\r\n\r\n    public void ChangeTextColorForFrameFour(int colodCode) {\r\n        fourBinding.gmailImage.setImageTintList(ColorStateList.valueOf(colodCode));\r\n        fourBinding.gmailText.setTextColor(colodCode);\r\n        fourBinding.contactImage.setImageTintList(ColorStateList.valueOf(colodCode));\r\n        fourBinding.contactText.setTextColor(colodCode);\r\n        fourBinding.websiteImage.setImageTintList(ColorStateList.valueOf(colodCode));\r\n        fourBinding.websiteText.setTextColor(colodCode);\r\n        fourBinding.locationImage.setImageTintList(ColorStateList.valueOf(colodCode));\r\n        fourBinding.locationText.setTextColor(colodCode);\r\n\r\n    }\r\n\r\n    public void ChangeBackgroundColorForFrameFive(int colorCode) {\r\n        fiveBinding.element1.setImageTintList(ColorStateList.valueOf(colorCode));\r\n        fiveBinding.element3.setImageTintList(ColorStateList.valueOf(colorCode));\r\n\r\n    }\r\n\r\n    public void ChangeTextColorForFrameFive(int colodCode) {\r\n        fiveBinding.gmailImage.setImageTintList(ColorStateList.valueOf(colodCode));\r\n        fiveBinding.gmailText.setTextColor(colodCode);\r\n        fiveBinding.contactImage.setImageTintList(ColorStateList.valueOf(colodCode));\r\n        fiveBinding.phoneTxt.setTextColor(colodCode);\r\n        fiveBinding.websiteImage.setImageTintList(ColorStateList.valueOf(colodCode));\r\n        fiveBinding.websiteText.setTextColor(colodCode);\r\n    }\r\n\r\n    public void ChangeBackgroundColorForFrameSix(int colorCode) {\r\n        sixBinding.containerElement.setBackgroundTintList(ColorStateList.valueOf(colorCode));\r\n        sixBinding.viewElement2.setBackgroundTintList(ColorStateList.valueOf(colorCode));\r\n\r\n    }\r\n\r\n    public void ChangeTextColorForFrameSix(int colodCode) {\r\n        sixBinding.imgElement1.setImageTintList(ColorStateList.valueOf(colodCode));\r\n        sixBinding.imgElement2.setImageTintList(ColorStateList.valueOf(colodCode));\r\n        sixBinding.imgElement3.setImageTintList(ColorStateList.valueOf(colodCode));\r\n        sixBinding.textElement1.setTextColor(colodCode);\r\n    }\r\n\r\n    public void loadFrameFirstData() {\r\n        BrandListItem activeBrand = preafManager.getActiveBrand();\r\n        if (!activeBrand.getEmail().isEmpty()) {\r\n            oneBinding.gmailText.setText(activeBrand.getEmail());\r\n        } else {\r\n            oneBinding.gmailLayout.setVisibility(View.GONE);\r\n        }\r\n\r\n        if (!activeBrand.getPhonenumber().isEmpty()) {\r\n            oneBinding.contactText.setText(activeBrand.getPhonenumber());\r\n        } else {\r\n            oneBinding.contactLayout.setVisibility(View.GONE);\r\n        }\r\n\r\n        if (!activeBrand.getAddress().isEmpty()) {\r\n            oneBinding.locationText.setText(activeBrand.getAddress());\r\n        } else {\r\n            oneBinding.addressLayoutElement.setVisibility(View.GONE);\r\n        }\r\n    }\r\n\r\n    public void loadFrameTwoData() {\r\n        BrandListItem activeBrand = preafManager.getActiveBrand();\r\n        if (!activeBrand.getEmail().isEmpty()) {\r\n            twoBinding.gmailText.setText(activeBrand.getEmail());\r\n        } else {\r\n            twoBinding.gmailLayout.setVisibility(View.GONE);\r\n        }\r\n\r\n        if (!activeBrand.getPhonenumber().isEmpty()) {\r\n            twoBinding.contactText.setText(activeBrand.getPhonenumber());\r\n        } else {\r\n            twoBinding.contactLayout.setVisibility(View.GONE);\r\n        }\r\n        if (activeBrand.getPhonenumber().isEmpty() && activeBrand.getEmail().isEmpty()) {\r\n            twoBinding.firstView.setVisibility(View.GONE);\r\n        }\r\n\r\n\r\n        if (!activeBrand.getAddress().isEmpty()) {\r\n            twoBinding.locationText.setText(activeBrand.getAddress());\r\n        } else {\r\n            twoBinding.locationLayout.setVisibility(View.GONE);\r\n        }\r\n        if (!activeBrand.getWebsite().isEmpty()) {\r\n            twoBinding.websiteText.setText(activeBrand.getWebsite());\r\n        } else {\r\n            twoBinding.websiteText.setVisibility(View.GONE);\r\n        }\r\n\r\n        if (activeBrand.getAddress().isEmpty() && activeBrand.getWebsite().isEmpty()) {\r\n            twoBinding.secondView.setVisibility(View.GONE);\r\n        }\r\n    }\r\n\r\n    public void loadFrameThreeData() {\r\n        BrandListItem activeBrand = preafManager.getActiveBrand();\r\n        if (!activeBrand.getEmail().isEmpty()) {\r\n            threeBinding.gmailText.setText(activeBrand.getEmail());\r\n        } else {\r\n            threeBinding.gmailLayout.setVisibility(View.GONE);\r\n        }\r\n\r\n        if (!activeBrand.getPhonenumber().isEmpty()) {\r\n            threeBinding.contactText.setText(activeBrand.getPhonenumber());\r\n        } else {\r\n            threeBinding.contactLayout.setVisibility(View.GONE);\r\n        }\r\n\r\n\r\n        if (!activeBrand.getAddress().isEmpty()) {\r\n            threeBinding.locationText.setText(activeBrand.getAddress());\r\n        } else {\r\n            threeBinding.loactionLayout.setVisibility(View.GONE);\r\n        }\r\n\r\n        if (!activeBrand.getWebsite().isEmpty()) {\r\n            threeBinding.websiteText.setText(activeBrand.getWebsite());\r\n        } else {\r\n            threeBinding.websiteText.setVisibility(View.GONE);\r\n        }\r\n\r\n    }\r\n\r\n    public void loadFrameFourData() {\r\n        BrandListItem activeBrand = preafManager.getActiveBrand();\r\n        if (!activeBrand.getEmail().isEmpty()) {\r\n            fourBinding.gmailText.setText(activeBrand.getEmail());\r\n        } else {\r\n            fourBinding.gmailLayout.setVisibility(View.GONE);\r\n        }\r\n\r\n        if (!activeBrand.getPhonenumber().isEmpty()) {\r\n            fourBinding.contactText.setText(activeBrand.getPhonenumber());\r\n        } else {\r\n            fourBinding.contactLayout.setVisibility(View.GONE);\r\n        }\r\n\r\n\r\n        if (!activeBrand.getAddress().isEmpty()) {\r\n            fourBinding.locationText.setText(activeBrand.getAddress());\r\n        } else {\r\n            fourBinding.locationLayout.setVisibility(View.GONE);\r\n        }\r\n\r\n        if (!activeBrand.getWebsite().isEmpty()) {\r\n            fourBinding.websiteText.setText(activeBrand.getWebsite());\r\n        } else {\r\n            fourBinding.websiteText.setVisibility(View.GONE);\r\n        }\r\n\r\n    }\r\n\r\n    public void loadFrameFiveData() {\r\n        BrandListItem activeBrand = preafManager.getActiveBrand();\r\n        if (!activeBrand.getEmail().isEmpty()) {\r\n            fiveBinding.gmailText.setText(activeBrand.getEmail());\r\n        } else {\r\n            fiveBinding.elementEmail.setVisibility(View.GONE);\r\n        }\r\n\r\n        if (!activeBrand.getPhonenumber().isEmpty()) {\r\n            fiveBinding.phoneTxt.setText(activeBrand.getPhonenumber());\r\n        } else {\r\n            fiveBinding.elementMobile.setVisibility(View.GONE);\r\n        }\r\n\r\n        if (!activeBrand.getWebsite().isEmpty()) {\r\n            fiveBinding.websiteText.setText(activeBrand.getWebsite());\r\n        } else {\r\n            fiveBinding.element0.setVisibility(View.GONE);\r\n        }\r\n    }\r\n    //to handle click and drag listener\r\n    private class SingleTapConfirm extends GestureDetector.SimpleOnGestureListener {\r\n        @Override\r\n        public boolean onSingleTapUp(MotionEvent event) {\r\n            return true;\r\n        }\r\n    }\r\n\r\n\r\n    //API CALLS---------------------\r\n\r\n    //getFrames\r\n    private void getFrame() {\r\n        Utility.Log(\"API : \", APIs.GET_FRAME);\r\n        StringRequest stringRequest = new StringRequest(Request.Method.POST, APIs.GET_FRAME, new Response.Listener<String>() {\r\n            @Override\r\n            public void onResponse(String response) {\r\n                Utility.Log(\"GET_FRAME : \", response);\r\n                try {\r\n                    JSONObject jsonObject = new JSONObject(response);\r\n                    brandListItems = ResponseHandler.HandleGetFrame(jsonObject);\r\n                    JSONObject datajsonobjecttt = ResponseHandler.getJSONObject(jsonObject, \"data\");\r\n                    is_frame = datajsonobjecttt.getString(\"is_frame\");\r\n                    if (is_frame.equals(\"1\")) {\r\n                        is_payment_pending = datajsonobjecttt.getString(\"is_payment_pending\");\r\n                        packagee = datajsonobjecttt.getString(\"package\");\r\n                    }\r\n\r\n\r\n                    CreateTabs();\r\n\r\n                } catch (JSONException e) {\r\n                    e.printStackTrace();\r\n                }\r\n\r\n            }\r\n        },\r\n                new Response.ErrorListener() {\r\n                    @Override\r\n                    public void onErrorResponse(VolleyError error) {\r\n\r\n                        error.printStackTrace();\r\n//                        String body;\r\n//                        body = new String(error.networkResponse.data, StandardCharsets.UTF_8);\r\n//                        Log.e(\"Load-Get_Exam \", body);\r\n\r\n                    }\r\n                }\r\n        ) {\r\n            /**\r\n             * Passing some request headers*\r\n             */\r\n            @Override\r\n            public Map<String, String> getHeaders() throws AuthFailureError {\r\n                Map<String, String> params = new HashMap<String, String>();\r\n                params.put(\"Accept\", \"application/x-www-form-urlencoded\");//application/json\r\n                params.put(\"Content-Type\", \"application/x-www-form-urlencoded\");\r\n                params.put(\"Authorization\", \"Bearer\" + preafManager.getUserToken());\r\n                Log.e(\"Token\", params.toString());\r\n                return params;\r\n            }\r\n\r\n            @Override\r\n            protected Map<String, String> getParams() {\r\n                Map<String, String> params = new HashMap<>();\r\n                params.put(\"brand_id\", preafManager.getActiveBrand().getId());\r\n                Utility.Log(\"POSTED-PARAMS-\", params.toString());\r\n                return params;\r\n            }\r\n\r\n        };\r\n\r\n        RequestQueue queue = Volley.newRequestQueue(act);\r\n        queue.add(stringRequest);\r\n    }\r\n\r\n    //For Download,Share and Fav\r\n    private void downloadAndShareApi(final int download,Bitmap customImage) {\r\n\r\n        Utility.showLoadingTran(act);\r\n        Utility.Log(\"API : \", APIs.DOWNLOAD_SHARE);\r\n        File img1File = null;\r\n        if (customImage != null) {\r\n            img1File = CodeReUse.createFileFromBitmap(act, \"photo.jpeg\", customImage);\r\n        }\r\n        ANRequest.MultiPartBuilder request = AndroidNetworking.upload(APIs.DOWNLOAD_SHARE)\r\n                .addHeaders(\"Accept\", \"application/json\")\r\n                .addHeaders(\"Content-Type\", \"application/json\")\r\n                .addHeaders(\"Authorization\", \"Bearer\" + preafManager.getUserToken())\r\n                .setPriority(Priority.HIGH);\r\n\r\n\r\n\r\n        if (isUsingCustomFrame){\r\n            request.addMultipartParameter(\"brand_id\",  preafManager.getActiveBrand().getId());\r\n            request.addMultipartParameter(\"image_id\", selectedObject.getImageid());\r\n            request.addMultipartParameter(\"is_custom\", \"1\");\r\n            if (img1File != null) {\r\n                request.addMultipartFile(\"image\", img1File);\r\n                Log.e(\"br_logo\", String.valueOf(img1File));\r\n            }\r\n        } else {\r\n            request.addMultipartParameter(\"brand_id\", preafManager.getActiveBrand().getId());\r\n            request.addMultipartParameter(\"image_id\", selectedObject.getImageid());\r\n            request.addMultipartParameter(\"frame_id\", selectedBackendFrame.getFrame1Id());\r\n            request.addMultipartParameter(\"is_custom\", \"0\");\r\n        }\r\n        request.addMultipartParameter(\"type\", String.valueOf(download));\r\n\r\n        request.build().setUploadProgressListener(new UploadProgressListener() {\r\n            @Override\r\n            public void onProgress(long bytesUploaded, long totalBytes) {\r\n                // do anything with progress\r\n            }\r\n        })\r\n                .getAsJSONObject(new JSONObjectRequestListener() {\r\n                    @Override\r\n                    public void onResponse(JSONObject response) {\r\n                        Utility.dismissLoadingTran();\r\n                        Utility.Log(\"DOWNLOAD_SHARE : \", response);\r\n                        if (updateLogo && selectedLogo != null)\r\n                            uploadLogoForBrand(selectedLogo);\r\n\r\n                        if (download == DOWLOAD) {\r\n                            //this is coding for can we change logo or not\r\n                            String usedImageCountStr = preafManager.getActiveBrand().getNo_of_used_image();\r\n                            if (usedImageCountStr.isEmpty())\r\n                                usedImageCountStr = \"0\";\r\n\r\n                            int usedCounter = Integer.parseInt(usedImageCountStr) + 1;\r\n                            BrandListItem brandListItem = preafManager.getActiveBrand();\r\n                            brandListItem.setNo_of_used_image(String.valueOf(usedCounter));\r\n                            preafManager.setActiveBrand(brandListItem);\r\n                            preafManager = new PreafManager(act);\r\n                            Log.e(\"UUUU\", preafManager.getActiveBrand().getNo_of_used_image() + \"s\");\r\n                        }\r\n\r\n                    }\r\n\r\n                    @Override\r\n                    public void onError(ANError error) {\r\n                        isLoading = false;\r\n                        Utility.dismissLoadingTran();\r\n                        if (error.getErrorCode() != 0) {\r\n                            Log.e(\"onError errorCode : \", String.valueOf(error.getErrorCode()));\r\n                            Log.e(\"onError errorBody : \", error.getErrorBody());\r\n                            Log.e(\"onError errorDetail : \", error.getErrorDetail());\r\n                        } else {\r\n                            Log.e(\"onError errorDetail : \", error.getErrorDetail());\r\n                        }\r\n                    }\r\n                });\r\n    }\r\n\r\n    //api for access rights\r\n    private void getImageDownloadRights(String flag) {\r\n        Utility.showLoadingTran(act);\r\n        Utility.Log(\"API : \", APIs.CUSTOM_FRAME_ACCESS);\r\n        StringRequest stringRequest = new StringRequest(Request.Method.POST, APIs.CUSTOM_FRAME_ACCESS, new Response.Listener<String>() {\r\n            @Override\r\n            public void onResponse(String response) {\r\n                Utility.dismissLoadingTran();\r\n                Utility.Log(\"Access-Rights-Response:\", response);\r\n                JSONObject respJson = ResponseHandler.createJsonObject(response);\r\n                if (ResponseHandler.getBool(respJson, \"status\")) {\r\n                    JSONArray dataJson = ResponseHandler.getJSONArray(respJson, \"data\");\r\n                    try {\r\n                        String frameCount = ResponseHandler.getString(dataJson.getJSONObject(0), \"frame_counter\").equals(\"\") ? \"0\" : ResponseHandler.getString(dataJson.getJSONObject(0), \"frame_counter\");\r\n                        FrameCountForDownload = Integer.parseInt(frameCount);\r\n                        if (ResponseHandler.getBool(dataJson.getJSONObject(0), \"status\")) {\r\n                            canDownload = true;\r\n                            if (flag.equalsIgnoreCase(\"Download\"))\r\n                                askForDownloadImage();\r\n                            else {\r\n                                requestAgain();\r\n                                saveImageToGallery(true);\r\n\r\n                            }\r\n\r\n                        } else {\r\n                            canDownload = false;\r\n                            downloadLimitExpireDialog();\r\n                            //Toast.makeText(act, \"You can't download image bcoz your limit get expire for one day\", Toast.LENGTH_SHORT).show();\r\n                        }\r\n                    } catch (JSONException e) {\r\n                        e.printStackTrace();\r\n                    }\r\n\r\n                } else {\r\n                    canDownload = false;\r\n                }\r\n\r\n            }\r\n        },\r\n                new Response.ErrorListener() {\r\n                    @Override\r\n                    public void onErrorResponse(VolleyError error) {\r\n                        Utility.dismissLoadingTran();\r\n                        error.printStackTrace();\r\n//                        String body;\r\n//                        body = new String(error.networkResponse.data, StandardCharsets.UTF_8);\r\n//                        Log.e(\"Load-Get_Exam \", body);\r\n\r\n                    }\r\n                }\r\n        ) {\r\n            /**\r\n             * Passing some request headers*\r\n             */\r\n            @Override\r\n            public Map<String, String> getHeaders() throws AuthFailureError {\r\n                Map<String, String> params = new HashMap<String, String>();\r\n                params.put(\"Accept\", \"application/x-www-form-urlencoded\");//application/json\r\n                params.put(\"Content-Type\", \"application/x-www-form-urlencoded\");\r\n                params.put(\"Authorization\", \"Bearer\" + preafManager.getUserToken());\r\n                return params;\r\n            }\r\n\r\n            @Override\r\n            protected Map<String, String> getParams() {\r\n                Map<String, String> params = new HashMap<>();\r\n                params.put(\"brand_id\", preafManager.getActiveBrand().getId());\r\n                Utility.Log(\"Params\", params.toString());\r\n                return params;\r\n            }\r\n\r\n        };\r\n\r\n        RequestQueue queue = Volley.newRequestQueue(act);\r\n        queue.add(stringRequest);\r\n    }\r\n\r\n    @Override public boolean onTouchEvent(MotionEvent motionEvent) {\r\n        scaleGestureDetector.onTouchEvent(motionEvent);\r\n        binding.logoCustom.onTouchEvent(motionEvent);\r\n        return true;\r\n    }\r\n\r\n    private class ScaleListener extends ScaleGestureDetector.SimpleOnScaleGestureListener {\r\n        @Override\r\n        public boolean onScale(ScaleGestureDetector scaleGestureDetector) {\r\n            mScaleFactor *= scaleGestureDetector.getScaleFactor();\r\n            mScaleFactor = Math.max(0.1f, Math.min(mScaleFactor, 10.0f));\r\n            binding.logoCustom.setScaleX(mScaleFactor);\r\n            binding.logoCustom.setScaleY(mScaleFactor);\r\n            return true;\r\n        }\r\n    }\r\n\r\n    //update logo to brand\r\n    private void uploadLogoForBrand(Bitmap img) {\r\n        Utility.showLoadingTran(act);\r\n\r\n        File img1File = null;\r\n        if (img != null) {\r\n            img1File = CodeReUse.createFileFromBitmap(act, \"photo.jpeg\", img);\r\n        }\r\n        ANRequest.MultiPartBuilder request = AndroidNetworking.upload(APIs.EDIT_BRAND)\r\n                .addHeaders(\"Accept\", \"application/json\")\r\n                .addHeaders(\"Content-Type\", \"application/json\")\r\n                .addHeaders(\"Authorization\", \"Bearer\" + preafManager.getUserToken())\r\n                .addMultipartParameter(\"brand_id\", preafManager.getActiveBrand().getId())\r\n                .setPriority(Priority.HIGH);\r\n\r\n        if (img1File != null) {\r\n            request.addMultipartFile(\"br_logo\", img1File);\r\n            Log.e(\"br_logo\", String.valueOf(img1File));\r\n        }\r\n\r\n        request.build().setUploadProgressListener(new UploadProgressListener() {\r\n            @Override\r\n            public void onProgress(long bytesUploaded, long totalBytes) {\r\n                // do anything with progress\r\n            }\r\n        })\r\n                .getAsJSONObject(new JSONObjectRequestListener() {\r\n                    @Override\r\n                    public void onResponse(JSONObject response) {\r\n                        isLoading = false;\r\n                        Utility.dismissLoadingTran();\r\n                        Utility.Log(\"Logo Uploaded\", response);\r\n                    }\r\n\r\n                    @Override\r\n                    public void onError(ANError error) {\r\n                        isLoading = false;\r\n                        Utility.dismissLoadingTran();\r\n                        if (error.getErrorCode() != 0) {\r\n                            Log.e(\"onError errorCode : \", String.valueOf(error.getErrorCode()));\r\n                            Log.e(\"onError errorBody : \", error.getErrorBody());\r\n                            Log.e(\"onError errorDetail : \", error.getErrorDetail());\r\n                        } else {\r\n                            Log.e(\"onError errorDetail : \", error.getErrorDetail());\r\n                        }\r\n                    }\r\n                });\r\n\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/app/brandmania/Activity/ViewAllImage.java	(revision 370ee30acca3d3d48ac095c84f0db25ae164c26e)
+++ app/src/main/java/com/app/brandmania/Activity/ViewAllImage.java	(date 1609159637488)
@@ -850,36 +850,7 @@
     }
 
 
-    //show dialog for upgrading package for using all 6 frames
-    public DialogUpgradeLayoutBinding upgradeLayoutBinding;
-    private void triggerUpgradePackage() {
-        upgradeLayoutBinding=DataBindingUtil.inflate(LayoutInflater.from(act), R.layout.dialog_upgrade_layout, null, false);
-        androidx.appcompat.app.AlertDialog.Builder builder = new androidx.appcompat.app.AlertDialog.Builder(act, R.style.MyAlertDialogStyle_extend);
-        builder.setView(upgradeLayoutBinding.getRoot());
-        androidx.appcompat.app.AlertDialog alertDialog = builder.create();
-        alertDialog.setContentView(upgradeLayoutBinding.getRoot());
-
-        upgradeLayoutBinding.viewPackage.setOnClickListener(new View.OnClickListener() {
-            @Override
-            public void onClick(View v) {
-                alertDialog.dismiss();
-                Intent intent = new Intent(act, PackageActivity.class);
-                act.startActivity(intent);
-                act.overridePendingTransition(R.anim.slide_right_in, R.anim.slide_right_out);
-            }
-        });
-        upgradeLayoutBinding.closeBtn.setOnClickListener(new View.OnClickListener() {
-            @Override
-            public void onClick(View v) {
-                alertDialog.dismiss();
-            }
-        });
-
-        alertDialog.setCancelable(false);
-        alertDialog.getWindow().setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));
-        alertDialog.show();
-
-    }
+
 
     //show dialog for upgrading package for using all 6 frames
     public DialogUpgradeDownloadLimitExpireBinding expireBinding;
Index: app/src/main/java/com/app/brandmania/Activity/UpdateBandList.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.app.brandmania.Activity;\r\n\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.core.app.ActivityCompat;\r\nimport androidx.databinding.DataBindingUtil;\r\n\r\nimport android.Manifest;\r\nimport android.app.Activity;\r\nimport android.app.AlertDialog;\r\nimport android.content.DialogInterface;\r\nimport android.content.Intent;\r\nimport android.content.res.ColorStateList;\r\nimport android.graphics.Bitmap;\r\nimport android.os.Bundle;\r\nimport android.util.Log;\r\nimport android.view.View;\r\nimport android.view.WindowManager;\r\nimport android.widget.Toast;\r\n\r\nimport com.android.volley.AuthFailureError;\r\nimport com.android.volley.Request;\r\nimport com.android.volley.RequestQueue;\r\nimport com.android.volley.Response;\r\nimport com.android.volley.VolleyError;\r\nimport com.android.volley.toolbox.StringRequest;\r\nimport com.android.volley.toolbox.Volley;\r\nimport com.androidnetworking.AndroidNetworking;\r\nimport com.androidnetworking.common.ANRequest;\r\nimport com.androidnetworking.common.Priority;\r\nimport com.androidnetworking.error.ANError;\r\nimport com.androidnetworking.interfaces.JSONObjectRequestListener;\r\nimport com.androidnetworking.interfaces.UploadProgressListener;\r\nimport com.app.brandmania.Common.MakeMyBrandApp;\r\nimport com.app.brandmania.Common.ObserverActionID;\r\nimport com.app.brandmania.Connection.BaseActivity;\r\nimport com.bumptech.glide.Glide;\r\nimport com.google.gson.Gson;\r\nimport com.app.brandmania.Common.Constant;\r\nimport com.app.brandmania.Common.PreafManager;\r\nimport com.app.brandmania.Common.ResponseHandler;\r\nimport com.app.brandmania.Connection.ItemSelectionInterface;\r\nimport com.app.brandmania.Fragment.bottom.ListBottomFragment;\r\nimport com.app.brandmania.Fragment.bottom.PickerFragment;\r\nimport com.app.brandmania.Model.BrandListItem;\r\nimport com.app.brandmania.Model.CommonListModel;\r\nimport com.app.brandmania.R;\r\nimport com.app.brandmania.Utils.APIs;\r\nimport com.app.brandmania.Utils.CodeReUse;\r\nimport com.app.brandmania.Utils.Utility;\r\nimport com.app.brandmania.databinding.ActivityUpdateBandListBinding;\r\n\r\nimport org.json.JSONArray;\r\nimport org.json.JSONException;\r\nimport org.json.JSONObject;\r\n\r\nimport java.io.File;\r\nimport java.util.ArrayList;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\n\r\npublic class UpdateBandList extends BaseActivity implements ItemSelectionInterface,alertListenerCallback {\r\n    PreafManager prefManager;\r\n    Gson gson;\r\n    public static int BRAND_CATEGORY = 0;\r\n    private String BrandTitle;\r\n    private int showingView = -1;\r\n    private boolean isEditModeEnable = false;\r\n    private BrandListItem listModel;\r\n    private boolean isLoading=false;\r\n    private ActivityUpdateBandListBinding binding;\r\n    private Activity act;\r\n    ArrayList<CommonListModel> BRANDTypeList = new ArrayList<>();\r\n    private ListBottomFragment bottomSheetFragment;\r\n    CommonListModel commonListModel;\r\n    private Bitmap selectedImagesBitmap;\r\n    private AlertDialog.Builder alertDialogBuilder;\r\n    @Override\r\n    public void onCreate(Bundle savedInstanceState) {\r\n        setTheme(R.style.AppTheme_material_theme);\r\n        super.onCreate(savedInstanceState);\r\n        act = this;\r\n        captureScreenShort();\r\n        binding = DataBindingUtil.setContentView(act, R.layout.activity_update_band_list);\r\n        getWindow().setFlags(WindowManager.LayoutParams.FLAG_SECURE, WindowManager.LayoutParams.FLAG_SECURE);\r\n        prefManager = new PreafManager(this);\r\n        gson = new Gson();\r\n        CodeReUse.RemoveError(binding.categoryEdt, binding.categoryEdtLayout);\r\n        CodeReUse.RemoveError(binding.nameTxt, binding.nameTxtLayout);\r\n        CodeReUse.RemoveError(binding.phoneTxt, binding.phoneTxtLayout);\r\n        CodeReUse.RemoveError(binding.addressEdt, binding.addressEdtLayout);\r\n        CodeReUse.RemoveError(binding.websiteEdt, binding.websiteEdtLayout);\r\n        CodeReUse.RemoveError(binding.emailIdEdt, binding.emailIdEdtLayout);\r\n        alertDialogBuilder=new AlertDialog.Builder(act);\r\n        binding.viewImgFirst.setTag(\"0\");\r\n\r\n        getBrandCategory(BRAND_CATEGORY);\r\n        binding.categoryEdt.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n\r\n                showFragmentList(BRAND_CATEGORY, BrandTitle, BRANDTypeList);\r\n            }\r\n        });\r\n        binding.addExpenceBtn.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                Validation();\r\n            }\r\n        });\r\n        listModel = gson.fromJson(getIntent().getStringExtra(\"detailsObj\"), BrandListItem.class);\r\n      //  getConversation();\r\n        Log.e(\"-- \", getIntent().getStringExtra(\"detailsObj\"));\r\n        //not filled conditions remains ask to mem\r\n        if (listModel != null) {\r\n            binding.categoryEdt.setText(listModel.getCategoryName());\r\n            binding.nameTxt.setText(listModel.getName());\r\n            binding.phoneTxt.setText(listModel.getPhonenumber());\r\n            binding.addressEdt.setText(listModel.getAddress());\r\n            binding.websiteEdt.setText(listModel.getWebsite());\r\n            binding.emailIdEdt.setText(listModel.getEmail());\r\n            binding.BackButtonMember.setOnClickListener(new View.OnClickListener() {\r\n                @Override\r\n                public void onClick(View v) {\r\n                    onBackPressed();\r\n                }\r\n\r\n            });\r\n            Glide.with(act).load(listModel.getLogo()).placeholder(R.drawable.placeholder).into((binding.viewImgFirst));\r\n            Glide.with(act).load(listModel.getFrame()).placeholder(R.drawable.placeholder).into((binding.selectframe1));\r\n        }\r\n        if (listModel.getNo_of_used_image().isEmpty() || listModel.getNo_of_used_image().equalsIgnoreCase(\"0\")) {\r\n\r\n            binding.viewImgFirst.setOnClickListener(new View.OnClickListener() {\r\n                @Override\r\n                public void onClick(View v) {\r\n                    if (!isEditModeEnable) {\r\n                        if (binding.viewImgFirst.getTag().toString().equalsIgnoreCase(\"1\"))\r\n                            pickerView(Constant.PICKER_FIRST, true, selectedImagesBitmap);\r\n                        else\r\n                            pickerView(Constant.PICKER_FIRST, false, null);\r\n                    }\r\n                }\r\n            });\r\n        }else\r\n        {\r\n            binding.nameTxt.setEnabled(true);\r\n        }\r\n    }\r\n    private void getBrandCategory(int flag) {\r\n        String apiUrl = \"\";\r\n        int requestedMethod = 0;\r\n\r\n        if (flag == BRAND_CATEGORY) {\r\n            apiUrl = APIs.GET_BRAND_CATEGORY;\r\n            requestedMethod = Request.Method.POST;\r\n        }\r\n\r\n        Utility.Log(\"API : \", apiUrl);\r\n\r\n        StringRequest request = new StringRequest(requestedMethod, apiUrl, new Response.Listener<String>() {\r\n            @Override\r\n            public void onResponse(String response) {\r\n                Utility.Log(flag + \"- Response : \", response);\r\n                try {\r\n                    if (ResponseHandler.isSuccess(response, null)) {\r\n                        JSONObject responseJson = ResponseHandler.createJsonObject(response);\r\n                        JSONArray jsonArray = ResponseHandler.getJSONArray(responseJson, \"data\");\r\n                        Log.e(\"jsonArray-\", jsonArray.toString());\r\n                        for (int i = 0; i < jsonArray.length(); i++) {\r\n                            JSONObject itemObj = jsonArray.getJSONObject(i);\r\n                            CommonListModel listModel = new CommonListModel();\r\n                            listModel.setLayoutType(CommonListModel.LAYOUT_BLOCK);\r\n                            listModel.setId(ResponseHandler.getString(itemObj, \"id\"));\r\n                            listModel.setName(ResponseHandler.getString(itemObj, \"biz_cat_name\"));\r\n                            BRANDTypeList.add(listModel);\r\n                        }\r\n                        Log.w(\"Size\", String.valueOf(BRANDTypeList.size()));\r\n                    }\r\n\r\n                } catch (JSONException e) {\r\n                    e.printStackTrace();\r\n                }\r\n            }\r\n        }, new Response.ErrorListener() {\r\n            @Override\r\n            public void onErrorResponse(VolleyError error) {\r\n                error.printStackTrace();\r\n            }\r\n        }) {\r\n\r\n            @Override\r\n            public Map<String, String> getHeaders() throws AuthFailureError {\r\n                Map<String, String> params = new HashMap<String, String>();\r\n                params.put(\"Accept\", \"application/x-www-form-urlencoded\");//application/json\r\n                params.put(\"Content-Type\", \"application/x-www-form-urlencoded\");\r\n                params.put(\"Authorization\", \"Bearer\"+prefManager.getUserToken());\r\n                Log.e(\"Token\", params.toString());\r\n                return params;\r\n            }\r\n\r\n\r\n            @Override\r\n            protected Map<String, String> getParams() throws AuthFailureError {\r\n                HashMap<String, String> map = new HashMap<>();\r\n\r\n\r\n                Utility.Log(\"Params : \", map.toString());\r\n                return map;\r\n            }\r\n        };\r\n        RequestQueue queue = Volley.newRequestQueue(this);\r\n        queue.add(request);\r\n\r\n    }\r\n    private void Validation() {\r\n        boolean isError = false;\r\n        boolean isFocus = false;\r\n\r\n        if (binding.categoryEdt.getText().toString().length() == 0) {\r\n            isError = true;\r\n            isFocus = true;\r\n            binding.categoryEdtLayout.setError(getString(R.string.brandcategory_text));\r\n            binding.categoryEdtLayout.setErrorTextColor(ColorStateList.valueOf(getResources().getColor(R.color.colorPrimary)));\r\n            binding.categoryEdt.requestFocus();\r\n\r\n        }\r\n        if (binding.nameTxt.getText().toString().length() == 0) {\r\n            isError = true;\r\n            isFocus = true;\r\n            binding.nameTxtLayout.setError(getString(R.string.brandname_text));\r\n            binding.nameTxtLayout.setErrorTextColor(ColorStateList.valueOf(getResources().getColor(R.color.colorPrimary)));\r\n            binding.nameTxt.requestFocus();\r\n\r\n        }\r\n\r\n        if (!binding.phoneTxt.getText().toString().equals(\"\")) {\r\n            if (binding.phoneTxt.getText().toString().length() < 10) {\r\n                binding.phoneTxtLayout.setError(getString(R.string.validphoneno_txt));\r\n                binding.phoneTxtLayout.setErrorTextColor(ColorStateList.valueOf(getResources().getColor(R.color.colorPrimary)));\r\n                binding.phoneTxt.requestFocus();\r\n                return;\r\n            }\r\n\r\n        }\r\n        else\r\n        {\r\n            if (binding.phoneTxt.getText().toString().equals(\"\"))\r\n            {\r\n                binding.phoneTxtLayout.setError(getString(R.string.entermobileno_text));\r\n                binding.phoneTxtLayout.setErrorTextColor(ColorStateList.valueOf(getResources().getColor(R.color.colorPrimary)));\r\n                binding.phoneTxt.requestFocus();\r\n                return;\r\n            }\r\n\r\n        }\r\n\r\n        if (binding.addressEdt.getText().toString().length() == 0) {\r\n            isError = true;\r\n            isFocus = true;\r\n            binding.addressEdtLayout.setError(getString(R.string.enter_address));\r\n            binding.addressEdtLayout.setErrorTextColor(ColorStateList.valueOf(getResources().getColor(R.color.colorPrimary)));\r\n            binding.addressEdt.requestFocus();\r\n\r\n        }\r\n\r\n\r\n\r\n        if (!isError) {\r\n            Bitmap bitmap = null;\r\n            if (selectedImagesBitmap != null) {\r\n                bitmap = selectedImagesBitmap;\r\n            }\r\n            Bitmap bitmap1 = null;\r\n            if (selectedImagesBitmap != null) {\r\n                bitmap1 = selectedImagesBitmap;\r\n            }\r\n            EditBrandBrand(bitmap);\r\n        }\r\n\r\n    }\r\n\r\n    private void EditBrandBrand(Bitmap img) {\r\n        if (isLoading)\r\n            return;\r\n        isLoading = true;\r\n        Utility.showProgress(act);\r\n        Log.e(\"API\", APIs.EDIT_BRAND);\r\n        Log.e(\"API\", prefManager.getUserToken());\r\n        File img1File = null;\r\n        if (img != null) {\r\n            img1File = CodeReUse.createFileFromBitmap(act, \"photo.jpeg\", img);\r\n        }\r\n        ANRequest.MultiPartBuilder request = AndroidNetworking.upload(APIs.EDIT_BRAND)\r\n                .addHeaders(\"Accept\", \"application/json\")\r\n                .addHeaders(\"Content-Type\", \"application/json\")\r\n                .addHeaders(\"Authorization\", \"Bearer\"+prefManager.getUserToken())\r\n                .addMultipartParameter(\"brand_id\",listModel.getId())\r\n                .addMultipartParameter(\"br_category\",  binding.categoryEdt.getText().toString())\r\n                .addMultipartParameter(\"br_name\", binding.nameTxt.getText().toString())\r\n                .addMultipartParameter(\"br_phone\", binding.phoneTxt.getText().toString())\r\n                .addMultipartParameter(\"br_address\", binding.addressEdt.getText().toString())\r\n                .addMultipartParameter(\"br_website\", binding.websiteEdt.getText().toString())\r\n                .addMultipartParameter(\"br_email\", binding.emailIdEdt.getText().toString())\r\n                .setTag(\"Add User\")\r\n                .setPriority(Priority.HIGH);\r\n\r\n        if (commonListModel!=null)\r\n        {\r\n            request.addMultipartParameter(\"br_category\",commonListModel.getId());\r\n        }\r\n        else\r\n        {\r\n            request.addMultipartParameter(\"br_category\",listModel.getCategoryId());\r\n        }\r\n\r\n        if (img1File != null) {\r\n            request.addMultipartFile(\"br_logo\", img1File);\r\n            Log.e(\"br_logo\", String.valueOf(img1File));\r\n        }\r\n\r\n//        if (img1File1 != null) {\r\n//            request.addMultipartFile(\"frame\", img1File1);\r\n//            Log.e(\"frame\", String.valueOf(img1File1));\r\n//        }\r\n\r\n        request.build().setUploadProgressListener(new UploadProgressListener() {\r\n            @Override\r\n            public void onProgress(long bytesUploaded, long totalBytes) {\r\n                // do anything with progress\r\n            }\r\n        })\r\n                .getAsJSONObject(new JSONObjectRequestListener() {\r\n                    @Override\r\n                    public void onResponse(JSONObject response) {\r\n                        isLoading = false;\r\n                        Utility.dismissProgress();\r\n                        Utility.Log(\"Verify-Response\", response);\r\n\r\n                        try {\r\n\r\n                            if (response.getBoolean(\"status\")) {\r\n\r\n                                alertDialogBuilder.setMessage(ResponseHandler.getString(response, \"message\"));\r\n                                alertDialogBuilder.setPositiveButton(\"Ok\", new DialogInterface.OnClickListener() {\r\n                                    @Override\r\n                                    public void onClick(DialogInterface arg0, int arg1) {\r\n                                        onBackPressed();\r\n                                    }\r\n                                });\r\n                                AlertDialog alertDialog = alertDialogBuilder.create();\r\n                                alertDialog.setCancelable(false);\r\n                                alertDialog.show();\r\n                                MakeMyBrandApp.getInstance().getObserver().setValue(ObserverActionID.RELOAD_BRANDS);\r\n                                MakeMyBrandApp.getInstance().getObserver().setValue(ObserverActionID.REFRESH_BRAND_NAME);\r\n\r\n\r\n                            }\r\n                        }\r\n                        catch (JSONException e) {\r\n                            e.printStackTrace();\r\n                        }\r\n\r\n\r\n\r\n                    }\r\n\r\n                    @Override\r\n                    public void onError(ANError error) {\r\n                        isLoading = false;\r\n                        Utility.dismissProgress();\r\n\r\n                        if (error.getErrorCode() != 0) {\r\n                            Log.e(\"onError errorCode : \", String.valueOf(error.getErrorCode()));\r\n                            Log.e(\"onError errorBody : \", error.getErrorBody());\r\n                            Log.e(\"onError errorDetail : \", error.getErrorDetail());\r\n                        } else {\r\n                            Log.e(\"onError errorDetail : \", error.getErrorDetail());\r\n                        }\r\n                    }\r\n                });\r\n\r\n    }\r\n    public void showFragmentList(int callingFlag, String title, ArrayList<CommonListModel> datalist) {\r\n        bottomSheetFragment = new ListBottomFragment();\r\n        Log.e(\"Size---\", String.valueOf(datalist.size()));\r\n        bottomSheetFragment.setListData(callingFlag, title, datalist);\r\n        if (bottomSheetFragment.isVisible()) {\r\n            bottomSheetFragment.dismiss();\r\n        }\r\n        if (bottomSheetFragment.isAdded()) {\r\n            bottomSheetFragment.dismiss();\r\n        }\r\n        bottomSheetFragment.show(getSupportFragmentManager(), bottomSheetFragment.getTag());\r\n    }\r\n    private void pickerView(int actionId, boolean viewMode, Bitmap selectedBitmap) {\r\n        PickerFragment pickerFragment = new PickerFragment(act);\r\n        pickerFragment.setEnableViewMode(viewMode);\r\n        pickerFragment.setActionId(actionId);\r\n\r\n        if (viewMode) {\r\n            pickerFragment.setSelectedBitmapForFullView(selectedBitmap);\r\n        }\r\n        PickerFragment.HandlerImageLoad imageLoad = new PickerFragment.HandlerImageLoad() {\r\n            @Override\r\n            public void onGalleryResult(int flag, Bitmap bitmap) {\r\n                if (flag == Constant.PICKER_FIRST) {\r\n                    Glide.with(act).clear(binding.viewImgFirst);\r\n                    Glide.with(act).clear(binding.selectframe1);\r\n                    binding.viewImgFirst.setImageBitmap(bitmap);\r\n                    binding.imgEmptyStateFirst.setVisibility(View.GONE);\r\n                    binding.actionDeleteFirst.setVisibility(View.VISIBLE);\r\n                    selectedImagesBitmap = bitmap;\r\n                    binding.viewImgFirst.setTag(\"1\");\r\n                    if (!isEditModeEnable) {\r\n\r\n                    }\r\n                    binding.viewImgFirst.setVisibility(View.VISIBLE);\r\n                }\r\n\r\n\r\n\r\n            }\r\n        };\r\n        pickerFragment.setImageLoad(imageLoad);\r\n        pickerFragment.show(getSupportFragmentManager(), pickerFragment.getTag());\r\n    }\r\n    @Override public void onBackPressed() {\r\n        CodeReUse.activityBackPress(act);\r\n    }\r\n    @Override public void onItemSelection(int calledFlag, int position, CommonListModel listModel) {\r\n        if (bottomSheetFragment != null && bottomSheetFragment.isVisible()) {\r\n            bottomSheetFragment.dismiss();\r\n        }\r\n        if (calledFlag == BRAND_CATEGORY) {\r\n            binding.categoryEdt.setText(listModel.getName());\r\n            commonListModel=listModel;\r\n        }\r\n    }\r\n    private void requestAgain() {\r\n        ActivityCompat.requestPermissions(act,\r\n                new String[]{Manifest.permission.CAMERA, Manifest.permission.WRITE_EXTERNAL_STORAGE,\r\n                        Manifest.permission.READ_EXTERNAL_STORAGE},\r\n                CodeReUse.ASK_PERMISSSION);\r\n    }\r\n    @Override public void alertListenerClick() {\r\n        requestAgain();\r\n    }\r\n    public void captureScreenShort()\r\n    {\r\n        getWindow().setFlags(WindowManager.LayoutParams.FLAG_SECURE, WindowManager.LayoutParams.FLAG_SECURE);\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/app/brandmania/Activity/UpdateBandList.java	(revision 370ee30acca3d3d48ac095c84f0db25ae164c26e)
+++ app/src/main/java/com/app/brandmania/Activity/UpdateBandList.java	(date 1609159792058)
@@ -128,8 +128,8 @@
             Glide.with(act).load(listModel.getLogo()).placeholder(R.drawable.placeholder).into((binding.viewImgFirst));
             Glide.with(act).load(listModel.getFrame()).placeholder(R.drawable.placeholder).into((binding.selectframe1));
         }
-        if (listModel.getNo_of_used_image().isEmpty() || listModel.getNo_of_used_image().equalsIgnoreCase("0")) {
 
+        if (listModel.getNo_of_used_image().isEmpty() || listModel.getNo_of_used_image().equalsIgnoreCase("0") || listModel.getLogo().isEmpty()) {
             binding.viewImgFirst.setOnClickListener(new View.OnClickListener() {
                 @Override
                 public void onClick(View v) {
Index: .idea/gradle.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"GradleMigrationSettings\" migrationVersion=\"1\" />\r\n  <component name=\"GradleSettings\">\r\n    <option name=\"linkedExternalProjectsSettings\">\r\n      <GradleProjectSettings>\r\n        <option name=\"testRunner\" value=\"PLATFORM\" />\r\n        <option name=\"distributionType\" value=\"DEFAULT_WRAPPED\" />\r\n        <option name=\"externalProjectPath\" value=\"$PROJECT_DIR$\" />\r\n        <option name=\"gradleJvm\" value=\"1.8\" />\r\n        <option name=\"modules\">\r\n          <set>\r\n            <option value=\"$PROJECT_DIR$\" />\r\n            <option value=\"$PROJECT_DIR$/app\" />\r\n          </set>\r\n        </option>\r\n        <option name=\"resolveModulePerSourceSet\" value=\"false\" />\r\n      </GradleProjectSettings>\r\n    </option>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/gradle.xml	(revision 370ee30acca3d3d48ac095c84f0db25ae164c26e)
+++ .idea/gradle.xml	(date 1609155220860)
@@ -15,6 +15,7 @@
           </set>
         </option>
         <option name="resolveModulePerSourceSet" value="false" />
+        <option name="useQualifiedModuleNames" value="true" />
       </GradleProjectSettings>
     </option>
   </component>
