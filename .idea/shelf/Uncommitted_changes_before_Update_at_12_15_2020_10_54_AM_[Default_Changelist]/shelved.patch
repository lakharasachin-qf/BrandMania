Index: app/src/main/java/com/app/brandmania/Activity/ViewBrandActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.app.brandmania.Activity;\r\n\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.core.app.ActivityCompat;\r\nimport androidx.core.content.ContextCompat;\r\nimport androidx.databinding.DataBindingUtil;\r\nimport androidx.recyclerview.widget.LinearLayoutManager;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\nimport androidx.swiperefreshlayout.widget.SwipeRefreshLayout;\r\n\r\nimport android.Manifest;\r\nimport android.app.Activity;\r\nimport android.content.Intent;\r\nimport android.content.pm.PackageManager;\r\nimport android.net.Uri;\r\nimport android.os.Bundle;\r\nimport android.util.Log;\r\nimport android.view.View;\r\nimport android.view.WindowManager;\r\nimport android.widget.Toast;\r\n\r\nimport com.android.volley.AuthFailureError;\r\nimport com.android.volley.Request;\r\nimport com.android.volley.RequestQueue;\r\nimport com.android.volley.Response;\r\nimport com.android.volley.VolleyError;\r\nimport com.android.volley.toolbox.StringRequest;\r\nimport com.android.volley.toolbox.Volley;\r\nimport com.app.brandmania.Adapter.BrandAdapter;\r\nimport com.app.brandmania.Common.PreafManager;\r\nimport com.app.brandmania.Common.ResponseHandler;\r\nimport com.app.brandmania.Connection.BaseActivity;\r\nimport com.app.brandmania.Model.BrandListItem;\r\nimport com.app.brandmania.Model.SliderItem;\r\nimport com.app.brandmania.R;\r\nimport com.app.brandmania.Utils.APIs;\r\nimport com.app.brandmania.Utils.CodeReUse;\r\nimport com.app.brandmania.Utils.Utility;\r\n\r\nimport com.app.brandmania.databinding.ActivityViewBrandBinding;\r\nimport com.google.gson.Gson;\r\n\r\nimport org.json.JSONArray;\r\nimport org.json.JSONException;\r\nimport org.json.JSONObject;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\n\r\npublic class ViewBrandActivity extends BaseActivity {\r\n    Activity act;\r\n    private ActivityViewBrandBinding binding;\r\n    private static final int REQUEST_CALL = 1;\r\n    ArrayList<BrandListItem> multiListItems=new ArrayList<>();\r\n    PreafManager preafManager;\r\n    private String is_frame=\"\";\r\n    @Override\r\n    public void onCreate(Bundle savedInstanceState) {\r\n        setTheme(R.style.AppTheme_material_theme);\r\n        super.onCreate(savedInstanceState);\r\n        act=this;\r\n        captureScreenShort();\r\n\r\n        preafManager=new PreafManager(this);\r\n        binding= DataBindingUtil.setContentView(act,R.layout.activity_view_brand);\r\n        getWindow().setFlags(WindowManager.LayoutParams.FLAG_SECURE, WindowManager.LayoutParams.FLAG_SECURE);\r\n        binding.BackButtonMember.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                onBackPressed();\r\n            }\r\n\r\n        });\r\n\r\n        binding.addBrandImage.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                Intent intent=new Intent(getApplicationContext(),AddBrandMultipleActivity.class);\r\n                startActivity(intent);\r\n            }\r\n        });\r\n\r\n        binding.swipeContainer.setColorSchemeResources(R.color.colorPrimary,\r\n                R.color.colorsecond,\r\n                R.color.colorthird);\r\n        binding.swipeContainer.setOnRefreshListener(new SwipeRefreshLayout.OnRefreshListener() {\r\n            @Override\r\n            public void onRefresh() {\r\n                startAnimation();\r\n                getBrandList();\r\n            }\r\n        });\r\n\r\n        startAnimation();\r\n        getBrandList();\r\n    }\r\n    private void startAnimation() {\r\n        binding.shimmerViewContainer.startShimmer();\r\n        binding.shimmerViewContainer.setVisibility(View.VISIBLE);\r\n        binding.getBrandList.setVisibility(View.GONE);\r\n        binding.emptyStateLayout.setVisibility(View.GONE);\r\n    }\r\n    private void GetBrandAddaptor() {\r\n        BrandAdapter MenuAddaptor = new BrandAdapter(multiListItems, this);\r\n        BrandAdapter.BRANDBYIDIF brandbyidif=new BrandAdapter.BRANDBYIDIF() {\r\n            @Override\r\n            public void fireBrandList(int position, BrandListItem model) {\r\n                getBrandById(model);\r\n            }\r\n        };\r\n        MenuAddaptor.setBrandbyidif(brandbyidif);\r\n        RecyclerView.LayoutManager mLayoutManager = new LinearLayoutManager(act, RecyclerView.VERTICAL, false);\r\n        binding.getBrandList.setHasFixedSize(true);\r\n        binding.getBrandList.setLayoutManager(mLayoutManager);\r\n        binding.getBrandList.setAdapter(MenuAddaptor);\r\n\r\n    }\r\n    private void getBrandList() {\r\n        Utility.Log(\"API : \", APIs.GET_BRAND);\r\n        StringRequest stringRequest = new StringRequest(Request.Method.POST, APIs.GET_BRAND, new Response.Listener<String>() {\r\n            @Override\r\n            public void onResponse(String response) {\r\n                binding.swipeContainer.setRefreshing(false);\r\n                Utility.Log(\"GET_BRAND : \", response);\r\n                try {\r\n\r\n                    JSONObject jsonObject = new JSONObject(response);\r\n                    multiListItems = ResponseHandler.HandleGetBrandList(jsonObject);\r\n                    if (multiListItems != null && multiListItems.size() != 0) {\r\n                        GetBrandAddaptor();\r\n                        binding.shimmerViewContainer.stopShimmer();\r\n                        binding.shimmerViewContainer.setVisibility(View.GONE);\r\n                        binding.getBrandList.setVisibility(View.VISIBLE);\r\n                        binding.emptyStateLayout.setVisibility(View.GONE);\r\n                    }\r\n                    if (multiListItems == null || multiListItems.size() == 0) {\r\n                        binding.emptyStateLayout.setVisibility(View.VISIBLE);\r\n                        binding.getBrandList.setVisibility(View.GONE);\r\n                        binding.shimmerViewContainer.stopShimmer();\r\n                        binding.shimmerViewContainer.setVisibility(View.GONE);\r\n                    }\r\n\r\n                } catch (JSONException e) {\r\n                    e.printStackTrace();\r\n                }\r\n\r\n\r\n            }\r\n        },\r\n                new Response.ErrorListener() {\r\n                    @Override\r\n                    public void onErrorResponse(VolleyError error) {\r\n                        binding.swipeContainer.setRefreshing(false);\r\n                        error.printStackTrace();\r\n\r\n                        binding.swipeContainer.setRefreshing(false);\r\n                        binding.emptyStateLayout.setVisibility(View.VISIBLE);\r\n                        binding.getBrandList.setVisibility(View.GONE);\r\n                        binding.shimmerViewContainer.stopShimmer();\r\n                        binding.shimmerViewContainer.setVisibility(View.GONE);\r\n\r\n                    }\r\n                }\r\n        ) {\r\n            /**\r\n             * Passing some request headers*\r\n             */\r\n\r\n            @Override\r\n            public Map<String, String> getHeaders() throws AuthFailureError {\r\n                Map<String, String> params = new HashMap<String, String>();\r\n                params.put(\"Accept\", \"application/json\");\r\n                params.put(\"Content-Type\", \"application/json\");\r\n                params.put(\"Authorization\",\"Bearer \"+preafManager.getUserToken());\r\n                Log.e(\"Token\",params.toString());\r\n                return params;\r\n            }\r\n\r\n\r\n            @Override\r\n            protected Map<String, String> getParams() {\r\n                Map<String, String> params = new HashMap<>();\r\n\r\n                Log.e(\"DateNdClass\", params.toString());\r\n                //params.put(\"upload_type_id\", String.valueOf(Constant.ADD_NOTICE));\r\n                Utility.Log(\"POSTED-PARAMS-\", params.toString());\r\n                return params;\r\n            }\r\n\r\n        };\r\n\r\n        RequestQueue queue = Volley.newRequestQueue(getApplicationContext());\r\n        queue.add(stringRequest);\r\n    }\r\n    private void makePhoneCall() {\r\n        String number =\"8460638464\";\r\n        if (number.trim().length() > 0) {\r\n            if (ContextCompat.checkSelfPermission(act, Manifest.permission.CALL_PHONE) != PackageManager.PERMISSION_GRANTED) {\r\n                ActivityCompat.requestPermissions(act,\r\n                        new String[]{Manifest.permission.CALL_PHONE}, REQUEST_CALL);\r\n            } else {\r\n                String dial = \"tel:\" + number;\r\n                startActivity(new Intent(Intent.ACTION_CALL, Uri.parse(dial)));\r\n            }\r\n        }\r\n    }\r\n    @Override public void onRequestPermissionsResult(int requestCode,  String[] permissions,  int[] grantResults) {\r\n        if (requestCode == REQUEST_CALL) {\r\n            if (grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {\r\n                makePhoneCall();\r\n            } else {\r\n                Toast.makeText(act, \"Permission DENIED\", Toast.LENGTH_SHORT).show();\r\n            }\r\n        }\r\n    }\r\n    @Override public void onBackPressed() {\r\n        CodeReUse.activityBackPress(act);\r\n    }\r\n    public void captureScreenShort() {\r\n        getWindow().setFlags(WindowManager.LayoutParams.FLAG_SECURE, WindowManager.LayoutParams.FLAG_SECURE);\r\n    }\r\n    private void getBrandById(BrandListItem model) {\r\n\r\n        Utility.Log(\"API : \", APIs.GET_BRAND_BY_ID);\r\n        StringRequest stringRequest = new StringRequest(Request.Method.POST, APIs.GET_BRAND_BY_ID, new Response.Listener<String>() {\r\n            @Override\r\n            public void onResponse(String response) {\r\n                binding.swipeContainer.setRefreshing(false);\r\n                Utility.Log(\"GET_BRAND_BY_ID : \", response);\r\n                ArrayList<BrandListItem> brandListItems=new ArrayList<>();\r\n                try {\r\n                    JSONObject jsonObject = new JSONObject(response);\r\n                    multiListItems = ResponseHandler.HandleGetBrandById(jsonObject);\r\n\r\n\r\n                    SliderItem sliderItem=new SliderItem();\r\n                    sliderItem.setPriceForPay(multiListItems.get(0).getRate());\r\n                    sliderItem.setPackageTitle(multiListItems.get(0).getPackagename());\r\n                    sliderItem.setPackageid(multiListItems.get(0).getPackage_id());\r\n                    sliderItem.setTemplateTitle(multiListItems.get(0).getNo_of_frame());\r\n                    sliderItem.setImageTitle(multiListItems.get(0).getNo_of_total_image());\r\n                    sliderItem.setBrandId(multiListItems.get(0).getId());\r\n\r\n                    Gson gson=new Gson();\r\nLog.e(\"DATA\",gson.toJson(sliderItem));\r\n\r\n\r\n\r\n                    Intent i = new Intent(act, RazorPayActivity.class);\r\n\r\n                    i.putExtra(\"detailsObj\",gson.toJson(sliderItem));\r\n                    /*i.addCategory(Intent.CATEGORY_HOME);\r\n                    i.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);*/\r\n                    startActivity(i);\r\n                    overridePendingTransition(R.anim.slide_right_in, R.anim.slide_right_out);\r\n\r\n                } catch (JSONException e) {\r\n                    e.printStackTrace();\r\n                }\r\n\r\n\r\n            }\r\n        },\r\n                new Response.ErrorListener() {\r\n                    @Override\r\n                    public void onErrorResponse(VolleyError error) {\r\n                        binding.swipeContainer.setRefreshing(false);\r\n                        error.printStackTrace();\r\n\r\n\r\n\r\n                    }\r\n                }\r\n        ) {\r\n            /**\r\n             * Passing some request headers*\r\n             */\r\n\r\n            @Override\r\n            public Map<String, String> getHeaders() throws AuthFailureError {\r\n                Map<String, String> params = new HashMap<String, String>();\r\n\r\n                params.put(\"Authorization\",\"Bearer \"+preafManager.getUserToken());\r\n                Log.e(\"Token\",params.toString());\r\n                return params;\r\n            }\r\n\r\n\r\n            @Override\r\n            protected Map<String, String> getParams() {\r\n                Map<String, String> params = new HashMap<>();\r\n                params.put(\"brand_id\",model.getId());\r\n                Log.e(\"DateNdClass\", params.toString());\r\n                //params.put(\"upload_type_id\", String.valueOf(Constant.ADD_NOTICE));\r\n                Utility.Log(\"POSTED-PARAMS-\", params.toString());\r\n                return params;\r\n            }\r\n\r\n        };\r\n\r\n        RequestQueue queue = Volley.newRequestQueue(getApplicationContext());\r\n        queue.add(stringRequest);\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/app/brandmania/Activity/ViewBrandActivity.java	(revision 682996fc78d02501c806f13b3cf85bd02b6efbf0)
+++ app/src/main/java/com/app/brandmania/Activity/ViewBrandActivity.java	(date 1607942475754)
@@ -70,7 +70,6 @@
             public void onClick(View v) {
                 onBackPressed();
             }
-
         });
 
         binding.addBrandImage.setOnClickListener(new View.OnClickListener() {
Index: app/src/main/java/com/app/brandmania/Utils/APIs.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.app.brandmania.Utils;\r\n\r\npublic class APIs {\r\n    public static final String URL = \"http://queryfinders.com/brandmania_uat/public/api/\";\r\n   // public static final String URL= \"http://192.168.1.131/brand365/public/api/\";\r\n    public static final String USER_REGISTRATION =URL+\"userRegistration\";\r\n    public static final String ADD_BRAND = URL+\"addBrand\";\r\n    public static final String GET_BRAND_CATEGORY = URL + \"getBrandCategory\";\r\n    public static final String GET_BANNER = URL + \"getBanner\";\r\n    public static final String GET_IMAGE_CATEGORY = URL + \"getImageCategory\";\r\n    public static final String GET_IMAGEBUID_CATEGORY = URL + \"getImageCategoryImage\";\r\n    public static final String UPDATE_TOKEN = URL+\"updateToken\";\r\n    public static final String EDIT_BRAND = URL + \"editBrand\";\r\n    public static final String ADD_USERACTIVITY = URL + \"addUserActivity\";\r\n    public static final String FAQ = URL+\"getFaq\";\r\n    public static final String REPORT_BUG =URL+\"addReportBugs\";\r\n    public static final String ABOUT_ISMART_HOMES = URL + \"\";\r\n    public static final String DOWNLOAD_SHARE = URL + \"addImageActivity\";\r\n    public static final String GET_DOWNLOADLIST_ITEM = URL+\"getDownloadList\";\r\n    public static final String GET_FAVORITLIST_ITEM = URL + \"getFavoriteList\";\r\n    public static final String DELETE_BRAND = URL+\"deleteBrandById\";\r\n    public static final String REMOVE_FAVOURIT = URL + \"RemoveFromFav\";\r\n    public static final String IS_COMPLETE = URL +\"fetchFlowStatus\";\r\n    public static final String GET_FRAME = URL+\"getFrames\";\r\n    public static final String GET_BRAND = URL+\"getBrand\";\r\n    public static final String GET_NOTIFICATION = URL+\"getNotification\";\r\n    public static final String VERIFY_OTP = URL+\"otpVerify\";\r\n    public static final String SEND_OTP =URL+\"sendOtp\" ;\r\n    public static final String MAKE_PAYMENT = URL+\"makePayment\";\r\n    public static final String GENERATE_ORDER_ID =URL+\"createOrder\";\r\n    public static final String GET_PACKAGE = URL+\"getPackage\";\r\n    public static final String GET_UPDATE = URL+\"getApplicationVersion\";\r\n    public static final String ADD_CUSTOMFRAME = URL + \"addFrameToBrand\";\r\n    public static final String GET_BRAND_BY_ID = URL + \"getBrandById\";\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/app/brandmania/Utils/APIs.java	(revision 682996fc78d02501c806f13b3cf85bd02b6efbf0)
+++ app/src/main/java/com/app/brandmania/Utils/APIs.java	(date 1607949068319)
@@ -2,7 +2,9 @@
 
 public class APIs {
     public static final String URL = "http://queryfinders.com/brandmania_uat/public/api/";
-   // public static final String URL= "http://192.168.1.131/brand365/public/api/";
+    //public static final String URL = "http://queryfinders.com/Brand360/public/api/";
+
+ // public static final String URL= "http://192.168.1.131/brand365/public/api/";
     public static final String USER_REGISTRATION =URL+"userRegistration";
     public static final String ADD_BRAND = URL+"addBrand";
     public static final String GET_BRAND_CATEGORY = URL + "getBrandCategory";
Index: app/src/main/java/com/app/brandmania/Connection/MyFirebaseMessagingService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.app.brandmania.Connection;\r\n\r\nimport android.app.Notification;\r\nimport android.app.NotificationChannel;\r\nimport android.app.NotificationManager;\r\nimport android.app.PendingIntent;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.graphics.BitmapFactory;\r\nimport android.graphics.Color;\r\nimport android.media.RingtoneManager;\r\nimport android.net.Uri;\r\nimport android.os.Build;\r\nimport android.util.Log;\r\n\r\nimport androidx.core.app.NotificationCompat;\r\n\r\nimport com.google.firebase.messaging.FirebaseMessagingService;\r\nimport com.google.firebase.messaging.RemoteMessage;\r\nimport com.app.brandmania.Activity.HomeActivity;\r\nimport com.app.brandmania.Activity.ViewAllImage;\r\nimport com.app.brandmania.Activity.ViewBrandActivity;\r\nimport com.app.brandmania.Common.PreafManager;\r\nimport com.app.brandmania.R;\r\nimport com.app.brandmania.Utils.CodeReUse;\r\nimport com.app.brandmania.Utils.Utility;\r\n\r\npublic class MyFirebaseMessagingService extends FirebaseMessagingService {\r\n\r\n//    @Override\r\n//    public void onNewToken(String s) {\r\n//        super.onNewToken(s);\r\n//        Log.e(\"NEW_TOKEN\",s);\r\n//    }\r\n//\r\n//    @Override\r\n//    public void onMessageReceived(RemoteMessage remoteMessage) {\r\n//        super.onMessageReceived(remoteMessage);\r\n//        Log.e(\"remoteMessage\", remoteMessage.getData().toString());\r\n//\r\n//        // Checking for first time launch - before calling setContentView()\r\n//        PreafManager prefManager = new PreafManager(getApplicationContext());\r\n//\r\n//        //if (prefManager.getReceiveNotification()) {\r\n//        ///         removePendingOrders(remoteMessage.getData().get(\"message\"));\r\n//        Utility.Log(\"Notification\", remoteMessage.getData().get(\"title\") + \"-\" + remoteMessage.getData().get(\"msg\") + \"-\" + remoteMessage.getData().get(\"flag\"));\r\n//\r\n//\r\n//    }\r\n\r\n    public static final String TAG = MyFirebaseMessagingService.class.getSimpleName();\r\n\r\n\r\n    @Override\r\n    public void onNewToken(String s) {\r\n        super.onNewToken(s);\r\n    }\r\n\r\n    @Override\r\n    public void onMessageReceived( RemoteMessage remoteMessage) {\r\n        super.onMessageReceived(remoteMessage);\r\n        Log.e(\"remoteMessage\", remoteMessage.getData().toString());\r\n        Log.e(\"remoteMessage\", remoteMessage.getNotification().toString());\r\n\r\n        // Checking for first time launch - before calling setContentView()\r\n        PreafManager prefManager = new PreafManager(getApplicationContext());\r\n\r\n        //if (prefManager.getReceiveNotification()) {\r\n        ///         removePendingOrders(remoteMessage.getData().get(\"message\"));\r\n        Utility.Log(\"Notification\", remoteMessage.getData().get(\"title\") + \"-\" + remoteMessage.getData().get(\"msg\") + \"-\" + remoteMessage.getData().get(\"flag\"));\r\n\r\n        //Utility.Log(\"Notification\", remoteMessage.getNotification().getTitle() + \"- \" + remoteMessage.getNotification().getBody()+\"-\"+remoteMessage.getNotification().);\r\n        shownotification(remoteMessage.getData().get(\"title\"), remoteMessage.getData().get(\"msg\"), remoteMessage.getData().get(\"flag\"));\r\n        //shownotification(remoteMessage.getNotification().getTitle(), remoteMessage.getNotification().getBody());\r\n        //  }\r\n\r\n    }\r\n\r\n\r\n    private void shownotification(String title, String msg, String message) {\r\n\r\n\r\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {\r\n\r\n            NotificationManager mNotificationManager =\r\n                    (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE);\r\n            int importance = NotificationManager.IMPORTANCE_HIGH;\r\n            NotificationChannel mChannel = new NotificationChannel(CodeReUse.CHANNEL_ID, CodeReUse.CHANNEL_NAME, importance);\r\n            mChannel.setDescription(CodeReUse.CHANNEL_DESCRIPTION);\r\n            mChannel.enableLights(true);\r\n            mChannel.setLightColor(Color.RED);\r\n            mChannel.enableVibration(true);\r\n            //mChannel.setSound(soundUri, audioAttributes);\r\n            mChannel.setVibrationPattern(new long[]{100, 200, 300, 400, 500, 400, 300, 200, 400});\r\n            mNotificationManager.createNotificationChannel(mChannel);\r\n        }\r\n        String copiedMessage = message;\r\n        Intent intent = new Intent(this, HomeActivity.class);;\r\n        if (copiedMessage.equalsIgnoreCase(\"addBrand\")) {\r\n            intent = new Intent(this, ViewBrandActivity.class);\r\n\r\n        } else if (copiedMessage.equalsIgnoreCase(\"addFrame\")) {\r\n            intent = new Intent(this, ViewBrandActivity.class);\r\n        }\r\n        else {\r\n        intent = new Intent(this, HomeActivity.class);\r\n        }\r\n        intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);\r\n        PendingIntent pendingIntent = PendingIntent.getActivity(this, 0, intent, PendingIntent.FLAG_UPDATE_CURRENT);\r\n\r\n        Uri defaultSoundUri = RingtoneManager.getDefaultUri(RingtoneManager.TYPE_NOTIFICATION);\r\n        NotificationCompat.Builder notificationBuilder = new NotificationCompat.Builder(this, CodeReUse.CHANNEL_ID)\r\n                .setSmallIcon(R.drawable.ic_launcher_icon)\r\n                .setLargeIcon(BitmapFactory.decodeResource(getApplication().getResources(), R.drawable.ic_launcher_icon))\r\n                .setContentTitle(title)\r\n                .setStyle(new NotificationCompat.BigTextStyle().bigText(msg))\r\n                .setContentText(msg)\r\n                .setAutoCancel(false)\r\n                .setCategory(NotificationCompat.CATEGORY_NAVIGATION)\r\n                .setPriority(Notification.PRIORITY_MAX)\r\n                .setSound(defaultSoundUri)\r\n                .setDeleteIntent(createOnDismissedIntent(this))\r\n                .setContentIntent(pendingIntent);\r\n\r\n\r\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\r\n            notificationBuilder.setSmallIcon(R.drawable.ic_launcher_icon);\r\n            notificationBuilder.setColor(getResources().getColor(R.color.colorPrimary));\r\n        } else {\r\n            notificationBuilder.setSmallIcon(R.drawable.ic_launcher_icon);\r\n        }\r\n\r\n        NotificationManager notificationManager = (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE);\r\n\r\n        notificationManager.notify(0, notificationBuilder.build());\r\n\r\n    }\r\n    private PendingIntent createOnDismissedIntent(Context context) {\r\n        Intent intent = new Intent(context, NotificationDismissedReceiver.class);\r\n        intent.putExtra(\"notificationId\", 108);\r\n        PendingIntent pendingIntent =\r\n                PendingIntent.getBroadcast(this,\r\n                        108, intent, 0);\r\n        return pendingIntent;\r\n    }\r\n\r\n}\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/app/brandmania/Connection/MyFirebaseMessagingService.java	(revision 682996fc78d02501c806f13b3cf85bd02b6efbf0)
+++ app/src/main/java/com/app/brandmania/Connection/MyFirebaseMessagingService.java	(date 1607935638202)
@@ -79,9 +79,7 @@
 
     private void shownotification(String title, String msg, String message) {
 
-
         if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
-
             NotificationManager mNotificationManager =
                     (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE);
             int importance = NotificationManager.IMPORTANCE_HIGH;
@@ -90,7 +88,6 @@
             mChannel.enableLights(true);
             mChannel.setLightColor(Color.RED);
             mChannel.enableVibration(true);
-            //mChannel.setSound(soundUri, audioAttributes);
             mChannel.setVibrationPattern(new long[]{100, 200, 300, 400, 500, 400, 300, 200, 400});
             mNotificationManager.createNotificationChannel(mChannel);
         }
@@ -98,16 +95,15 @@
         Intent intent = new Intent(this, HomeActivity.class);;
         if (copiedMessage.equalsIgnoreCase("addBrand")) {
             intent = new Intent(this, ViewBrandActivity.class);
-
         } else if (copiedMessage.equalsIgnoreCase("addFrame")) {
             intent = new Intent(this, ViewBrandActivity.class);
         }
         else {
-        intent = new Intent(this, HomeActivity.class);
+            intent = new Intent(this, HomeActivity.class);
         }
         intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
+
         PendingIntent pendingIntent = PendingIntent.getActivity(this, 0, intent, PendingIntent.FLAG_UPDATE_CURRENT);
-
         Uri defaultSoundUri = RingtoneManager.getDefaultUri(RingtoneManager.TYPE_NOTIFICATION);
         NotificationCompat.Builder notificationBuilder = new NotificationCompat.Builder(this, CodeReUse.CHANNEL_ID)
                 .setSmallIcon(R.drawable.ic_launcher_icon)
@@ -131,16 +127,13 @@
         }
 
         NotificationManager notificationManager = (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE);
-
         notificationManager.notify(0, notificationBuilder.build());
-
     }
+
     private PendingIntent createOnDismissedIntent(Context context) {
         Intent intent = new Intent(context, NotificationDismissedReceiver.class);
         intent.putExtra("notificationId", 108);
-        PendingIntent pendingIntent =
-                PendingIntent.getBroadcast(this,
-                        108, intent, 0);
+        PendingIntent pendingIntent = PendingIntent.getBroadcast(this,108, intent, 0);
         return pendingIntent;
     }
 
