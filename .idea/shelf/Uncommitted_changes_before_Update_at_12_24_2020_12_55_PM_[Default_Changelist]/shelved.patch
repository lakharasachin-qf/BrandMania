Index: app/src/main/AndroidManifest.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    xmlns:tools=\"http://schemas.android.com/tools\"\r\n    package=\"com.app.brandmania\">\r\n\r\n    <uses-permission android:name=\"android.permission.INTERNET\" />\r\n    <uses-permission android:name=\"android.permission.CALL_PHONE\" />\r\n    <uses-permission android:name=\"android.permission.READ_PHONE_STATE\" />\r\n    <uses-permission android:name=\"android.permission.ACCESS_WIFI_STATE\" />\r\n    <uses-permission android:name=\"android.permission.ACCESS_NETWORK_STATE\" />\r\n    <uses-permission android:name=\"android.permission.ACCESS_COARSE_LOCATION\" />\r\n    <uses-permission android:name=\"android.permission.ACCESS_FINE_LOCATION\" />\r\n    <uses-permission android:name=\"android.permission.CAMERA\" />\r\n    <uses-permission android:name=\"android.permission.CAMERA\" />\r\n    <uses-permission android:name=\"android.permission.CALL_PHONE\" />\r\n    <uses-permission android:name=\"android.permission.INTERNET\" />\r\n    <uses-permission android:name=\"android.permission.ACCESS_WIFI_STATE\" />\r\n    <uses-permission android:name=\"android.permission.ACCESS_NETWORK_STATE\" />\r\n    <uses-permission\r\n        android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\"\r\n        tools:ignore=\"ScopedStorage\" />\r\n    <uses-permission android:name=\"android.permission.READ_EXTERNAL_STORAGE\" />\r\n\r\n    <application\r\n        android:name=\".Common.MakeMyBrandApp\"\r\n        android:icon=\"@mipmap/ic_launcher\"\r\n        android:label=\"@string/app_name\"\r\n        android:networkSecurityConfig=\"@xml/network_security_config\"\r\n        android:requestLegacyExternalStorage=\"true\"\r\n        android:roundIcon=\"@mipmap/ic_launcher_round\"\r\n        android:supportsRtl=\"true\"\r\n        android:theme=\"@style/AppTheme\"\r\n        android:usesCleartextTraffic=\"true\"\r\n        tools:targetApi=\"n\">\r\n        <activity android:name=\".Activity.CustomViewAllActivit\"></activity>\r\n        <activity android:name=\".Activity.RazorPayActivity\" />\r\n        <activity android:name=\".Activity.ViewNotificationActivity\" />\r\n        <activity android:name=\".Activity.PackageActivity\" />\r\n        <activity android:name=\".Activity.ViewAllFavouritActivity\" />\r\n        <activity android:name=\".Activity.VIewAllDownloadImage\" />\r\n        <activity android:name=\".Activity.AddBrandMultipleActivity\" />\r\n        <activity android:name=\".Activity.AboutUsActivity\" />\r\n        <activity android:name=\".Activity.AddReportAndBug\" />\r\n        <activity android:name=\".Activity.FaqActivity\" />\r\n        <activity android:name=\".Activity.OnlyTextEditorActivity\" />\r\n        <activity\r\n            android:name=\".Activity.ColorAndTextEditActivity\"\r\n            android:windowSoftInputMode=\"adjustResize\" />\r\n        <activity android:name=\".TextAndImageEditActivity\" />\r\n        <activity android:name=\".TextandImageEdit\" />\r\n        <activity android:name=\".Activity.EditPicActivity\" />\r\n        <activity android:name=\".Activity.SubscriptionActivity\" />\r\n        <activity android:name=\".Activity.HelpAndSupport\" />\r\n        <activity android:name=\".Activity.PartnerProgramActivity\" />\r\n        <activity android:name=\".Activity.ViewBrandActivity\" />\r\n        <activity android:name=\".Activity.AddBranddActivity\" />\r\n        <activity android:name=\".Activity.UpdateBandList\" />\r\n        <activity android:name=\".Activity.RegistrationActivity\" />\r\n        <activity android:name=\".Activity.OtpScreenActivity\" />\r\n        <activity\r\n            android:name=\".Activity.LoginActivity\"\r\n            android:theme=\"@style/AppTheme_material_theme\" />\r\n        <activity android:name=\".Activity.ViewAllImage\" />\r\n        <activity android:name=\".Activity.HomeActivity\" />\r\n        <activity android:name=\".Activity.SpleshActivity\">\r\n            <intent-filter>\r\n                <action android:name=\"android.intent.action.MAIN\" />\r\n\r\n                <category android:name=\"android.intent.category.LAUNCHER\" />\r\n            </intent-filter>\r\n        </activity>\r\n        <activity\r\n            android:name=\"com.yalantis.ucrop.UCropActivity\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:theme=\"@style/Theme.AppCompat.Light.NoActionBar\" />\r\n\r\n        <service\r\n            android:name=\".Connection.MyFirebaseMessagingService\"\r\n            android:stopWithTask=\"false\">\r\n            <intent-filter>\r\n                <action android:name=\"com.google.firebase.MESSAGING_EVENT\" />\r\n            </intent-filter>\r\n        </service>\r\n\r\n        <provider\r\n            android:name=\"androidx.core.content.FileProvider\"\r\n            android:authorities=\"${applicationId}.fileProvider\"\r\n            android:exported=\"false\"\r\n            android:grantUriPermissions=\"true\">\r\n            <meta-data\r\n                android:name=\"android.support.FILE_PROVIDER_PATHS\"\r\n                android:resource=\"@xml/file_paths\" />\r\n        </provider>\r\n        <provider\r\n            android:name=\"androidx.core.content.FileProvider\"\r\n            android:authorities=\"com.app.brandmania.fileProvider\"\r\n            android:exported=\"false\"\r\n            android:grantUriPermissions=\"true\">\r\n            <meta-data\r\n                android:name=\"android.support.FILE_PROVIDER_PATHS\"\r\n                android:resource=\"@xml/file_paths\" />\r\n        </provider>\r\n        <!--\r\n  <meta-data\r\n            android:name=\"com.razorpay.ApiKey\"\r\n            android:value=\"rzp_live_Sq3SAdZBt9Vec4\" />\r\n        -->\r\n        <meta-data\r\n            android:name=\"com.razorpay.ApiKey\"\r\n            android:value=\"rzp_test_g34adOBwCItfce\" />\r\n\r\n        <activity\r\n            android:name=\"com.theartofdev.edmodo.cropper.CropImageActivity\"\r\n            android:theme=\"@style/Theme.AppCompat.Light.DarkActionBar\" />\r\n    </application>\r\n\r\n</manifest>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/AndroidManifest.xml	(revision 57476ccbe6f1674fbe1741056a8afeaf3850191e)
+++ app/src/main/AndroidManifest.xml	(date 1608713984960)
@@ -101,9 +101,9 @@
                 android:resource="@xml/file_paths" />
         </provider>
         <!--
-  <meta-data
-            android:name="com.razorpay.ApiKey"
-            android:value="rzp_live_Sq3SAdZBt9Vec4" />
+          <meta-data
+                    android:name="com.razorpay.ApiKey"
+                    android:value="rzp_live_Sq3SAdZBt9Vec4" />
         -->
         <meta-data
             android:name="com.razorpay.ApiKey"
Index: app/build.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>apply plugin: 'com.android.application'\r\napply plugin: 'com.google.gms.google-services'  // Google Services plugin\r\n\r\nandroid {\r\n    compileSdkVersion 30\r\n    buildToolsVersion \"30.0.2\"\r\n\r\n    defaultConfig {\r\n        applicationId \"com.make.mybrand\"\r\n        minSdkVersion 21\r\n        targetSdkVersion 30\r\n        versionCode 4\r\n        versionName \"1.0\"\r\n\r\n        testInstrumentationRunner \"androidx.test.runner.AndroidJUnitRunner\"\r\n    }\r\n\r\n    buildTypes {\r\n        release {\r\n            minifyEnabled false\r\n            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'\r\n        }\r\n    }\r\n\r\n    compileOptions {\r\n        sourceCompatibility JavaVersion.VERSION_1_8\r\n        targetCompatibility JavaVersion.VERSION_1_8\r\n    }\r\n\r\n    useLibrary 'org.apache.http.legacy'\r\n    buildFeatures {\r\n        dataBinding true\r\n    }\r\n\r\n    allprojects {\r\n        repositories {\r\n            jcenter()\r\n            maven { url \"https://jitpack.io\" }\r\n        }\r\n    }\r\n}\r\n\r\ndependencies {\r\n    implementation fileTree(dir: \"libs\", include: [\"*.jar\"])\r\n    implementation 'androidx.appcompat:appcompat:1.2.0'\r\n    implementation 'androidx.constraintlayout:constraintlayout:2.0.1'\r\n    testImplementation 'junit:junit:4.12'\r\n    androidTestImplementation 'androidx.test.ext:junit:1.1.2'\r\n    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'\r\n    implementation 'com.intuit.sdp:sdp-android:1.0.6'\r\n    //noinspection GradleCompatible\r\n    implementation 'com.android.support:design:28.0.0'\r\n    implementation 'androidx.recyclerview:recyclerview:1.0.0'\r\n    // dependencies for legacy-support\r\n    implementation 'androidx.legacy:legacy-support-v4:1.0.0'\r\n\r\n    // dependencies for multidex\r\n    implementation 'androidx.multidex:multidex:2.0.1'\r\n    // dependencies for android material\r\n    implementation 'com.google.android.material:material:1.2.1'\r\n\r\n\r\n    // dependencies for facebook shimmer\r\n    implementation 'com.facebook.shimmer:shimmer:0.5.0@aar'\r\n\r\n    // dependencies for volley\r\n    implementation 'com.android.volley:volley:1.1.1'\r\n    //noinspection GradleCompatible\r\n    implementation 'com.android.support:design:28.0.0'\r\n    // dependency file for sdp\r\n    implementation 'com.intuit.sdp:sdp-android:1.0.6'\r\n    //firebaseInstaceId\r\n    implementation 'com.google.firebase:firebase-analytics:17.5.0'\r\n    implementation 'com.google.firebase:firebase-messaging:20.2.4'\r\n    implementation 'com.google.firebase:firebase-core:17.5.0'\r\n    // dependency file for gson\r\n    implementation 'com.google.code.gson:gson:2.8.6'\r\n    // dependency file for permission\r\n    implementation 'com.squareup.okhttp:okhttp:2.5.0'\r\n    implementation 'com.karumi:dexter:6.0.1'\r\n    implementation 'com.amitshekhar.android:android-networking:1.0.2'\r\n    implementation 'com.google.android.material:material:1.1.0'\r\n    //viewpager material dots\r\n    implementation 'com.tbuonomo.andrui:viewpagerdotsindicator:4.1.2'\r\n    //noinspection GradleCompatible\r\n    implementation 'com.android.support:appcompat-v7:26.0.0-alpha1'\r\n    implementation 'com.android.volley:volley:1.1.0'\r\n    implementation 'com.github.bumptech.glide:glide:3.7.0'\r\n    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'\r\n    implementation 'com.google.android.material:material:1.0.0'\r\n    implementation 'ja.burhanrashid52:photoeditor:1.0.0'\r\n    //implementation project(':photoeditor')\r\n    implementation 'androidx.cardview:cardview:1.0.0'\r\n    testImplementation 'junit:junit:4.12'\r\n\r\n    androidTestImplementation 'androidx.test:runner:1.2.0'\r\n    androidTestImplementation 'androidx.test:rules:1.2.0'\r\n    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'\r\n    androidTestImplementation 'androidx.test.espresso:espresso-contrib:3.2.0'\r\n    //noinspection GradleCompatible\r\n    implementation 'com.android.support:recyclerview-v7:28.0.0'\r\n    implementation 'com.github.clans:fab:1.6.4'\r\n    implementation 'com.github.yalantis:ucrop:2.2.5-native'\r\n    implementation 'com.tbuonomo.andrui:viewpagerdotsindicator:2.0.3'\r\n    //dependency for image cropping\r\n    api 'com.theartofdev.edmodo:android-image-cropper:2.8.0'\r\n    implementation 'com.github.yalantis:ucrop:2.2.5'\r\n    // dependencies for glide\r\n\r\n    implementation 'com.github.bumptech.glide:glide:4.11.0'\r\n    annotationProcessor 'com.github.bumptech.glide:compiler:4.11.0'\r\n    implementation 'com.google.android.play:core:1.8.3'\r\n    //dependency for image view\r\n    implementation 'com.github.chrisbanes:PhotoView:2.1.3'\r\n\r\n    implementation 'com.github.hotchemi:android-rate:1.0.1'\r\n    implementation 'com.github.Angtrim:Android-Five-Stars-Library:v3.1'\r\n    implementation 'androidx.viewpager2:viewpager2:1.0.0'\r\n    implementation 'com.makeramen:roundedimageview:2.3.0'\r\n    implementation 'com.inkapplications.viewpageindicator:library:2.4.3'\r\n    implementation 'me.relex:circleindicator:2.1.4'\r\n    implementation 'com.razorpay:checkout:1.5.16'\r\n    implementation 'com.github.mreram:showcaseview:1.1'\r\n    implementation 'com.getkeepsafe.taptargetview:taptargetview:1.13.0'\r\n\r\n    implementation ('cn.trinea.android.view.autoscrollviewpager:android-auto-scroll-view-pager:1.1.2')\r\n            {\r\n                exclude module:'support-v4'\r\n            }\r\n    implementation 'com.theartofdev.edmodo:android-image-cropper:2.3.7'\r\n    implementation 'com.github.vihtarb:tooltip:0.1.9'\r\n\r\n    implementation \"com.github.skydoves:balloon:1.2.7\"\r\n\r\n//color picker\r\n    implementation 'com.jaredrummler:colorpicker:1.1.0'\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/build.gradle	(revision 57476ccbe6f1674fbe1741056a8afeaf3850191e)
+++ app/build.gradle	(date 1608713894230)
@@ -135,4 +135,5 @@
 //color picker
     implementation 'com.jaredrummler:colorpicker:1.1.0'
 
+
 }
\ No newline at end of file
Index: app/src/main/java/com/app/brandmania/Fragment/top/ColorTab.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.app.brandmania.Fragment.top;\r\n\r\nimport android.app.Activity;\r\nimport android.os.Bundle;\r\nimport android.util.Log;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\n\r\nimport androidx.core.content.ContextCompat;\r\nimport androidx.databinding.DataBindingUtil;\r\nimport androidx.fragment.app.Fragment;\r\nimport androidx.recyclerview.widget.GridLayoutManager;\r\n\r\nimport com.app.brandmania.Adapter.ColorPickerAdapter;\r\nimport com.app.brandmania.Adapter.OnlyTextColorPickerAddaptor;\r\nimport com.app.brandmania.Interface.IColorChange;\r\nimport com.app.brandmania.Interface.ITextColorChangeEvent;\r\nimport com.app.brandmania.R;\r\nimport com.app.brandmania.databinding.ColorTabBinding;\r\nimport com.app.brandmania.databinding.FragmentCustomBinding;\r\nimport com.jaredrummler.android.colorpicker.ColorPickerDialog;\r\nimport com.jaredrummler.android.colorpicker.ColorPickerView;\r\n\r\nimport java.util.Objects;\r\n\r\npublic class ColorTab extends Fragment implements ColorPickerView.OnColorChangedListener {\r\n    Activity act;\r\n    private ColorTabBinding binding;\r\n    private int mColorCode;\r\n    private ColorTab context;\r\n    @Override\r\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\r\n                             Bundle savedInstanceState) {\r\n        act = getActivity();\r\n        context=this;\r\n        binding= DataBindingUtil.inflate(inflater,R.layout.color_tab,container,false);\r\n        binding.colorRecycler.setLayoutManager(new GridLayoutManager(getActivity(),6));\r\n        binding.colorRecycler.setHasFixedSize(true);\r\n        OnlyTextColorPickerAddaptor colorPickerAdapter = new OnlyTextColorPickerAddaptor(getActivity());\r\n        colorPickerAdapter.setColorTab(context);\r\n        colorPickerAdapter.setOnColorPickerClickListener(colorCode -> mColorCode = colorCode);\r\n        binding.colorRecycler.setAdapter(colorPickerAdapter);\r\n\r\n        binding.chooseColorTxt.setOnClickListener(v -> ColorPickerDialog.newBuilder().setColor(ContextCompat.getColor(act,R.color.black)).show(Objects.requireNonNull(getActivity())));\r\n\r\n        binding.colorPickerView.setOnColorChangedListener(this);\r\n        binding.colorPickerView.setOnColorChangedListener(this);\r\n        binding.colorPickerView.setColor(ContextCompat.getColor(act,R.color.black), true);\r\n\r\n        return binding.getRoot();\r\n    }\r\n\r\n\r\n    @Override\r\n    public void onColorChanged(int newColor) {\r\n        Log.e(\"OnColorChoose\",String.valueOf(newColor));\r\n        ((IColorChange)act).onChooseColor(newColor);\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/app/brandmania/Fragment/top/ColorTab.java	(revision 57476ccbe6f1674fbe1741056a8afeaf3850191e)
+++ app/src/main/java/com/app/brandmania/Fragment/top/ColorTab.java	(date 1608714551347)
@@ -46,7 +46,7 @@
 
         binding.colorPickerView.setOnColorChangedListener(this);
         binding.colorPickerView.setOnColorChangedListener(this);
-        binding.colorPickerView.setColor(ContextCompat.getColor(act,R.color.black), true);
+       // binding.colorPickerView.setColor(ContextCompat.getColor(act,R.color.black), true);
 
         return binding.getRoot();
     }
Index: app/src/main/java/com/app/brandmania/Activity/OnlyTextEditorActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.app.brandmania.Activity;\r\n\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.databinding.DataBindingUtil;\r\n\r\nimport android.app.Activity;\r\nimport android.content.res.ColorStateList;\r\nimport android.graphics.Color;\r\nimport android.graphics.Paint;\r\nimport android.graphics.Typeface;\r\nimport android.os.Bundle;\r\nimport android.view.View;\r\nimport android.view.WindowManager;\r\nimport android.widget.TextView;\r\nimport android.widget.Toast;\r\n\r\nimport com.app.brandmania.Adapter.NewEditTabAdapter;\r\nimport com.app.brandmania.Interface.IColorChange;\r\nimport com.google.android.material.tabs.TabLayout;\r\nimport com.app.brandmania.Adapter.FrameInterFace;\r\nimport com.app.brandmania.Adapter.ItemeInterFace;\r\nimport com.app.brandmania.Adapter.MultiListItem;\r\n\r\nimport com.app.brandmania.Interface.IItaliTextEvent;\r\nimport com.app.brandmania.Interface.ITextBoldEvent;\r\nimport com.app.brandmania.Interface.ITextColorChangeEvent;\r\nimport com.app.brandmania.Interface.IUnderLineTextEvent;\r\nimport com.app.brandmania.R;\r\nimport com.app.brandmania.Utils.IFontChangeEvent;\r\nimport com.app.brandmania.databinding.ActivityOnlyTextEditorBinding;\r\nimport com.jaredrummler.android.colorpicker.ColorPickerDialogListener;\r\nimport com.jaredrummler.android.colorpicker.ColorPickerView;\r\n\r\n\r\nimport static com.app.brandmania.Utils.Utility.Log;\r\n\r\npublic class OnlyTextEditorActivity extends AppCompatActivity implements ItemeInterFace, FrameInterFace, ITextColorChangeEvent, IFontChangeEvent, ITextBoldEvent, IItaliTextEvent, IUnderLineTextEvent, IColorChange, ColorPickerDialogListener, ColorPickerView.OnColorChangedListener {\r\n    Activity act;\r\n    TextView selectedForEdit;\r\n    View selectedForBackgroundChange;\r\n    int editorFragment;\r\n    int FramePrimaryOrSecondary=0;\r\n    private ActivityOnlyTextEditorBinding binding;\r\n    @Override protected void onCreate(Bundle savedInstanceState) {\r\n        setTheme(R.style.AppTheme_material_theme);\r\n        super.onCreate(savedInstanceState);\r\n        act=this;\r\n        getWindow().setFlags(WindowManager.LayoutParams.FLAG_SECURE, WindowManager.LayoutParams.FLAG_SECURE);\r\n        binding= DataBindingUtil.setContentView(act,R.layout.activity_only_text_editor);\r\n        binding.tabLayout.addTab(binding.tabLayout.newTab().setText(convertFirstUpper(\"Background\")));\r\n        binding.tabLayout.addTab(binding.tabLayout.newTab().setText(\"Frame\"));\r\n        binding.tabLayout.addTab(binding.tabLayout.newTab().setText(convertFirstUpper(\"Texture\")));\r\n        binding.tabLayout.addTab(binding.tabLayout.newTab().setText(convertFirstUpper(\"Text\")));\r\n        binding.tabLayout.setTabTextColors(Color.parseColor(\"#727272\"), Color.parseColor(\"#ad2753\"));\r\n        binding.tabLayout.setTabGravity(TabLayout.GRAVITY_FILL);\r\n        final NewEditTabAdapter adapter = new NewEditTabAdapter(act, getSupportFragmentManager(), binding.tabLayout.getTabCount());\r\n        binding.viewPager.setAdapter(adapter);\r\n        binding.viewPager.addOnPageChangeListener(new TabLayout.TabLayoutOnPageChangeListener(binding.tabLayout));\r\n        binding.textEdit.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                binding.clorframeLayout.setVisibility(View.VISIBLE);\r\n                binding.viewPager.setCurrentItem(3);\r\n            }\r\n        });\r\n\r\n\r\n        binding.tabLayout.addOnTabSelectedListener(new TabLayout.OnTabSelectedListener() {\r\n            @Override\r\n            public void onTabSelected(TabLayout.Tab tab) {\r\n                binding.viewPager.setCurrentItem(tab.getPosition());\r\n                editorFragment=tab.getPosition();\r\n\r\n                //  handler(editorFragment);\r\n            }\r\n\r\n            @Override\r\n            public void onTabUnselected(TabLayout.Tab tab) {\r\n            }\r\n\r\n            @Override\r\n            public void onTabReselected(TabLayout.Tab tab) {\r\n            }\r\n        });\r\n\r\n        binding.main.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                if (binding.clorframeLayout.getVisibility()==View.GONE)\r\n                {\r\n                    binding.clorframeLayout.setVisibility(View.VISIBLE);\r\n                    binding.textClick.setVisibility(View.GONE);\r\n                }\r\n\r\n            }\r\n        });\r\n\r\n\r\n\r\n        binding.textEdit.setOnFocusChangeListener(new View.OnFocusChangeListener() {\r\n            @Override\r\n            public void onFocusChange(View view, boolean b) {\r\n                if (b==true)\r\n                {\r\n                    selectedForEdit=binding.textEdit;\r\n                    binding.viewPager.setCurrentItem(3);\r\n                    editorFragment=3;\r\n                }\r\n            }\r\n        });\r\n        binding.backImage.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                FramePrimaryOrSecondary=0;\r\n                selectedForBackgroundChange=binding.backImage;\r\n                binding.viewPager.setCurrentItem(0);\r\n            }\r\n        });\r\n//        binding.customFrameWebsite.setOnFocusChangeListener(new View.OnFocusChangeListener() {\r\n//            @Override\r\n//            public void onFocusChange(View view, boolean b) {\r\n//                if (b==true)\r\n//                {\r\n//                    selectedForEdit=binding.customFrameWebsite;\r\n//                    binding.viewPager.setCurrentItem(2);\r\n//                    editorFragment=2;\r\n//                }\r\n//            }\r\n//        });\r\n//        binding.bottomBarView1.setOnClickListener(new View.OnClickListener() {\r\n//            @Override\r\n//            public void onClick(View view) {\r\n//                FramePrimaryOrSecondary=0;\r\n//                selectedForBackgroundChange=binding.bottomBarView1;\r\n//                binding.customAddressEdit1.clearFocus();\r\n//                binding.customeContactEdit1.clearFocus();\r\n//                binding.customFrameWebsite.clearFocus();\r\n//                binding.viewPager.setCurrentItem(1);\r\n//            }\r\n//        });\r\n//        binding.bottomBarView2.setOnClickListener(new View.OnClickListener() {\r\n//            @Override\r\n//            public void onClick(View view) {\r\n//                FramePrimaryOrSecondary=1;\r\n//                selectedForBackgroundChange=binding.bottomBarView2;\r\n//                binding.customAddressEdit1.clearFocus();\r\n//                binding.customeContactEdit1.clearFocus();\r\n//                binding.customFrameWebsite.clearFocus();\r\n//                binding.viewPager.setCurrentItem(1);\r\n//            }\r\n//        });\r\n//        binding.bottomBarView3.setOnClickListener(new View.OnClickListener() {\r\n//            @Override\r\n//            public void onClick(View view) {\r\n//                FramePrimaryOrSecondary=0;\r\n//                selectedForBackgroundChange=binding.bottomBarView1;\r\n//                binding.customAddressEdit1.clearFocus();\r\n//                binding.customeContactEdit1.clearFocus();\r\n//                binding.customFrameWebsite.clearFocus();\r\n//                binding.viewPager.setCurrentItem(1);\r\n//            }\r\n//        });\r\n    }\r\n    public static String convertFirstUpper(String str) {\r\n\r\n        if (str == null || str.isEmpty()) {\r\n            return str;\r\n        }\r\n        Log(\"FirstLetter\", str.substring(0, 1) + \"    \" + str.substring(1));\r\n        return str.substring(0, 1).toUpperCase() + str.substring(1);\r\n    }\r\n    @Override public void onItemSelection(int position, MultiListItem listModel) {\r\n        binding.frameImage.setImageResource(listModel.getImage());\r\n    }\r\n    @Override public void onFrameItemSelection(int position, MultiListItem listModel) {\r\n        binding.frameImage.setImageResource(listModel.getImage());\r\n    }\r\n    @Override public void onColorItemChange(int colorcode) {\r\n        binding.textEdit.setTextColor(colorcode);\r\n    }\r\n    @Override public void onFontChangeListenert(String Font) {\r\n        Typeface custom_font = Typeface.createFromAsset(act.getAssets(), Font);\r\n        binding.textEdit.setTypeface(custom_font);\r\n    }\r\n    @Override public void onBoldTextChange(boolean Bold) {\r\n        if (Bold) {\r\n          //  Toast.makeText(act,\"true\",Toast.LENGTH_SHORT).show();\r\n            binding.textEdit.setTypeface(  binding.textEdit.getTypeface(), Typeface.BOLD);\r\n\r\n        }else {\r\n          //  Toast.makeText(act,\"false\",Toast.LENGTH_SHORT).show();\r\n            binding.textEdit.setTypeface(null, Typeface.NORMAL);\r\n\r\n        }\r\n\r\n    }\r\n    @Override public void onItalicTextChange(boolean Italic) {\r\n        if (Italic) {\r\n            //Toast.makeText(act,\"true\",Toast.LENGTH_SHORT).show();\r\n            binding.textEdit.setTypeface(  binding.textEdit.getTypeface(), Typeface.ITALIC);\r\n\r\n        }else {\r\n           // Toast.makeText(act,\"false\",Toast.LENGTH_SHORT).show();\r\n            binding.textEdit.setTypeface(null, Typeface.NORMAL);\r\n\r\n        }\r\n    }\r\n    @Override public void onUnderLineItalic(boolean Left) {\r\n        if (Left) {\r\n          //  Toast.makeText(act,\"true\",Toast.LENGTH_SHORT).show();\r\n            binding.textEdit.setPaintFlags( binding.textEdit.getPaintFlags() | Paint.UNDERLINE_TEXT_FLAG);\r\n        }\r\n        else\r\n        {\r\n           // Toast.makeText(act,\"false\",Toast.LENGTH_SHORT).show();\r\n          //  .setTypeface(null, Typeface.NORMAL);\r\n            binding.textEdit.setPaintFlags(0);\r\n        }\r\n    }\r\n    @Override\r\n    public void onChooseColor(int colorCode) {\r\n        if (editorFragment==3 && selectedForEdit!=null) {\r\n            selectedForEdit.setTextColor(colorCode);\r\n        }\r\n        if (editorFragment==0 && selectedForBackgroundChange!=null){\r\n            if (FramePrimaryOrSecondary==0){\r\n                binding.backImage.setBackgroundColor(colorCode);\r\n            }\r\n            selectedForBackgroundChange.setBackgroundColor(colorCode);\r\n        }\r\n    }\r\n\r\n\r\n    @Override\r\n    public void onColorChanged(int colorCode) {\r\n        if (editorFragment==3 && selectedForEdit!=null) {\r\n            selectedForEdit.setTextColor(colorCode);\r\n        }\r\n        if (editorFragment==0 && selectedForBackgroundChange!=null){\r\n            if (FramePrimaryOrSecondary==0){\r\n                binding.backImage.setBackgroundColor(colorCode);\r\n            }\r\n            selectedForBackgroundChange.setBackgroundColor(colorCode);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void onColorSelected(int dialogId, int colorCode) {\r\n        if (editorFragment==3 && selectedForEdit!=null) {\r\n            selectedForEdit.setTextColor(colorCode);\r\n        }\r\n        if (editorFragment==0 && selectedForBackgroundChange!=null){\r\n            if (FramePrimaryOrSecondary==0){\r\n                binding.backImage.setBackgroundColor(colorCode);\r\n            }\r\n            selectedForBackgroundChange.setBackgroundColor(colorCode);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void onDialogDismissed(int dialogId) {\r\n\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/app/brandmania/Activity/OnlyTextEditorActivity.java	(revision 57476ccbe6f1674fbe1741056a8afeaf3850191e)
+++ app/src/main/java/com/app/brandmania/Activity/OnlyTextEditorActivity.java	(date 1608714832655)
@@ -70,8 +70,6 @@
             public void onTabSelected(TabLayout.Tab tab) {
                 binding.viewPager.setCurrentItem(tab.getPosition());
                 editorFragment=tab.getPosition();
-
-                //  handler(editorFragment);
             }
 
             @Override
@@ -80,6 +78,7 @@
 
             @Override
             public void onTabReselected(TabLayout.Tab tab) {
+
             }
         });
 
@@ -116,50 +115,7 @@
                 binding.viewPager.setCurrentItem(0);
             }
         });
-//        binding.customFrameWebsite.setOnFocusChangeListener(new View.OnFocusChangeListener() {
-//            @Override
-//            public void onFocusChange(View view, boolean b) {
-//                if (b==true)
-//                {
-//                    selectedForEdit=binding.customFrameWebsite;
-//                    binding.viewPager.setCurrentItem(2);
-//                    editorFragment=2;
-//                }
-//            }
-//        });
-//        binding.bottomBarView1.setOnClickListener(new View.OnClickListener() {
-//            @Override
-//            public void onClick(View view) {
-//                FramePrimaryOrSecondary=0;
-//                selectedForBackgroundChange=binding.bottomBarView1;
-//                binding.customAddressEdit1.clearFocus();
-//                binding.customeContactEdit1.clearFocus();
-//                binding.customFrameWebsite.clearFocus();
-//                binding.viewPager.setCurrentItem(1);
-//            }
-//        });
-//        binding.bottomBarView2.setOnClickListener(new View.OnClickListener() {
-//            @Override
-//            public void onClick(View view) {
-//                FramePrimaryOrSecondary=1;
-//                selectedForBackgroundChange=binding.bottomBarView2;
-//                binding.customAddressEdit1.clearFocus();
-//                binding.customeContactEdit1.clearFocus();
-//                binding.customFrameWebsite.clearFocus();
-//                binding.viewPager.setCurrentItem(1);
-//            }
-//        });
-//        binding.bottomBarView3.setOnClickListener(new View.OnClickListener() {
-//            @Override
-//            public void onClick(View view) {
-//                FramePrimaryOrSecondary=0;
-//                selectedForBackgroundChange=binding.bottomBarView1;
-//                binding.customAddressEdit1.clearFocus();
-//                binding.customeContactEdit1.clearFocus();
-//                binding.customFrameWebsite.clearFocus();
-//                binding.viewPager.setCurrentItem(1);
-//            }
-//        });
+
     }
     public static String convertFirstUpper(String str) {
 
Index: app/src/main/java/com/app/brandmania/Fragment/top/TextTab.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.app.brandmania.Fragment.top;\r\n\r\nimport android.app.Activity;\r\nimport android.os.Bundle;\r\nimport android.util.Log;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.widget.Toast;\r\n\r\nimport androidx.core.content.ContextCompat;\r\nimport androidx.databinding.DataBindingUtil;\r\nimport androidx.fragment.app.Fragment;\r\nimport androidx.recyclerview.widget.GridLayoutManager;\r\nimport androidx.recyclerview.widget.LinearLayoutManager;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport com.app.brandmania.Adapter.ColorPickerAdapter;\r\nimport com.app.brandmania.Adapter.FontListAdeptor;\r\nimport com.app.brandmania.Adapter.IImageFromGalary;\r\nimport com.app.brandmania.Adapter.OnlyTextColorPickerAddaptor;\r\nimport com.app.brandmania.Interface.IColorChange;\r\nimport com.app.brandmania.Interface.IItaliTextEvent;\r\nimport com.app.brandmania.Interface.IUnderLineTextEvent;\r\nimport com.app.brandmania.Interface.ITextBoldEvent;\r\nimport com.app.brandmania.Interface.ITextColorChangeEvent;\r\nimport com.app.brandmania.Model.FontModel;\r\nimport com.app.brandmania.R;\r\nimport com.app.brandmania.databinding.TextTabBinding;\r\nimport com.jaredrummler.android.colorpicker.ColorPickerDialog;\r\nimport com.jaredrummler.android.colorpicker.ColorPickerView;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.Objects;\r\n\r\npublic class TextTab extends Fragment implements ITextColorChangeEvent , ColorPickerView.OnColorChangedListener {\r\n    public  boolean BOLD_TEXT =false;\r\n    public  boolean ITALIC_TEXT =false;\r\n    public  boolean UNDERLINE_TEXT =false;\r\n    public static final boolean NO_BOLD_TEXT =false;\r\n    Activity act;\r\n    private TextTabBinding binding;\r\n    ArrayList<FontModel> fontModelList=new ArrayList<>();\r\n    FontModel[] fontModelObject;\r\n    String[] fontStyle;\r\n    private int mColorCode;\r\n    private TextTab context;\r\n    @Override\r\n    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\r\n        act = getActivity();\r\n        context=this;\r\n        binding = DataBindingUtil.inflate(inflater, R.layout.text_tab, container, false);\r\n\r\n\r\n        binding.cancleClick.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n\r\n                binding.colorPickerView.setVisibility(View.GONE);\r\n                binding.cancleClick.setVisibility(View.GONE);\r\n                binding.colorChose.setVisibility(View.VISIBLE);\r\n                binding.fontStyleList.setVisibility(View.VISIBLE);\r\n\r\n                binding.fontRecycler.setVisibility(View.GONE);\r\n\r\n\r\n            }\r\n        });\r\n        binding.categoryEdt.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n               // Toast.makeText(act,\"Toast\",Toast.LENGTH_LONG).show();\r\n                binding.fontRecycler.setVisibility(View.VISIBLE);\r\n                binding.fontStyleList.setVisibility(View.GONE);\r\n                binding.colorChose.setVisibility(View.GONE);\r\n                binding.cancleClick.setVisibility(View.VISIBLE);\r\n            }\r\n        });\r\n        binding.boldRelative.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                if (ITALIC_TEXT) {\r\n                    ((ITextBoldEvent) act).onBoldTextChange(false);\r\n                    binding.NormaTextChoose.setVisibility(View.VISIBLE);\r\n                    binding.BOldTextChoose.setVisibility(View.GONE);\r\n                    ITALIC_TEXT=false;\r\n\r\n\r\n                }else {\r\n                    ITALIC_TEXT=true;\r\n                    ((ITextBoldEvent) act).onBoldTextChange(true);\r\n                    binding.NormaTextChoose.setVisibility(View.GONE);\r\n                    binding.BOldTextChoose.setVisibility(View.VISIBLE);\r\n                }\r\n            }\r\n        });\r\n        binding.underLineRelativ.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n\r\n                if (UNDERLINE_TEXT) {\r\n                    ((IUnderLineTextEvent) act).onUnderLineItalic(false);\r\n                    binding.NormalUnderTextChoose.setVisibility(View.VISIBLE);\r\n                    binding.UndelLIneChoose.setVisibility(View.GONE);\r\n                    UNDERLINE_TEXT=false;\r\n                }\r\n                else {\r\n                    UNDERLINE_TEXT=true;\r\n                    ((IUnderLineTextEvent) act).onUnderLineItalic(true);\r\n                    binding.NormalUnderTextChoose.setVisibility(View.GONE);\r\n                    binding.UndelLIneChoose.setVisibility(View.VISIBLE);\r\n\r\n                }\r\n\r\n            }\r\n        });\r\n        binding.ItalicClick.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                if (BOLD_TEXT) {\r\n                    ((IItaliTextEvent) act).onItalicTextChange(false);\r\n                    binding.NormalUnderTextChoose.setVisibility(View.VISIBLE);\r\n                    binding.UndelLIneChoose.setVisibility(View.GONE);\r\n                    BOLD_TEXT=false;\r\n\r\n\r\n                }else {\r\n                    BOLD_TEXT=true;\r\n                    ((IItaliTextEvent) act).onItalicTextChange(true);\r\n                    binding.NormalItalicTextChoose.setVisibility(View.GONE);\r\n                    binding.ItalicTextChoose.setVisibility(View.VISIBLE);\r\n                }\r\n            }\r\n        });\r\n        binding.colorPickerView.setOnColorChangedListener((ColorPickerView.OnColorChangedListener) act);\r\n        binding.colorPickerView.setColor(ContextCompat.getColor(act,R.color.black), true);\r\n        binding.colorChose.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                binding.colorPickerView.setVisibility(View.VISIBLE);\r\n                binding.fontStyleList.setVisibility(View.GONE);\r\n                binding.colorChose.setVisibility(View.GONE);\r\n                binding.cancleClick.setVisibility(View.VISIBLE);\r\n\r\n\r\n\r\n\r\n\r\n            }\r\n        });\r\n        FontChanege();\r\n              return binding.getRoot();\r\n    }\r\n    @Override public void onColorItemChange(int colorcode) {\r\n\r\n        binding.colorChose.setBackgroundColor(colorcode);\r\n    }\r\n\r\n    public void FontChanege() {\r\n        fontModelList = new ArrayList<>();  //initialized list\r\n        fontModelObject=new FontModel[15];   //Array of model class\r\n        fontStyle = new String[15];  //Array of String\r\n        fontStyle[0] = \"font/inter_bold.otf\";\r\n        fontStyle[1] = \"font/inter_extrabold.otf\";\r\n        fontStyle[2] = \"font/inter_medium.otf\";\r\n        fontStyle[3] = \"font/inter_regular.otf\";\r\n        fontStyle[4] = \"font/inter_semibold.otf\";\r\n        fontStyle[5] = \"font/poppins_bold.ttf\";\r\n        fontStyle[6] = \"font/poppins_light.ttf\";\r\n        fontStyle[7] = \"font/poppins_medium.ttf\";\r\n        fontStyle[8] = \"font/poppins_regular.ttf\";\r\n        fontStyle[9] = \"font/worksans_bold.ttf\";\r\n        fontStyle[10] = \"font/worksans_extrabold.ttf\";\r\n        fontStyle[11] = \"font/worksans_light.ttf\";\r\n        fontStyle[12] = \"font/worksans_medium.ttf\";\r\n        fontStyle[13] = \"font/worksans_regular.ttf\";\r\n        fontStyle[14] = \"font/worksans_semibold.ttf\";\r\n\r\n        for (int i = 0; i < 15; i++) {\r\n            fontModelObject[i] = new FontModel();\r\n            fontModelObject[i].setFontFaimly(fontStyle[i]);\r\n            fontModelObject[i].setFontId(fontStyle[i]\r\n                    .replace(\"font/\",\"\")\r\n                    .replace(\".ttf\",\"\")\r\n                    .replace(\".otf\",\"\")\r\n                    .replace(\"_bold\",\"\")\r\n                    .replace(\"_light\",\"\")\r\n                    .replace(\"_medium\",\"\")\r\n                    .replace(\"_regular\",\"\")\r\n                    .replace(\"_extrabold\",\"\")\r\n                    .replace(\"_semibold\",\"\")\r\n                    .replace(\"_extralight\",\"\")\r\n                    .replace(\"_black\",\"\")\r\n                    .replace(\"worksans\",\"BrandMania\")\r\n                    .replace(\"inter\",\"BrandMania\")\r\n                    .replace(\"poppins\",\"BrandMania\")\r\n                    .replace(\"montserrat\",\"BrandMania\")\r\n            );\r\n            fontModelList.add(fontModelObject[i]);\r\n        }\r\n        binding.fontRecycler.setLayoutManager(new GridLayoutManager(act,3));   //set layout\r\n        binding.fontRecycler.setAdapter(new FontListAdeptor(fontModelList,act));    //set Adapter\r\n    }\r\n\r\n    @Override\r\n    public void onColorChanged(int newColor) {\r\n        Log.e(\"OnColorChoose\",String.valueOf(newColor));\r\n        ((IColorChange)act).onChooseColor(newColor);\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/app/brandmania/Fragment/top/TextTab.java	(revision 57476ccbe6f1674fbe1741056a8afeaf3850191e)
+++ app/src/main/java/com/app/brandmania/Fragment/top/TextTab.java	(date 1608714586846)
@@ -133,7 +133,7 @@
             }
         });
         binding.colorPickerView.setOnColorChangedListener((ColorPickerView.OnColorChangedListener) act);
-        binding.colorPickerView.setColor(ContextCompat.getColor(act,R.color.black), true);
+       // binding.colorPickerView.setColor(ContextCompat.getColor(act,R.color.black), true);
         binding.colorChose.setOnClickListener(new View.OnClickListener() {
             @Override
             public void onClick(View v) {
Index: .idea/gradle.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"GradleMigrationSettings\" migrationVersion=\"1\" />\r\n  <component name=\"GradleSettings\">\r\n    <option name=\"linkedExternalProjectsSettings\">\r\n      <GradleProjectSettings>\r\n        <option name=\"testRunner\" value=\"PLATFORM\" />\r\n        <option name=\"distributionType\" value=\"DEFAULT_WRAPPED\" />\r\n        <option name=\"externalProjectPath\" value=\"$PROJECT_DIR$\" />\r\n        <option name=\"gradleJvm\" value=\"1.8\" />\r\n        <option name=\"modules\">\r\n          <set>\r\n            <option value=\"$PROJECT_DIR$\" />\r\n            <option value=\"$PROJECT_DIR$/app\" />\r\n          </set>\r\n        </option>\r\n        <option name=\"resolveModulePerSourceSet\" value=\"false\" />\r\n      </GradleProjectSettings>\r\n    </option>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/gradle.xml	(revision 57476ccbe6f1674fbe1741056a8afeaf3850191e)
+++ .idea/gradle.xml	(date 1608547117697)
@@ -15,6 +15,7 @@
           </set>
         </option>
         <option name="resolveModulePerSourceSet" value="false" />
+        <option name="useQualifiedModuleNames" value="true" />
       </GradleProjectSettings>
     </option>
   </component>
diff --git .idea/shelf/Uncommitted_changes_before_Update_at_12_17_2020_5_30_PM__Default_Changelist_.xml .idea/shelf/Uncommitted_changes_before_Update_at_12_17_2020_5_30_PM__Default_Changelist_.xml
diff --git .idea/shelf/Uncommitted_changes_before_Update_at_12_19_2020_5_30_PM__Default_Changelist_.xml .idea/shelf/Uncommitted_changes_before_Update_at_12_19_2020_5_30_PM__Default_Changelist_.xml
