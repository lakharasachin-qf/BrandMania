Index: .idea/shelf/Uncommitted_changes_before_Update_at_11_22_2021_11_04_AM_[Default_Changelist]/shelved.patch
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_11_22_2021_11_04_AM_[Default_Changelist]/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Update_at_11_22_2021_11_04_AM_[Default_Changelist]/shelved.patch
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Update_at_11_22_2021_11_04_AM_[Default_Changelist]/shelved.patch	(revision 865bbcc1cfef838ea5e5617016b47f1abe467b63)
+++ /dev/null	(revision 865bbcc1cfef838ea5e5617016b47f1abe467b63)
@@ -1,19 +0,0 @@
-Index: .idea/misc.xml
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"DesignSurface\">\r\n    <option name=\"filePathToZoomLevelMap\">\r\n      <map>\r\n        <entry key=\"..\\:/_ANDROID_PROJECTS/BrandManiaUpdate/app/src/main/res/drawable/digital_card_round_rect.xml\" value=\"0.20416666666666666\" />\r\n        <entry key=\"..\\:/_ANDROID_PROJECTS/BrandManiaUpdate/app/src/main/res/drawable/digital_card_round_rect_more.xml\" value=\"0.20416666666666666\" />\r\n        <entry key=\"..\\:/_ANDROID_PROJECTS/BrandManiaUpdate/app/src/main/res/drawable/digital_card_round_rect_thin.xml\" value=\"0.20416666666666666\" />\r\n        <entry key=\"..\\:/_ANDROID_PROJECTS/BrandManiaUpdate/app/src/main/res/drawable/digital_card_round_shap.xml\" value=\"0.20416666666666666\" />\r\n        <entry key=\"..\\:/_ANDROID_PROJECTS/BrandManiaUpdate/app/src/main/res/drawable/digital_card_round_shap_icon.xml\" value=\"0.20416666666666666\" />\r\n        <entry key=\"..\\:/_ANDROID_PROJECTS/BrandManiaUpdate/app/src/main/res/drawable/digital_card_top_flat_shap.xml\" value=\"0.20416666666666666\" />\r\n        <entry key=\"..\\:/_ANDROID_PROJECTS/BrandManiaUpdate/app/src/main/res/drawable/digital_round_corner_item_one.xml\" value=\"0.20416666666666666\" />\r\n        <entry key=\"..\\:/_ANDROID_PROJECTS/BrandManiaUpdate/app/src/main/res/drawable/digital_round_corner_one.xml\" value=\"0.20416666666666666\" />\r\n        <entry key=\"..\\:/_ANDROID_PROJECTS/BrandManiaUpdate/app/src/main/res/drawable/digital_round_corner_two.xml\" value=\"0.20416666666666666\" />\r\n        <entry key=\"..\\:/_ANDROID_PROJECTS/BrandManiaUpdate/app/src/main/res/drawable/ic_outline_call_24.xml\" value=\"0.20416666666666666\" />\r\n        <entry key=\"..\\:/_ANDROID_PROJECTS/BrandManiaUpdate/app/src/main/res/drawable/ic_userrr.xml\" value=\"0.20416666666666666\" />\r\n        <entry key=\"..\\:/_ANDROID_PROJECTS/BrandManiaUpdate/app/src/main/res/drawable/item_round_corner_two.xml\" value=\"0.20416666666666666\" />\r\n        <entry key=\"..\\:/_ANDROID_PROJECTS/BrandManiaUpdate/app/src/main/res/layout/activity_pdf.xml\" value=\"0.18802083333333333\" />\r\n        <entry key=\"..\\:/_ANDROID_PROJECTS/BrandManiaUpdate/app/src/main/res/layout/dialog_digital_card_layout.xml\" value=\"0.18802083333333333\" />\r\n        <entry key=\"..\\:/_ANDROID_PROJECTS/BrandManiaUpdate/app/src/main/res/layout/fragment_colors_picker.xml\" value=\"0.18802083333333333\" />\r\n        <entry key=\"..\\:/_ANDROID_PROJECTS/BrandManiaUpdate/app/src/main/res/layout/fragment_home.xml\" value=\"0.18802083333333333\" />\r\n        <entry key=\"..\\:/_ANDROID_PROJECTS/BrandManiaUpdate/app/src/main/res/layout/item_colors_for_card_layout.xml\" value=\"0.18802083333333333\" />\r\n        <entry key=\"..\\:/_ANDROID_PROJECTS/BrandManiaUpdate/app/src/main/res/layout/item_digital_card_five.xml\" value=\"0.67\" />\r\n        <entry key=\"..\\:/_ANDROID_PROJECTS/BrandManiaUpdate/app/src/main/res/layout/item_digital_card_four.xml\" value=\"0.75\" />\r\n        <entry key=\"..\\:/_ANDROID_PROJECTS/BrandManiaUpdate/app/src/main/res/layout/item_digital_card_one.xml\" value=\"0.5\" />\r\n        <entry key=\"..\\:/_ANDROID_PROJECTS/BrandManiaUpdate/app/src/main/res/layout/item_digital_card_three.xml\" value=\"0.5\" />\r\n        <entry key=\"..\\:/_ANDROID_PROJECTS/BrandManiaUpdate/app/src/main/res/layout/item_digital_card_two.xml\" value=\"0.75\" />\r\n        <entry key=\"..\\:/_ANDROID_PROJECTS/BrandManiaUpdate/app/src/main/res/layout/layout_digital_card_fifth.xml\" value=\"0.25\" />\r\n        <entry key=\"..\\:/_ANDROID_PROJECTS/BrandManiaUpdate/app/src/main/res/layout/layout_digital_card_fourth.xml\" value=\"0.33\" />\r\n        <entry key=\"..\\:/_ANDROID_PROJECTS/BrandManiaUpdate/app/src/main/res/layout/layout_digital_card_one.xml\" value=\"0.37604166666666666\" />\r\n        <entry key=\"..\\:/_ANDROID_PROJECTS/BrandManiaUpdate/app/src/main/res/layout/layout_digital_card_three.xml\" value=\"0.22\" />\r\n        <entry key=\"..\\:/_ANDROID_PROJECTS/BrandManiaUpdate/app/src/main/res/layout/layout_digital_card_two.xml\" value=\"0.22\" />\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"ProjectRootManager\" version=\"2\" languageLevel=\"JDK_11\" default=\"true\" project-jdk-name=\"1.8\" project-jdk-type=\"JavaSDK\">\r\n    <output url=\"file://$PROJECT_DIR$/build/classes\" />\r\n  </component>\r\n  <component name=\"ProjectType\">\r\n    <option name=\"id\" value=\"Android\" />\r\n  </component>\r\n</project>
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/.idea/misc.xml b/.idea/misc.xml
---- a/.idea/misc.xml	(revision 9f70e0de3168d4ff370a5c1e7b43e7311dba92dd)
-+++ b/.idea/misc.xml	(date 1637559241968)
-@@ -15,7 +15,7 @@
-         <entry key="..\:/_ANDROID_PROJECTS/BrandManiaUpdate/app/src/main/res/drawable/ic_outline_call_24.xml" value="0.20416666666666666" />
-         <entry key="..\:/_ANDROID_PROJECTS/BrandManiaUpdate/app/src/main/res/drawable/ic_userrr.xml" value="0.20416666666666666" />
-         <entry key="..\:/_ANDROID_PROJECTS/BrandManiaUpdate/app/src/main/res/drawable/item_round_corner_two.xml" value="0.20416666666666666" />
--        <entry key="..\:/_ANDROID_PROJECTS/BrandManiaUpdate/app/src/main/res/layout/activity_pdf.xml" value="0.18802083333333333" />
-+        <entry key="..\:/_ANDROID_PROJECTS/BrandManiaUpdate/app/src/main/res/layout/activity_pdf.xml" value="0.33" />
-         <entry key="..\:/_ANDROID_PROJECTS/BrandManiaUpdate/app/src/main/res/layout/dialog_digital_card_layout.xml" value="0.18802083333333333" />
-         <entry key="..\:/_ANDROID_PROJECTS/BrandManiaUpdate/app/src/main/res/layout/fragment_colors_picker.xml" value="0.18802083333333333" />
-         <entry key="..\:/_ANDROID_PROJECTS/BrandManiaUpdate/app/src/main/res/layout/fragment_home.xml" value="0.18802083333333333" />
Index: .idea/shelf/Uncommitted_changes_before_Update_at_11_22_2021_11_04_AM__Default_Changelist_.xml
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_11_22_2021_11_04_AM__Default_Changelist_.xml b/.idea/shelf/Uncommitted_changes_before_Update_at_11_22_2021_11_04_AM__Default_Changelist_.xml
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Update_at_11_22_2021_11_04_AM__Default_Changelist_.xml	(revision 865bbcc1cfef838ea5e5617016b47f1abe467b63)
+++ /dev/null	(revision 865bbcc1cfef838ea5e5617016b47f1abe467b63)
@@ -1,4 +0,0 @@
-<changelist name="Uncommitted_changes_before_Update_at_11_22_2021_11_04_AM_[Default_Changelist]" date="1637559272874" recycled="true" deleted="true">
-  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_11_22_2021_11_04_AM_[Default_Changelist]/shelved.patch" />
-  <option name="DESCRIPTION" value="Uncommitted changes before Update at 11/22/2021 11:04 AM [Default Changelist]" />
-</changelist>
\ No newline at end of file
Index: app/src/main/java/com/app/brandmania/Activity/details/BusinessCategoryListActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.app.brandmania.Activity.details;\r\n\r\nimport android.app.Activity;\r\nimport android.os.Bundle;\r\nimport android.text.Editable;\r\nimport android.text.TextWatcher;\r\nimport android.util.Log;\r\nimport android.view.View;\r\n\r\nimport androidx.annotation.Nullable;\r\nimport androidx.databinding.DataBindingUtil;\r\nimport androidx.recyclerview.widget.GridLayoutManager;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\nimport androidx.swiperefreshlayout.widget.SwipeRefreshLayout;\r\n\r\nimport com.android.volley.AuthFailureError;\r\nimport com.android.volley.Request;\r\nimport com.android.volley.toolbox.StringRequest;\r\nimport com.app.brandmania.Adapter.BusinessCategoryAdapter;\r\nimport com.app.brandmania.Common.MySingleton;\r\nimport com.app.brandmania.Common.ResponseHandler;\r\nimport com.app.brandmania.Connection.BaseActivity;\r\nimport com.app.brandmania.Model.DashBoardItem;\r\nimport com.app.brandmania.Model.ImageList;\r\nimport com.app.brandmania.R;\r\nimport com.app.brandmania.databinding.ActivityViewBusinessCategoryBinding;\r\nimport com.app.brandmania.utils.APIs;\r\nimport com.app.brandmania.utils.CodeReUse;\r\nimport com.app.brandmania.utils.Utility;\r\n\r\nimport org.json.JSONException;\r\nimport org.json.JSONObject;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\n\r\npublic class BusinessCategoryListActivity extends BaseActivity {\r\n    Activity act;\r\n    private ActivityViewBusinessCategoryBinding binding;\r\n    private DashBoardItem apiModel;\r\n    private ArrayList<ImageList> rootList;\r\n    private ArrayList<ImageList> menuModels;\r\n\r\n    @Override\r\n    public void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setTheme(R.style.AppTheme_material_theme);\r\n        act = this;\r\n        binding = DataBindingUtil.setContentView(act, R.layout.activity_view_business_category);\r\n        binding.BackButton.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                onBackPressed();\r\n            }\r\n        });\r\n\r\n        binding.swipeContainer.setColorSchemeResources(R.color.colorPrimary, R.color.colorsecond, R.color.colorthird);\r\n        binding.swipeContainer.setOnRefreshListener(new SwipeRefreshLayout.OnRefreshListener() {\r\n            @Override\r\n            public void onRefresh() {\r\n                startAnimation();\r\n                getBusinessCategory();\r\n            }\r\n        });\r\n\r\n        startAnimation();\r\n        getBusinessCategory();\r\n\r\n        binding.searchEdt.addTextChangedListener(new TextWatcher() {\r\n            @Override\r\n            public void beforeTextChanged(CharSequence s, int start, int count, int after) {\r\n            }\r\n\r\n            @Override\r\n            public void onTextChanged(CharSequence s, int start, int before, int count) {\r\n\r\n            }\r\n\r\n            @Override\r\n            public void afterTextChanged(Editable s) {\r\n                startAnimation();\r\n                getBusinessCategory();\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n    void filterCountry(String text) {\r\n        ArrayList<ImageList> temp = new ArrayList<>();\r\n        for (ImageList d : rootList) {\r\n            if (d.getName().toLowerCase().contains(text.toLowerCase())) {\r\n                temp.add(d);\r\n            }\r\n        }\r\n        MenuAddaptor.updateList(temp);\r\n    }\r\n\r\n    BusinessCategoryAdapter MenuAddaptor;\r\n\r\n    private void setAdapter() {\r\n        MenuAddaptor = new BusinessCategoryAdapter(apiModel, this, menuModels);\r\n        RecyclerView.LayoutManager mLayoutManager = new GridLayoutManager(act, 3);\r\n        binding.recyclerList.setHasFixedSize(true);\r\n        binding.recyclerList.setLayoutManager(mLayoutManager);\r\n        binding.recyclerList.setAdapter(MenuAddaptor);\r\n    }\r\n\r\n    private void startAnimation() {\r\n        binding.shimmerViewContainer.startShimmer();\r\n        binding.shimmerViewContainer.setVisibility(View.VISIBLE);\r\n        binding.recyclerList.setVisibility(View.GONE);\r\n        binding.emptyStateLayout.setVisibility(View.GONE);\r\n    }\r\n\r\n    private void getBusinessCategory() {\r\n        binding.progressBar.setVisibility(View.GONE);\r\n        Utility.Log(\"API : \", APIs.BUSINESS_CATEGORY+\"?page=1\");\r\n        StringRequest stringRequest = new StringRequest(Request.Method.POST, APIs.BUSINESS_CATEGORY+\"?page=1\", response -> {\r\n            binding.swipeContainer.setRefreshing(false);\r\n            Utility.Log(\"response : \", response);\r\n            try {\r\n                JSONObject jsonObject = new JSONObject(response);\r\n                if (ResponseHandler.isSuccess(null,jsonObject)) {\r\n                    apiModel = ResponseHandler.handleBusinessCategory(act, jsonObject);\r\n\r\n                    if (apiModel.getDashBoardItems() != null && apiModel.getDashBoardItems().size() != 0 && apiModel.getDashBoardItems().get(0).getDailyImages() != null && apiModel.getDashBoardItems().get(0).getDailyImages().size() != 0) {\r\n                        rootList = ResponseHandler.handleBusinessCategory(act, jsonObject).getDashBoardItems().get(0).getDailyImages();\r\n                        menuModels = ResponseHandler.handleBusinessCategory(act, jsonObject).getDashBoardItems().get(0).getDailyImages();\r\n                        setAdapter();\r\n                        binding.recyclerList.setVisibility(View.VISIBLE);\r\n                        binding.emptyStateLayout.setVisibility(View.GONE);\r\n                        binding.shimmerViewContainer.stopShimmer();\r\n                        binding.shimmerViewContainer.setVisibility(View.GONE);\r\n                    } else {\r\n                        binding.recyclerList.setVisibility(View.GONE);\r\n                        binding.emptyStateLayout.setVisibility(View.VISIBLE);\r\n                        binding.emptyStateMsg.setText(\"No Data Found\");\r\n                    }\r\n\r\n                    if (apiModel.getLinks() != null) {\r\n                        if (apiModel.getLinks().getNextPageUrl() != null && !apiModel.getLinks().getNextPageUrl().equalsIgnoreCase(\"null\") && !apiModel.getLinks().getNextPageUrl().isEmpty()) {\r\n                            getImageCategoryNextPage(apiModel.getLinks().getNextPageUrl());\r\n                        } else {\r\n                            binding.shimmerViewContainer.stopShimmer();\r\n                            binding.shimmerViewContainer.setVisibility(View.GONE);\r\n                            binding.progressBar.setVisibility(View.GONE);\r\n                        }\r\n                    } else {\r\n                        binding.shimmerViewContainer.stopShimmer();\r\n                        binding.shimmerViewContainer.setVisibility(View.GONE);\r\n                        binding.progressBar.setVisibility(View.GONE);\r\n                    }\r\n                }else{\r\n                    binding.shimmerViewContainer.stopShimmer();\r\n                    binding.shimmerViewContainer.setVisibility(View.GONE);\r\n                    binding.recyclerList.setVisibility(View.GONE);\r\n                    binding.emptyStateLayout.setVisibility(View.VISIBLE);\r\n                    binding.emptyStateMsg.setText(\"No Data Found\");\r\n                    binding.progressBar.setVisibility(View.GONE);\r\n                }\r\n            } catch (JSONException e) {\r\n                e.printStackTrace();\r\n                binding.shimmerViewContainer.stopShimmer();\r\n                binding.shimmerViewContainer.setVisibility(View.GONE);\r\n                binding.recyclerList.setVisibility(View.GONE);\r\n                binding.emptyStateLayout.setVisibility(View.VISIBLE);\r\n                binding.progressBar.setVisibility(View.GONE);\r\n                binding.progressBar.setVisibility(View.GONE);\r\n                binding.emptyStateMsg.setText(\"No Data Found\");\r\n            }\r\n\r\n\r\n        },\r\n                error -> {\r\n                    binding.swipeContainer.setRefreshing(false);\r\n                    error.printStackTrace();\r\n                    binding.progressBar.setVisibility(View.GONE);\r\n                    binding.shimmerViewContainer.stopShimmer();\r\n                    binding.shimmerViewContainer.setVisibility(View.GONE);\r\n                    binding.recyclerList.setVisibility(View.GONE);\r\n                  //  binding.view.setVisibility(View.VISIBLE);\r\n                    binding.emptyStateLayout.setVisibility(View.VISIBLE);\r\n                    binding.emptyStateMsg.setText(\"No Data Found\");\r\n\r\n                }\r\n        ) {\r\n\r\n            @Override\r\n            public Map getHeaders() {\r\n                return getHeader(CodeReUse.GET_FORM_HEADER);\r\n            }\r\n\r\n            @Override\r\n            protected Map<String, String> getParams() {\r\n                HashMap<String, String> map = new HashMap<>();\r\n                String keywords = binding.searchEdt.getText().toString().replace(\" \",\",\").replace(\",\",\",\");\r\n                map.put(\"tag\", keywords);\r\n                Log.e(\"pram\",map.toString());\r\n                return map;\r\n            }\r\n        };\r\n        stringRequest.setTag(\"search\");\r\n        MySingleton.getInstance(act).cancelPendingRequests(\"search\");\r\n        MySingleton.getInstance(act).addToRequestQueue(stringRequest);\r\n    }\r\n\r\n\r\n    private void getImageCategoryNextPage(String nextPageUrl) {\r\n        Utility.Log(\"API-\", nextPageUrl);\r\n        binding.progressBar.setVisibility(View.VISIBLE);\r\n        StringRequest stringRequest = new StringRequest(Request.Method.POST, nextPageUrl, response -> {\r\n            binding.progressBar.setVisibility(View.GONE);\r\n            binding.swipeContainer.setRefreshing(false);\r\n            Utility.Log(\" data : \", response);\r\n            try {\r\n                JSONObject jsonObject = new JSONObject(response);\r\n                DashBoardItem apiResponse = ResponseHandler.handleBusinessCategory(act, jsonObject);\r\n                if (apiResponse.getDashBoardItems() != null) {\r\n                    if (menuModels != null && menuModels.size() != 0) {\r\n                        int lastPos = menuModels.size();\r\n                        menuModels.addAll(menuModels.size(), apiResponse.getDashBoardItems().get(0).getDailyImages());\r\n                        MenuAddaptor.notifyItemRangeInserted(lastPos, apiResponse.getDashBoardItems().size());\r\n\r\n                    } else {\r\n                        menuModels = new ArrayList<>();\r\n                        menuModels.addAll(0, apiResponse.getDashBoardItems().get(0).getDailyImages());\r\n                        MenuAddaptor.notifyItemRangeInserted(0, apiResponse.getDashBoardItems().size());\r\n                    }\r\n                }\r\n                if (apiResponse.getLinks() != null) {\r\n                    if (apiResponse.getLinks().getNextPageUrl() != null && !apiResponse.getLinks().getNextPageUrl().equalsIgnoreCase(\"null\") && !apiResponse.getLinks().getNextPageUrl().isEmpty()) {\r\n                        getImageCategoryNextPage(apiResponse.getLinks().getNextPageUrl());\r\n                    }else{\r\n                        binding.shimmerViewContainer.stopShimmer();\r\n                        binding.shimmerViewContainer.setVisibility(View.GONE);\r\n                    //    binding.view.setVisibility(View.VISIBLE);\r\n                    }\r\n                }else{\r\n                    binding.shimmerViewContainer.stopShimmer();\r\n                    binding.shimmerViewContainer.setVisibility(View.GONE);\r\n                //    binding.view.setVisibility(View.VISIBLE);\r\n                }\r\n            } catch (JSONException e) {\r\n                e.printStackTrace();\r\n            }\r\n\r\n        },\r\n                error -> {\r\n                    binding.swipeContainer.setRefreshing(false);\r\n                    error.printStackTrace();\r\n                    binding.progressBar.setVisibility(View.GONE);\r\n                }\r\n        ) {\r\n            @Override\r\n            public Map<String, String> getHeaders() {\r\n                return getHeader(CodeReUse.GET_FORM_HEADER);\r\n            }\r\n\r\n            @Nullable\r\n            @Override\r\n            protected Map<String, String> getParams() throws AuthFailureError {\r\n                HashMap<String, String> map = new HashMap<>();\r\n                String keywords = binding.searchEdt.getText().toString().replace(\" \",\",\").replace(\",\",\",\");\r\n                map.put(\"tag\", keywords);\r\n                Log.e(\"pram\",map.toString());\r\n                return map;\r\n            }\r\n        };\r\n        stringRequest.setTag(\"search\");\r\n        MySingleton.getInstance(act).addToRequestQueue(stringRequest);\r\n    }\r\n\r\n\r\n    @Override\r\n    public void onBackPressed() {\r\n        CodeReUse.activityBackPress(act);\r\n    }\r\n\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/app/brandmania/Activity/details/BusinessCategoryListActivity.java b/app/src/main/java/com/app/brandmania/Activity/details/BusinessCategoryListActivity.java
--- a/app/src/main/java/com/app/brandmania/Activity/details/BusinessCategoryListActivity.java	(revision 865bbcc1cfef838ea5e5617016b47f1abe467b63)
+++ b/app/src/main/java/com/app/brandmania/Activity/details/BusinessCategoryListActivity.java	(date 1638017151975)
@@ -4,7 +4,6 @@
 import android.os.Bundle;
 import android.text.Editable;
 import android.text.TextWatcher;
-import android.util.Log;
 import android.view.View;
 
 import androidx.annotation.Nullable;
@@ -36,7 +35,7 @@
 import java.util.Map;
 
 public class BusinessCategoryListActivity extends BaseActivity {
-    Activity act;
+    private Activity act;
     private ActivityViewBusinessCategoryBinding binding;
     private DashBoardItem apiModel;
     private ArrayList<ImageList> rootList;
@@ -86,20 +85,11 @@
     }
 
 
-    void filterCountry(String text) {
-        ArrayList<ImageList> temp = new ArrayList<>();
-        for (ImageList d : rootList) {
-            if (d.getName().toLowerCase().contains(text.toLowerCase())) {
-                temp.add(d);
-            }
-        }
-        MenuAddaptor.updateList(temp);
-    }
 
     BusinessCategoryAdapter MenuAddaptor;
 
     private void setAdapter() {
-        MenuAddaptor = new BusinessCategoryAdapter(apiModel, this, menuModels);
+        MenuAddaptor = new BusinessCategoryAdapter(apiModel, act, menuModels);
         RecyclerView.LayoutManager mLayoutManager = new GridLayoutManager(act, 3);
         binding.recyclerList.setHasFixedSize(true);
         binding.recyclerList.setLayoutManager(mLayoutManager);
@@ -115,13 +105,13 @@
 
     private void getBusinessCategory() {
         binding.progressBar.setVisibility(View.GONE);
-        Utility.Log("API : ", APIs.BUSINESS_CATEGORY+"?page=1");
-        StringRequest stringRequest = new StringRequest(Request.Method.POST, APIs.BUSINESS_CATEGORY+"?page=1", response -> {
+        Utility.Log("API : ", APIs.BUSINESS_CATEGORY + "?page=1");
+        StringRequest stringRequest = new StringRequest(Request.Method.POST, APIs.BUSINESS_CATEGORY + "?page=1", response -> {
             binding.swipeContainer.setRefreshing(false);
             Utility.Log("response : ", response);
             try {
                 JSONObject jsonObject = new JSONObject(response);
-                if (ResponseHandler.isSuccess(null,jsonObject)) {
+                if (ResponseHandler.isSuccess(null, jsonObject)) {
                     apiModel = ResponseHandler.handleBusinessCategory(act, jsonObject);
 
                     if (apiModel.getDashBoardItems() != null && apiModel.getDashBoardItems().size() != 0 && apiModel.getDashBoardItems().get(0).getDailyImages() != null && apiModel.getDashBoardItems().get(0).getDailyImages().size() != 0) {
@@ -151,7 +141,7 @@
                         binding.shimmerViewContainer.setVisibility(View.GONE);
                         binding.progressBar.setVisibility(View.GONE);
                     }
-                }else{
+                } else {
                     binding.shimmerViewContainer.stopShimmer();
                     binding.shimmerViewContainer.setVisibility(View.GONE);
                     binding.recyclerList.setVisibility(View.GONE);
@@ -179,7 +169,7 @@
                     binding.shimmerViewContainer.stopShimmer();
                     binding.shimmerViewContainer.setVisibility(View.GONE);
                     binding.recyclerList.setVisibility(View.GONE);
-                  //  binding.view.setVisibility(View.VISIBLE);
+                    //  binding.view.setVisibility(View.VISIBLE);
                     binding.emptyStateLayout.setVisibility(View.VISIBLE);
                     binding.emptyStateMsg.setText("No Data Found");
 
@@ -194,9 +184,9 @@
             @Override
             protected Map<String, String> getParams() {
                 HashMap<String, String> map = new HashMap<>();
-                String keywords = binding.searchEdt.getText().toString().replace(" ",",").replace(",",",");
+                String keywords = binding.searchEdt.getText().toString().replace(" ", ",").replace(",", ",");
                 map.put("tag", keywords);
-                Log.e("pram",map.toString());
+                Utility.Log("pram", map.toString());
                 return map;
             }
         };
@@ -231,15 +221,15 @@
                 if (apiResponse.getLinks() != null) {
                     if (apiResponse.getLinks().getNextPageUrl() != null && !apiResponse.getLinks().getNextPageUrl().equalsIgnoreCase("null") && !apiResponse.getLinks().getNextPageUrl().isEmpty()) {
                         getImageCategoryNextPage(apiResponse.getLinks().getNextPageUrl());
-                    }else{
+                    } else {
                         binding.shimmerViewContainer.stopShimmer();
                         binding.shimmerViewContainer.setVisibility(View.GONE);
-                    //    binding.view.setVisibility(View.VISIBLE);
+                        //    binding.view.setVisibility(View.VISIBLE);
                     }
-                }else{
+                } else {
                     binding.shimmerViewContainer.stopShimmer();
                     binding.shimmerViewContainer.setVisibility(View.GONE);
-                //    binding.view.setVisibility(View.VISIBLE);
+                    //    binding.view.setVisibility(View.VISIBLE);
                 }
             } catch (JSONException e) {
                 e.printStackTrace();
@@ -261,9 +251,9 @@
             @Override
             protected Map<String, String> getParams() throws AuthFailureError {
                 HashMap<String, String> map = new HashMap<>();
-                String keywords = binding.searchEdt.getText().toString().replace(" ",",").replace(",",",");
+                String keywords = binding.searchEdt.getText().toString().replace(" ", ",").replace(",", ",");
                 map.put("tag", keywords);
-                Log.e("pram",map.toString());
+                Utility.Log("pram", map.toString());
                 return map;
             }
         };
Index: app/src/main/java/com/app/brandmania/utils/Utility.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.app.brandmania.utils;\r\n\r\nimport android.annotation.SuppressLint;\r\nimport android.app.Activity;\r\nimport android.app.AlertDialog;\r\nimport android.app.Dialog;\r\nimport android.content.ActivityNotFoundException;\r\nimport android.content.Context;\r\nimport android.content.DialogInterface;\r\nimport android.content.Intent;\r\nimport android.graphics.Bitmap;\r\nimport android.graphics.Paint;\r\nimport android.graphics.Typeface;\r\nimport android.net.ConnectivityManager;\r\nimport android.net.NetworkInfo;\r\nimport android.net.Uri;\r\nimport android.os.Build;\r\nimport android.provider.MediaStore;\r\nimport android.text.Editable;\r\nimport android.text.TextWatcher;\r\nimport android.util.Log;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.WindowManager;\r\nimport android.widget.EditText;\r\nimport android.widget.ImageView;\r\nimport android.widget.TextView;\r\n\r\nimport androidx.core.content.ContextCompat;\r\nimport androidx.databinding.DataBindingUtil;\r\nimport androidx.preference.Preference;\r\n\r\nimport com.app.brandmania.Activity.packages.PackageActivity;\r\nimport com.app.brandmania.BuildConfig;\r\nimport com.app.brandmania.Common.PreafManager;\r\nimport com.app.brandmania.Interface.alertListenerCallback;\r\nimport com.app.brandmania.Model.BrandListItem;\r\nimport com.app.brandmania.R;\r\nimport com.app.brandmania.databinding.DetailImageviewBinding;\r\nimport com.app.brandmania.databinding.DialogImageViewLayoutBinding;\r\nimport com.bumptech.glide.Glide;\r\nimport com.bumptech.glide.load.engine.DiskCacheStrategy;\r\nimport com.google.android.material.snackbar.Snackbar;\r\n\r\nimport java.io.ByteArrayOutputStream;\r\nimport java.text.ParseException;\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.Calendar;\r\nimport java.util.Date;\r\nimport java.util.GregorianCalendar;\r\n\r\n\r\npublic class Utility {\r\n    public static Dialog dialog;\r\n    private static Dialog progressDialog;\r\n\r\n    public static void Log(String act, Object msg) {\r\n         Log.e(act, msg + \"\");\r\n    }\r\n    public static void showLoadingTran(Activity act) {\r\n\r\n        if (dialog != null && dialog.isShowing())\r\n            return;\r\n\r\n        dialog = new Dialog(act);\r\n        dialog.getWindow().setBackgroundDrawableResource(\r\n                R.color.colorProgressBackground);\r\n        dialog.setContentView(R.layout.progress_bar_layout);\r\n        dialog.setCancelable(false);\r\n        act.runOnUiThread(new Runnable() {\r\n            @Override\r\n            public void run() {\r\n                // Showing Alert Message\r\n                try {\r\n                    if (dialog != null && !dialog.isShowing())\r\n                        dialog.show();\r\n                } catch (WindowManager.BadTokenException e) {\r\n                    e.printStackTrace();\r\n                } catch (RuntimeException e) {\r\n                    e.printStackTrace();\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    public static boolean isPackageExpired(Activity act)\r\n    {\r\n        if (new PreafManager(act).getActiveBrand().getExpiery_date()!=null && !new PreafManager(act).getActiveBrand().getExpiery_date().isEmpty()) {\r\n            try {\r\n                String expireDate = new PreafManager(act).getActiveBrand().getExpiery_date().replace('-', '/');\r\n\r\n                Date date = new Date();\r\n                @SuppressLint(\"SimpleDateFormat\") SimpleDateFormat formatter = new SimpleDateFormat(\"dd/MM/yyyy\");\r\n                String currentDate = formatter.format(date);\r\n\r\n                Date convertedExpireDate = formatter.parse(expireDate);\r\n                Date convertedCurrentDate = formatter.parse(currentDate);\r\n\r\n\r\n                if (convertedExpireDate.compareTo(convertedCurrentDate) < 0) {\r\n                    return true;\r\n                }\r\n            } catch (Exception e) {\r\n                e.printStackTrace();\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n\r\n    public static boolean isPackageExpired(BrandListItem brandListItem)\r\n    {\r\n        if (brandListItem.getExpiery_date()!=null && !brandListItem.getExpiery_date().isEmpty()) {\r\n\r\n            try {\r\n\r\n                String expireDate = brandListItem.getExpiery_date().replace('-', '/');\r\n                Date date = new Date();\r\n                @SuppressLint(\"SimpleDateFormat\") SimpleDateFormat formatter = new SimpleDateFormat(\"dd/MM/yyyy\");\r\n                String currentDate = formatter.format(date);\r\n\r\n                Date convertedExpireDate = formatter.parse(expireDate);\r\n                Date convertedCurrentDate = formatter.parse(currentDate);\r\n\r\n\r\n                if (convertedExpireDate.compareTo(convertedCurrentDate) < 0) {\r\n                    return true;\r\n                }\r\n            } catch (Exception e) {\r\n                e.printStackTrace();\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public static boolean isNewUser(Activity act) {\r\n        try {\r\n            String expireDate = new PreafManager(act).getActiveBrand().getSubscriptionDate().replace('-', '/');\r\n            Date date = new Date();\r\n            @SuppressLint(\"SimpleDateFormat\") SimpleDateFormat formatter = new SimpleDateFormat(\"dd/MM/yyyy\");\r\n            String currentDate = formatter.format(date);\r\n\r\n            Date convertedExpireDate = formatter.parse(expireDate);\r\n            Date convertedCurrentDate = formatter.parse(currentDate);\r\n\r\n\r\n            if(convertedExpireDate.compareTo(convertedCurrentDate) < 0)\r\n            {\r\n                return true;\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n        return false;\r\n    }\r\n\r\n\r\n    public static int monthsBetweenDates(String subscriptionDateStr){\r\n        Date c = Calendar.getInstance().getTime();\r\n        @SuppressLint(\"SimpleDateFormat\") SimpleDateFormat fmt = new SimpleDateFormat(\"dd-MM-yyyy\");\r\n        String currDateStr = fmt.format(c);\r\n        try {\r\n            Date subscriptionDate = fmt.parse(subscriptionDateStr);\r\n            Date currentDate = fmt.parse(currDateStr);\r\n\r\n            Calendar startCalendar = new GregorianCalendar();\r\n            startCalendar.setTime(subscriptionDate);\r\n            Calendar endCalendar = new GregorianCalendar();\r\n            endCalendar.setTime(currentDate);\r\n            int diffYear = endCalendar.get(Calendar.YEAR) - startCalendar.get(Calendar.YEAR);\r\n            int diffMonth = diffYear * 12 + endCalendar.get(Calendar.MONTH) - startCalendar.get(Calendar.MONTH);\r\n            if ((diffYear == 0) && (diffMonth == 0)){\r\n                return diffMonth;\r\n            }else {\r\n                return 1;\r\n            }\r\n\r\n        } catch (ParseException e) {\r\n            e.printStackTrace();\r\n        }\r\n        return 1;\r\n    }\r\n\r\n\r\n    //return true if user is paid\r\n    public static boolean isUserPaid(BrandListItem activeBrand) {\r\n        if (!activeBrand.getPackagename().isEmpty() && activeBrand.getIs_payment_pending().equalsIgnoreCase(\"0\")) {\r\n            return true;\r\n        }\r\n        else\r\n            return false;\r\n    }\r\n\r\n\r\n    public static void dismissLoadingTran() {\r\n        try {\r\n            if (dialog != null && dialog.isShowing())\r\n                dialog.dismiss();\r\n        } catch (IllegalArgumentException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    public static void setItalicText(TextView textView, boolean italic) {\r\n        if (italic) {\r\n            if (textView.getTypeface()!=null && textView.getTypeface().isBold())\r\n                textView.setTypeface(textView.getTypeface(), Typeface.BOLD_ITALIC);\r\n            else\r\n                textView.setTypeface(textView.getTypeface(), Typeface.ITALIC);\r\n        }else {\r\n            if (textView.getTypeface()!=null && textView.getTypeface().isBold() && textView.getTypeface().isItalic())\r\n                textView.setTypeface(textView.getTypeface(), Typeface.BOLD);\r\n            else\r\n                textView.setTypeface(null, Typeface.NORMAL);\r\n        }\r\n    }\r\n    public static void setUnderlineText(TextView textView,boolean underline){\r\n        if (underline){\r\n            textView.setPaintFlags(textView.getPaintFlags() | Paint.UNDERLINE_TEXT_FLAG);\r\n        }else {\r\n            textView.setPaintFlags(0);\r\n        }\r\n    }\r\n    public static void setBold(TextView textView,boolean bold){\r\n\r\n        if (bold) {\r\n            if (textView.getTypeface()!=null && textView.getTypeface().isItalic())\r\n                textView.setTypeface(textView.getTypeface(), Typeface.BOLD_ITALIC);\r\n            else\r\n                textView.setTypeface(textView.getTypeface(), Typeface.BOLD);\r\n        }else {\r\n            if (textView.getTypeface()!=null && textView.getTypeface().isBold() && textView.getTypeface().isItalic())\r\n                textView.setTypeface(textView.getTypeface(), Typeface.ITALIC);\r\n            else\r\n                textView.setTypeface(null, Typeface.NORMAL);\r\n        }\r\n    }\r\n    public static void RemoveError(EditText editText) {\r\n        editText.addTextChangedListener(new TextWatcher() {\r\n            @Override\r\n            public void onTextChanged(CharSequence cs, int arg1, int arg2, int arg3) {\r\n                editText.setError(null);\r\n            }\r\n\r\n            @Override\r\n            public void afterTextChanged(Editable editable) {\r\n            }\r\n\r\n            @Override\r\n            public void beforeTextChanged(CharSequence arg0, int arg1, int arg2, int arg3) {\r\n            }\r\n        });\r\n    }\r\n    public static void loadImageOnURI(Activity act, ImageView imageView, Uri uri) {\r\n        Glide.with(act)\r\n                .load(uri)\r\n                .placeholder(R.drawable.placeholder)\r\n                .error(R.drawable.placeholder)\r\n                .diskCacheStrategy(DiskCacheStrategy.ALL)\r\n                .override(1200, 1000)\r\n                .into(imageView);\r\n    }\r\n    public static void dismissProgress() {\r\n        try {\r\n            if (progressDialog != null && progressDialog.isShowing())\r\n                progressDialog.dismiss();\r\n        } catch (IllegalArgumentException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    public static void sendMail(Activity act, String emailId, String contactNumber) {\r\n        Intent emailIntent = new Intent(Intent.ACTION_SENDTO, Uri.fromParts(\r\n                \"mailto\", \"lakharasachin.qf@gmail.com\", null));\r\n        emailIntent.putExtra(Intent.EXTRA_SUBJECT, \"iSmart Homes Android app support\");\r\n        emailIntent.putExtra(Intent.EXTRA_TEXT, \"\" +\r\n                \"===========================\\n\" +\r\n                \"App Details\\n\" +\r\n                \"\\n\" +\r\n                \"App Version : \" + BuildConfig.VERSION_NAME + \"\\n\" +\r\n                \"Android Version : \" + Build.VERSION.SDK_INT + \"\\n\" +\r\n                \"Android Device : \" + Build.BRAND + \"\\n\" +\r\n                \"Android Device Model : \" + Build.MODEL + \"\\n\" +\r\n                \"Email : \" + emailId + \"\\n\" +\r\n                \"Mobile : \" + contactNumber + \"\\n\" +\r\n                \"===========================\\n\"\r\n        );\r\n        act.startActivity(Intent.createChooser(emailIntent, \"Send email...\"));\r\n    }\r\n\r\n\r\n    public static void showProgress(Activity act) {\r\n\r\n        if (progressDialog != null && progressDialog.isShowing())\r\n            return;\r\n\r\n        progressDialog = new Dialog(act);\r\n        progressDialog.setContentView(R.layout.progress_bar_layout);\r\n        progressDialog.setCancelable(false);\r\n        act.runOnUiThread(new Runnable() {\r\n            @Override\r\n            public void run() {\r\n                // Showing Alert Message\r\n                try {\r\n                    if (progressDialog != null && !progressDialog.isShowing())\r\n                        progressDialog.show();\r\n                } catch (RuntimeException e) {\r\n                    e.printStackTrace();\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    public static void showAlert(Activity act, String msg) {\r\n        new AlertDialog.Builder(act)\r\n                .setMessage(msg)\r\n                .setCancelable(true)\r\n                .setPositiveButton(\"OK\", new DialogInterface.OnClickListener() {\r\n                    @Override\r\n                    public void onClick(DialogInterface dialogInterface, int i) {\r\n                        dialogInterface.dismiss();\r\n                        ((alertListenerCallback) act).alertListenerClick();\r\n                    }\r\n                })\r\n                .show();\r\n    }\r\n\r\n\r\n    public static void showAlert(Activity act, String msg, String flag) {\r\n        new AlertDialog.Builder(act)\r\n                .setMessage(msg)\r\n                .setCancelable(true)\r\n                .setPositiveButton(\"OK\", new DialogInterface.OnClickListener() {\r\n                    @Override\r\n                    public void onClick(DialogInterface dialogInterface, int i) {\r\n                        dialogInterface.dismiss();\r\n                        act.onBackPressed();\r\n                        ((alertListenerCallback) act).alertListenerClick();\r\n                    }\r\n                })\r\n                .show();\r\n    }\r\n\r\n\r\n\r\n    public static void fullScreenImageViewer(Activity act, String imageUrl) {\r\n        Log(\"Image url\", imageUrl + \"s\");\r\n        DetailImageviewBinding binding = DataBindingUtil.inflate(LayoutInflater.from(act), R.layout.detail_imageview, null, false);\r\n        androidx.appcompat.app.AlertDialog alertDialog;\r\n        androidx.appcompat.app.AlertDialog.Builder builder = new androidx.appcompat.app.AlertDialog.Builder(act, R.style.MyAlertDialogStyle);\r\n        builder.setView(binding.getRoot());\r\n        alertDialog = builder.create();\r\n        alertDialog.setContentView(binding.getRoot());\r\n        binding.CloseImg.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                alertDialog.dismiss();\r\n            }\r\n        });\r\n\r\n        Glide.with(act).load(imageUrl).error(R.drawable.placeholder)\r\n                .placeholder(R.drawable.placeholder).into(binding.fullImageViewer);\r\n        alertDialog.show();\r\n\r\n    }\r\n\r\n    public static void showAlertNew(Activity act, String msg) {\r\n        new AlertDialog.Builder(act)\r\n                .setMessage(msg)\r\n                .setCancelable(true)\r\n                .setPositiveButton(\"OK\", new DialogInterface.OnClickListener() {\r\n                    @Override\r\n                    public void onClick(DialogInterface dialogInterface, int i) {\r\n                        dialogInterface.dismiss();\r\n                        act.onBackPressed();\r\n                    }\r\n                })\r\n                .show();\r\n    }\r\n    public static boolean isNetworkAvailable(Context context) {\r\n        ConnectivityManager connectivityManager = (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE);\r\n        NetworkInfo activeNetworkInfo = connectivityManager.getActiveNetworkInfo();\r\n        return activeNetworkInfo != null && activeNetworkInfo.isConnected();\r\n    }\r\n\r\n    public static void showLoading(Activity act) {\r\n\r\n        if (dialog != null && dialog.isShowing())\r\n            return;\r\n\r\n        dialog = new Dialog(act);\r\n        dialog.getWindow().setBackgroundDrawableResource(\r\n                R.color.colorProgressOverlay);\r\n        dialog.setContentView(R.layout.dialog_loader);\r\n        dialog.setCancelable(false);\r\n        act.runOnUiThread(new Runnable() {\r\n            @Override\r\n            public void run() {\r\n                // Showing Alert Message\r\n                try {\r\n                    if (dialog != null && !dialog.isShowing())\r\n                        dialog.show();\r\n                } catch (WindowManager.BadTokenException e) {\r\n                    e.printStackTrace();\r\n                } catch (RuntimeException e) {\r\n                    e.printStackTrace();\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n\r\n    public static void dismissLoading() {\r\n        try {\r\n            if (dialog != null && dialog.isShowing())\r\n                dialog.dismiss();\r\n        } catch (IllegalArgumentException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    public static boolean compareDate(String endDate) {\r\n        Date c = Calendar.getInstance().getTime();\r\n\r\n        SimpleDateFormat fmt = new SimpleDateFormat(\"dd-mm-yyyy\");\r\n        String currtDate = fmt.format(c);\r\n        try {\r\n\r\n            Date currentDate = fmt.parse(currtDate);\r\n            Date meetingDate = fmt.parse(endDate);\r\n            if (currentDate.compareTo(meetingDate) > 0) {\r\n                return true;\r\n            }\r\n        } catch (ParseException e) {\r\n            e.printStackTrace();\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public static void rateApp(Activity act) {\r\n        Uri uri = Uri.parse(\"market://details?id=com.app.bespoke\");// + act.getPackageName());\r\n        Intent goToMarket = new Intent(Intent.ACTION_VIEW, uri);\r\n\r\n        goToMarket.addFlags(Intent.FLAG_ACTIVITY_NO_HISTORY |\r\n                Intent.FLAG_ACTIVITY_NEW_DOCUMENT |\r\n                Intent.FLAG_ACTIVITY_MULTIPLE_TASK);\r\n        try {\r\n            act.startActivity(goToMarket);\r\n        } catch (ActivityNotFoundException e) {\r\n            act.startActivity(new Intent(Intent.ACTION_VIEW,\r\n                    Uri.parse(\"http://play.google.com/store/apps/details?id=com.app.bespoke\")));//+ act.getPackageName())));\r\n        }\r\n    }\r\n    private static OnImageViewDismiss viewDismiss;\r\n    public static void fullScreenImageViewerBitmap(Activity act, Bitmap imageUrl, OnImageViewDismiss viewDi) {\r\n        viewDismiss = viewDi;\r\n        DialogImageViewLayoutBinding binding = DataBindingUtil.inflate(LayoutInflater.from(act),\r\n                R.layout.dialog_image_view_layout, null, false);\r\n        androidx.appcompat.app.AlertDialog alertDialog;\r\n        androidx.appcompat.app.AlertDialog.Builder builder = new androidx.appcompat.app.AlertDialog.Builder(act, R.style.MyAlertDialogStyle);\r\n        builder.setView(binding.getRoot());\r\n        alertDialog = builder.create();\r\n        alertDialog.setContentView(binding.getRoot());\r\n\r\n        binding.CloseImg.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                alertDialog.dismiss();\r\n            }\r\n        });\r\n\r\n//        binding.fullImageViewer3.setImageBitmap(imageUrl);\r\n//        binding.fullImageViewer3.setVisibility(View.VISIBLE);\r\n//        binding.fullImageViewer.setVisibility(View.GONE);\r\n//\r\n//        binding.fullImageViewer3.setVisibility(View.VISIBLE);\r\n//        binding.fullImageViewer.setVisibility(View.GONE);\r\n\r\n\r\n        alertDialog.show();\r\n        alertDialog.setOnDismissListener(new DialogInterface.OnDismissListener() {\r\n            @Override\r\n            public void onDismiss(DialogInterface dialog) {\r\n                viewDismiss.onPhotoDialogDismiss();\r\n            }\r\n        });\r\n    }\r\n\r\n    public interface OnImageViewDismiss {\r\n        void onPhotoDialogDismiss();\r\n    }\r\n    public static void showSnackBar(View view, Activity act, String message) {\r\n        Snackbar snackbar = Snackbar\r\n                .make(view, message, Snackbar.LENGTH_LONG)\r\n                .setAction(\"OK\", new View.OnClickListener() {\r\n                    @Override\r\n                    public void onClick(View view) {\r\n\r\n                    }\r\n                });\r\n        snackbar.setActionTextColor(ContextCompat.getColor(act, R.color.colorNavText));\r\n        snackbar.show();\r\n    }\r\n\r\n    public static Uri getImageUri(Context inContext, Bitmap inImage) {\r\n        ByteArrayOutputStream bytes = new ByteArrayOutputStream();\r\n        inImage.compress(Bitmap.CompressFormat.JPEG, 100, bytes);\r\n        String path = MediaStore.Images.Media.insertImage(inContext.getContentResolver(), inImage, \"IMG_\" + Calendar.getInstance().getTime(), null);\r\n        return Uri.parse(path);\r\n    }\r\n\r\n    public static String convertFirstUpper(String str) {\r\n\r\n        if (str == null || str.isEmpty()) {\r\n            return str;\r\n        }\r\n        Utility.Log(\"FirstLetter\", str.substring(0, 1) + \"    \" + str.substring(1));\r\n        return str.substring(0, 1).toUpperCase() + str.substring(1);\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/app/brandmania/utils/Utility.java b/app/src/main/java/com/app/brandmania/utils/Utility.java
--- a/app/src/main/java/com/app/brandmania/utils/Utility.java	(revision 865bbcc1cfef838ea5e5617016b47f1abe467b63)
+++ b/app/src/main/java/com/app/brandmania/utils/Utility.java	(date 1638016506567)
@@ -55,7 +55,7 @@
     private static Dialog progressDialog;
 
     public static void Log(String act, Object msg) {
-         Log.e(act, msg + "");
+         //Log.e(act, msg + "");
     }
     public static void showLoadingTran(Activity act) {
 
Index: app/src/main/java/com/app/brandmania/Activity/details/DailyCategoryListActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.app.brandmania.Activity.details;\r\n\r\nimport android.app.Activity;\r\nimport android.os.Bundle;\r\nimport android.text.Editable;\r\nimport android.text.TextWatcher;\r\nimport android.util.Log;\r\nimport android.view.View;\r\n\r\nimport androidx.databinding.DataBindingUtil;\r\nimport androidx.recyclerview.widget.GridLayoutManager;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\nimport androidx.swiperefreshlayout.widget.SwipeRefreshLayout;\r\n\r\nimport com.android.volley.Request;\r\nimport com.android.volley.RequestQueue;\r\nimport com.android.volley.Response;\r\nimport com.android.volley.VolleyError;\r\nimport com.android.volley.toolbox.StringRequest;\r\nimport com.android.volley.toolbox.Volley;\r\nimport com.app.brandmania.Adapter.BusinessCategoryAdapter;\r\nimport com.app.brandmania.Common.MySingleton;\r\nimport com.app.brandmania.Common.ResponseHandler;\r\nimport com.app.brandmania.Connection.BaseActivity;\r\nimport com.app.brandmania.Model.DashBoardItem;\r\nimport com.app.brandmania.Model.ImageList;\r\nimport com.app.brandmania.R;\r\nimport com.app.brandmania.databinding.ActivityViewBusinessCategoryBinding;\r\nimport com.app.brandmania.utils.APIs;\r\nimport com.app.brandmania.utils.CodeReUse;\r\nimport com.app.brandmania.utils.Utility;\r\n\r\nimport org.json.JSONException;\r\nimport org.json.JSONObject;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.HashMap;\r\nimport java.util.Iterator;\r\nimport java.util.List;\r\nimport java.util.Map;\r\n\r\npublic class DailyCategoryListActivity extends BaseActivity {\r\n    Activity act;\r\n    private ActivityViewBusinessCategoryBinding binding;\r\n    private DashBoardItem apiModel;\r\n    private ArrayList<ImageList> menuModels;\r\n    private ArrayList<ImageList> rootList;\r\n    @Override\r\n    public void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setTheme(R.style.AppTheme_material_theme);\r\n        act = this;\r\n        binding = DataBindingUtil.setContentView(act, R.layout.activity_view_business_category);\r\n\r\n        if (getIntent().hasExtra(\"title\"))\r\n            binding.toolbarTitle.setText(getIntent().getStringExtra(\"title\"));\r\n\r\n        binding.BackButton.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                onBackPressed();\r\n            }\r\n        });\r\n\r\n        binding.swipeContainer.setColorSchemeResources(R.color.colorPrimary, R.color.colorsecond, R.color.colorthird);\r\n        binding.swipeContainer.setOnRefreshListener(new SwipeRefreshLayout.OnRefreshListener() {\r\n            @Override\r\n            public void onRefresh() {\r\n                startAnimation();\r\n                getBusinessCategory();\r\n            }\r\n        });\r\n\r\n        binding.searchEdt.addTextChangedListener(new TextWatcher() {\r\n            @Override\r\n            public void beforeTextChanged(CharSequence s, int start, int count, int after) {\r\n            }\r\n\r\n            @Override\r\n            public void onTextChanged(CharSequence s, int start, int before, int count) {\r\n\r\n            }\r\n\r\n            @Override\r\n            public void afterTextChanged(Editable s) {\r\n                startAnimation();\r\n                getBusinessCategory();\r\n            }\r\n        });\r\n\r\n        startAnimation();\r\n        getBusinessCategory();\r\n    }\r\n\r\n    BusinessCategoryAdapter MenuAddaptor;\r\n    void filterCountry(String text) {\r\n        ArrayList<ImageList> temp = new ArrayList<>();\r\n        for (ImageList d : rootList) {\r\n            if (d.getName().toLowerCase().contains(text.toLowerCase())) {\r\n                temp.add(d);\r\n            }\r\n        }\r\n        MenuAddaptor.updateList(temp);\r\n    }\r\n    private void setAdapter() {\r\n        MenuAddaptor = new BusinessCategoryAdapter(apiModel, this, menuModels);\r\n        RecyclerView.LayoutManager mLayoutManager = new GridLayoutManager(act, 3);\r\n        binding.recyclerList.setHasFixedSize(true);\r\n        binding.recyclerList.setLayoutManager(mLayoutManager);\r\n        binding.recyclerList.setAdapter(MenuAddaptor);\r\n    }\r\n\r\n    private void startAnimation() {\r\n        binding.shimmerViewContainer.startShimmer();\r\n        binding.shimmerViewContainer.setVisibility(View.VISIBLE);\r\n        binding.recyclerList.setVisibility(View.GONE);\r\n        binding.emptyStateLayout.setVisibility(View.GONE);\r\n    }\r\n\r\n    private void getBusinessCategory() {\r\n\r\n        Utility.Log(\"API : \", APIs.GET_BRAND);\r\n        StringRequest stringRequest = new StringRequest(Request.Method.POST, APIs.DAILY_CATEGORY+\"?page=1\", new Response.Listener<String>() {\r\n            @Override\r\n            public void onResponse(String response) {\r\n                binding.swipeContainer.setRefreshing(false);\r\n                Utility.Log(\"response : \", response);\r\n                try {\r\n                    JSONObject jsonObject = new JSONObject(response);\r\n                    if (ResponseHandler.isSuccess(null,jsonObject)) {\r\n\r\n                        apiModel = ResponseHandler.handleBusinessCategory(act, jsonObject);\r\n\r\n                        if (apiModel.getDashBoardItems() != null && apiModel.getDashBoardItems().size() != 0 && apiModel.getDashBoardItems().get(0).getDailyImages() != null && apiModel.getDashBoardItems().get(0).getDailyImages().size() != 0) {\r\n                            rootList = ResponseHandler.handleBusinessCategory(act, jsonObject).getDashBoardItems().get(0).getDailyImages();\r\n                            menuModels = ResponseHandler.handleBusinessCategory(act, jsonObject).getDashBoardItems().get(0).getDailyImages();\r\n                            setAdapter();\r\n                            binding.recyclerList.setVisibility(View.VISIBLE);\r\n                            binding.emptyStateLayout.setVisibility(View.GONE);\r\n                            binding.shimmerViewContainer.stopShimmer();\r\n                            binding.shimmerViewContainer.setVisibility(View.GONE);\r\n                        } else {\r\n                            binding.recyclerList.setVisibility(View.GONE);\r\n                            binding.emptyStateLayout.setVisibility(View.VISIBLE);\r\n                            binding.emptyStateMsg.setText(\"No Data Found\");\r\n                        }\r\n\r\n                        if (apiModel.getLinks() != null) {\r\n                            if (apiModel.getLinks().getNextPageUrl() != null && !apiModel.getLinks().getNextPageUrl().equalsIgnoreCase(\"null\") && !apiModel.getLinks().getNextPageUrl().isEmpty()) {\r\n                                getImageCategoryNextPage(apiModel.getLinks().getNextPageUrl());\r\n                            } else {\r\n                                binding.shimmerViewContainer.stopShimmer();\r\n                                binding.shimmerViewContainer.setVisibility(View.GONE);\r\n                                binding.progressBar.setVisibility(View.GONE);\r\n                            }\r\n                        } else {\r\n                            binding.shimmerViewContainer.stopShimmer();\r\n                            binding.shimmerViewContainer.setVisibility(View.GONE);\r\n                            binding.progressBar.setVisibility(View.GONE);\r\n                        }\r\n                    }else{\r\n                        binding.recyclerList.setVisibility(View.GONE);\r\n                        binding.shimmerViewContainer.stopShimmer();\r\n                        binding.shimmerViewContainer.setVisibility(View.GONE);\r\n                        binding.progressBar.setVisibility(View.GONE);\r\n                        binding.emptyStateLayout.setVisibility(View.VISIBLE);\r\n                        binding.emptyStateMsg.setText(\"No Data Found\");\r\n                    }\r\n\r\n                } catch (JSONException e) {\r\n                    e.printStackTrace();\r\n                    binding.shimmerViewContainer.stopShimmer();\r\n                    binding.shimmerViewContainer.setVisibility(View.GONE);\r\n                    binding.progressBar.setVisibility(View.GONE);\r\n                    binding.recyclerList.setVisibility(View.GONE);\r\n                    binding.emptyStateLayout.setVisibility(View.VISIBLE);\r\n                    binding.emptyStateMsg.setText(\"No Data Found\");\r\n                }\r\n\r\n\r\n            }\r\n        },\r\n                new Response.ErrorListener() {\r\n                    @Override\r\n                    public void onErrorResponse(VolleyError error) {\r\n                        binding.swipeContainer.setRefreshing(false);\r\n                        error.printStackTrace();\r\n                        binding.shimmerViewContainer.stopShimmer();\r\n                        binding.shimmerViewContainer.setVisibility(View.GONE);\r\n                        binding.recyclerList.setVisibility(View.GONE);\r\n                        //  binding.view.setVisibility(View.VISIBLE);\r\n                        binding.emptyStateLayout.setVisibility(View.VISIBLE);\r\n                        binding.emptyStateMsg.setText(\"No Data Found\");\r\n\r\n\r\n                    }\r\n                }\r\n        ) {\r\n            @Override\r\n            public Map getHeaders() {\r\n                return getHeader(CodeReUse.GET_FORM_HEADER);\r\n            }\r\n            @Override\r\n            protected Map<String, String> getParams() {\r\n                HashMap<String, String> map = new HashMap<>();\r\n                String keywords = binding.searchEdt.getText().toString().replace(\" \",\",\").replace(\",\",\",\");\r\n                map.put(\"tag\", keywords);\r\n                Log.e(\"pram\",map.toString());\r\n                return map;\r\n            }\r\n\r\n        };\r\n        stringRequest.setTag(\"search\");\r\n        MySingleton.getInstance(act).cancelPendingRequests(\"search\");\r\n        MySingleton.getInstance(act).addToRequestQueue(stringRequest);\r\n    }\r\n    private void getImageCategoryNextPage(String nextPageUrl) {\r\n        Utility.Log(\"API-\", nextPageUrl);\r\n        binding.progressBar.setVisibility(View.VISIBLE);\r\n        StringRequest stringRequest = new StringRequest(Request.Method.POST, nextPageUrl, response -> {\r\n            binding.progressBar.setVisibility(View.GONE);\r\n            binding.swipeContainer.setRefreshing(false);\r\n            Utility.Log(\" data : \", response);\r\n            try {\r\n                JSONObject jsonObject = new JSONObject(response);\r\n                DashBoardItem apiResponse = ResponseHandler.handleBusinessCategory(act, jsonObject);\r\n                if (apiResponse.getDashBoardItems() != null) {\r\n                    if (menuModels != null && menuModels.size() != 0) {\r\n                        int lastPos = menuModels.size();\r\n                        menuModels.addAll(menuModels.size(), apiResponse.getDashBoardItems().get(0).getDailyImages());\r\n                        MenuAddaptor.notifyItemRangeInserted(lastPos, apiResponse.getDashBoardItems().size());\r\n\r\n                    } else {\r\n                        menuModels = new ArrayList<>();\r\n                        menuModels.addAll(0, apiResponse.getDashBoardItems().get(0).getDailyImages());\r\n                        MenuAddaptor.notifyItemRangeInserted(0, apiResponse.getDashBoardItems().size());\r\n                    }\r\n                }\r\n                if (apiResponse.getLinks() != null) {\r\n                    if (apiResponse.getLinks().getNextPageUrl() != null && !apiResponse.getLinks().getNextPageUrl().equalsIgnoreCase(\"null\") && !apiResponse.getLinks().getNextPageUrl().isEmpty()) {\r\n                        getImageCategoryNextPage(apiResponse.getLinks().getNextPageUrl());\r\n                    }else{\r\n                        binding.shimmerViewContainer.stopShimmer();\r\n                        binding.shimmerViewContainer.setVisibility(View.GONE);\r\n                        //    binding.view.setVisibility(View.VISIBLE);\r\n                    }\r\n                }else{\r\n                    binding.shimmerViewContainer.stopShimmer();\r\n                    binding.shimmerViewContainer.setVisibility(View.GONE);\r\n                    //    binding.view.setVisibility(View.VISIBLE);\r\n                }\r\n            } catch (JSONException e) {\r\n                e.printStackTrace();\r\n            }\r\n\r\n        },\r\n                error -> {\r\n                    binding.swipeContainer.setRefreshing(false);\r\n                    error.printStackTrace();\r\n                    binding.progressBar.setVisibility(View.GONE);\r\n                }\r\n        ) {\r\n            @Override\r\n            public Map<String, String> getHeaders() {\r\n                return getHeader(CodeReUse.GET_FORM_HEADER);\r\n            }\r\n            @Override\r\n            protected Map<String, String> getParams() {\r\n                HashMap<String, String> map = new HashMap<>();\r\n                String keywords = binding.searchEdt.getText().toString().replace(\" \",\",\").replace(\",\",\",\");\r\n                map.put(\"tag\", keywords);\r\n                Log.e(\"pram\",map.toString());\r\n                return map;\r\n            }\r\n        };\r\n        stringRequest.setTag(\"search\");\r\n        MySingleton.getInstance(act).addToRequestQueue(stringRequest);\r\n    }\r\n\r\n    @Override public void onBackPressed() {\r\n        CodeReUse.activityBackPress(act);\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/app/brandmania/Activity/details/DailyCategoryListActivity.java b/app/src/main/java/com/app/brandmania/Activity/details/DailyCategoryListActivity.java
--- a/app/src/main/java/com/app/brandmania/Activity/details/DailyCategoryListActivity.java	(revision 865bbcc1cfef838ea5e5617016b47f1abe467b63)
+++ b/app/src/main/java/com/app/brandmania/Activity/details/DailyCategoryListActivity.java	(date 1638017227462)
@@ -93,17 +93,9 @@
     }
 
     BusinessCategoryAdapter MenuAddaptor;
-    void filterCountry(String text) {
-        ArrayList<ImageList> temp = new ArrayList<>();
-        for (ImageList d : rootList) {
-            if (d.getName().toLowerCase().contains(text.toLowerCase())) {
-                temp.add(d);
-            }
-        }
-        MenuAddaptor.updateList(temp);
-    }
+
     private void setAdapter() {
-        MenuAddaptor = new BusinessCategoryAdapter(apiModel, this, menuModels);
+        MenuAddaptor = new BusinessCategoryAdapter(apiModel, act, menuModels);
         RecyclerView.LayoutManager mLayoutManager = new GridLayoutManager(act, 3);
         binding.recyclerList.setHasFixedSize(true);
         binding.recyclerList.setLayoutManager(mLayoutManager);
@@ -188,7 +180,6 @@
                         binding.shimmerViewContainer.stopShimmer();
                         binding.shimmerViewContainer.setVisibility(View.GONE);
                         binding.recyclerList.setVisibility(View.GONE);
-                        //  binding.view.setVisibility(View.VISIBLE);
                         binding.emptyStateLayout.setVisibility(View.VISIBLE);
                         binding.emptyStateMsg.setText("No Data Found");
 
@@ -205,7 +196,7 @@
                 HashMap<String, String> map = new HashMap<>();
                 String keywords = binding.searchEdt.getText().toString().replace(" ",",").replace(",",",");
                 map.put("tag", keywords);
-                Log.e("pram",map.toString());
+                Utility.Log("pram",map.toString());
                 return map;
             }
 
@@ -242,12 +233,12 @@
                     }else{
                         binding.shimmerViewContainer.stopShimmer();
                         binding.shimmerViewContainer.setVisibility(View.GONE);
-                        //    binding.view.setVisibility(View.VISIBLE);
+
                     }
                 }else{
                     binding.shimmerViewContainer.stopShimmer();
                     binding.shimmerViewContainer.setVisibility(View.GONE);
-                    //    binding.view.setVisibility(View.VISIBLE);
+
                 }
             } catch (JSONException e) {
                 e.printStackTrace();
@@ -269,7 +260,7 @@
                 HashMap<String, String> map = new HashMap<>();
                 String keywords = binding.searchEdt.getText().toString().replace(" ",",").replace(",",",");
                 map.put("tag", keywords);
-                Log.e("pram",map.toString());
+                Utility.Log("pram",map.toString());
                 return map;
             }
         };
