Index: app/src/main/java/com/app/brandmania/Adapter/DasboardAddaptor.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.app.brandmania.Adapter;\r\n\r\nimport android.app.Activity;\r\nimport android.content.Intent;\r\nimport android.util.Log;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.widget.TextView;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.recyclerview.widget.LinearLayoutManager;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport com.google.gson.Gson;\r\nimport com.app.brandmania.Activity.ViewAllImage;\r\nimport com.app.brandmania.Model.DashBoardItem;\r\nimport com.app.brandmania.R;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\nimport static com.app.brandmania.Utils.Utility.Log;\r\n\r\n\r\npublic class DasboardAddaptor extends RecyclerView.Adapter<DasboardAddaptor.DasboardViewHolder> {\r\n\r\n    private ArrayList<DashBoardItem> dashBoardItemList;\r\n\r\n    private final Gson gson;\r\n    Activity activity;\r\n\r\n    public DasboardAddaptor(ArrayList<DashBoardItem> dashBoardItemList, Activity activity) {\r\n        this.dashBoardItemList = dashBoardItemList;\r\n        this.activity = activity;\r\n        gson=new Gson();\r\n    }\r\n\r\n    @NonNull\r\n    @Override\r\n    public DasboardViewHolder onCreateViewHolder(@NonNull ViewGroup viewGroup, int i) {\r\n        View layout = LayoutInflater.from(viewGroup.getContext()).inflate(R.layout.dashboard_item_layout, viewGroup, false);\r\n\r\n        return new DasboardViewHolder(layout);\r\n    }\r\n    @Override public void onBindViewHolder(@NonNull DasboardViewHolder dasboardViewHolder, int position) {\r\n        dasboardViewHolder.title.setText(convertFirstUpper(dashBoardItemList.get(position).getName()));\r\n        Log.e(\"LLLLLL\", String.valueOf(dashBoardItemList.get(position).getImageLists().size()));\r\n        ImageCategoryAddaptor menuAddaptor = new ImageCategoryAddaptor(dashBoardItemList.get(position).getImageLists(), activity);\r\n        menuAddaptor.setLayoutType(ImageCategoryAddaptor.FROM_HOMEFRAGEMENT);\r\n        dasboardViewHolder.recyclerView.setLayoutManager(new LinearLayoutManager(activity, LinearLayoutManager.HORIZONTAL, false));\r\n        dasboardViewHolder.recyclerView.setHasFixedSize(true);\r\n        menuAddaptor.setDashBoardItem(dashBoardItemList.get(position));\r\n        dasboardViewHolder.recyclerView.setAdapter(menuAddaptor);\r\n        dasboardViewHolder.viewAll.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n\r\n\r\n                Intent i =new Intent(activity, ViewAllImage.class);\r\n                i.putExtra(\"detailsObj\", gson.toJson(dashBoardItemList.get(position)));\r\n                activity.startActivity(i);\r\n                i.addCategory(Intent.CATEGORY_HOME);\r\n                i.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\r\n                activity.overridePendingTransition(R.anim.slide_right_in, R.anim.slide_right_out);\r\n\r\n            }\r\n        });\r\n\r\n    }\r\n    @Override public int getItemCount() {\r\n        return dashBoardItemList.size();\r\n    }\r\n    public void setfilter(List<DashBoardItem> listitem) {\r\n        dashBoardItemList = new ArrayList<>();\r\n        dashBoardItemList.addAll(listitem);\r\n        notifyDataSetChanged();\r\n    }\r\n    public class DasboardViewHolder extends RecyclerView.ViewHolder {\r\n        TextView title,viewAll;\r\n        RecyclerView recyclerView;\r\n\r\n        public DasboardViewHolder(@NonNull View itemView) {\r\n            super(itemView);\r\n          title=itemView.findViewById(R.id.title);\r\n          viewAll=itemView.findViewById(R.id.viewAll);\r\n          recyclerView=itemView.findViewById(R.id.imageCategoryRecycler);\r\n\r\n        }\r\n\r\n\r\n    }\r\n    public static String convertFirstUpper(String str) {\r\n\r\n        if (str == null || str.isEmpty()) {\r\n            return str;\r\n        }\r\n        Log(\"FirstLetter\", str.substring(0, 1) + \"    \" + str.substring(1));\r\n        return str.substring(0, 1).toUpperCase() + str.substring(1);\r\n    }\r\n\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/app/brandmania/Adapter/DasboardAddaptor.java	(revision 90317a36ad9c00f7df6d99091ebb42ca4ae706b0)
+++ app/src/main/java/com/app/brandmania/Adapter/DasboardAddaptor.java	(date 1605017646242)
@@ -58,6 +58,7 @@
 
 
                 Intent i =new Intent(activity, ViewAllImage.class);
+                i.putExtra("viewAll","12");
                 i.putExtra("detailsObj", gson.toJson(dashBoardItemList.get(position)));
                 activity.startActivity(i);
                 i.addCategory(Intent.CATEGORY_HOME);
Index: app/src/main/java/com/app/brandmania/Activity/ViewAllImage.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.app.brandmania.Activity;\r\n\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.core.app.ActivityCompat;\r\nimport androidx.core.content.ContextCompat;\r\nimport androidx.databinding.DataBindingUtil;\r\nimport androidx.recyclerview.widget.GridLayoutManager;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\nimport androidx.viewpager.widget.ViewPager;\r\n\r\nimport android.Manifest;\r\nimport android.app.Activity;\r\nimport android.app.AlertDialog;\r\nimport android.app.ProgressDialog;\r\nimport android.content.DialogInterface;\r\nimport android.content.Intent;\r\nimport android.graphics.Bitmap;\r\nimport android.graphics.BitmapFactory;\r\nimport android.graphics.Canvas;\r\nimport android.graphics.drawable.BitmapDrawable;\r\nimport android.graphics.drawable.Drawable;\r\nimport android.net.Uri;\r\nimport android.os.AsyncTask;\r\nimport android.os.Bundle;\r\nimport android.os.Environment;\r\nimport android.util.Log;\r\nimport android.view.View;\r\nimport android.view.WindowManager;\r\nimport android.widget.ImageView;\r\nimport android.widget.LinearLayout;\r\n\r\nimport com.android.volley.AuthFailureError;\r\nimport com.android.volley.Request;\r\nimport com.android.volley.RequestQueue;\r\nimport com.android.volley.Response;\r\nimport com.android.volley.VolleyError;\r\nimport com.android.volley.toolbox.StringRequest;\r\nimport com.android.volley.toolbox.Volley;\r\nimport com.bumptech.glide.Glide;\r\nimport com.google.gson.Gson;\r\nimport com.app.brandmania.Adapter.ImageCateItemeInterFace;\r\nimport com.app.brandmania.Adapter.ImageCategoryAddaptor;\r\nimport com.app.brandmania.Adapter.ViewPagerAdapterFrame;\r\nimport com.app.brandmania.Common.PreafManager;\r\nimport com.app.brandmania.Common.ResponseHandler;\r\nimport com.app.brandmania.Model.DashBoardItem;\r\nimport com.app.brandmania.Model.FrameItem;\r\nimport com.app.brandmania.Model.ImageList;\r\nimport com.app.brandmania.R;\r\nimport com.app.brandmania.Utils.APIs;\r\nimport com.app.brandmania.Utils.CodeReUse;\r\nimport com.app.brandmania.Utils.Utility;\r\nimport com.app.brandmania.databinding.ActivityViewAllImageBinding;\r\n\r\nimport org.json.JSONException;\r\nimport org.json.JSONObject;\r\n\r\nimport java.io.File;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.FileOutputStream;\r\nimport java.io.IOException;\r\nimport java.io.InputStream;\r\nimport java.net.HttpURLConnection;\r\nimport java.net.URL;\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.ArrayList;\r\nimport java.util.Date;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\n\r\nimport static com.app.brandmania.Adapter.ImageCategoryAddaptor.FROM_VIEWALL;\r\n\r\npublic class ViewAllImage extends AppCompatActivity implements ImageCateItemeInterFace,alertListenerCallback{\r\n    Activity act;\r\n    ViewPager viewPager;\r\n    ArrayList<ImageList> AddFavorite=new ArrayList<>();\r\n    private ActivityViewAllImageBinding binding;\r\n    ArrayList<ImageList> menuModels = new ArrayList<>();\r\n    ArrayList<FrameItem> brandListItems = new ArrayList<>();\r\n    public static final int DOWLOAD = 1;\r\n    public static final int ADDFAV = 3;\r\n    public static final int REMOVEFAV = 3;\r\n    ArrayList<FrameItem> viewPagerItems = new ArrayList<>();\r\n    PreafManager preafManager;\r\n    Gson gson;\r\n    private ProgressDialog simpleWaitDialog;\r\n    private DashBoardItem imageList;\r\n    private ImageList selectedObject;\r\n    LinearLayout sliderDotspanel;\r\n    private int dotscount;\r\n    private ImageView[] dots;\r\n    Drawable drawable;\r\n    FrameItem selectedModelFromView;\r\n    AlertDialog.Builder alertDialogBuilder;\r\n    File new_file;\r\n    @Override\r\n    public void onCreate(Bundle savedInstanceState) {\r\n        setTheme(R.style.AppTheme_material_theme);\r\n        super.onCreate(savedInstanceState);\r\n        act = this;\r\n        captureScreenShort();\r\n        binding = DataBindingUtil.setContentView(act, R.layout.activity_view_all_image);\r\n\r\n        preafManager = new PreafManager(this);\r\n\r\n        gson = new Gson();\r\n        selectedObject = gson.fromJson(getIntent().getStringExtra(\"selectedimage\"), ImageList.class);\r\n        // getWindow().setFlags(WindowManager.LayoutParams.FLAG_SECURE, WindowManager.LayoutParams.FLAG_SECURE);\r\n\r\n        Log.e(\"selectedObject\",gson.toJson(selectedObject));\r\n        getFrame();\r\n        imageList = gson.fromJson(getIntent().getStringExtra(\"detailsObj\"), DashBoardItem.class);\r\n        binding.titleName.setText(imageList.getName());\r\n        //frameViewPager();\r\n        LoadDataToUI();\r\n        getImageCtegory();\r\n        binding.backIcon.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                onBackPressed();\r\n            }\r\n        });\r\n\r\n        binding.fabroutIcon.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n              preafManager.AddToMyFavorites(selectedObject);\r\n              if (binding.fabroutIcon.getVisibility()==View.VISIBLE)\r\n              {\r\n                  binding.fabroutIcon.setVisibility(View.GONE);\r\n                  binding.addfabroutIcon.setVisibility(View.VISIBLE);\r\n              }\r\n              Log.e(\"FAVVV\",gson.toJson(preafManager.getSavedFavorites()));\r\n              dowloadAndShare(ADDFAV);\r\n            }\r\n        });\r\n        binding.addfabroutIcon.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                preafManager.removeFromMyFavorites(selectedObject);\r\n                if (binding.addfabroutIcon.getVisibility()==View.VISIBLE)\r\n                {\r\n                    binding.addfabroutIcon.setVisibility(View.GONE);\r\n                    binding.fabroutIcon.setVisibility(View.VISIBLE);\r\n                }\r\n                Log.e(\"FAVVV\",gson.toJson(preafManager.getSavedFavorites()));\r\n                removeFavourit(REMOVEFAV);\r\n            }\r\n        });\r\n        binding.downloadIcon.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                alertDialogBuilder = new AlertDialog.Builder(act);\r\n                alertDialogBuilder.setTitle(\"Save image\");\r\n                alertDialogBuilder.setMessage(\"You sure to save your image?\");\r\n                alertDialogBuilder.setPositiveButton(\"yes\",\r\n                        new DialogInterface.OnClickListener() {\r\n                            @Override\r\n                            public void onClick(DialogInterface arg0, int arg1) {\r\n\r\n                                requestAgain();\r\n                               // startSave();\r\n                               Log.e(\"CSelectedImg\",gson.toJson(selectedModelFromView.getFrame1()));\r\n                                new DownloadImageTask(selectedModelFromView.getFrame1()).execute(selectedModelFromView.getFrame1());\r\n                                dowloadAndShare(DOWLOAD);\r\n                            }\r\n                        });\r\n                alertDialogBuilder.setNegativeButton(\"No\", new DialogInterface.OnClickListener() {\r\n                    public void onClick(DialogInterface dialog, int which) {\r\n                        dialog.dismiss();\r\n                    }\r\n                });\r\n\r\n                AlertDialog alertDialog = alertDialogBuilder.create();\r\n                alertDialog.setCancelable(false);\r\n                alertDialog.show();\r\n\r\n            }\r\n        });\r\n        binding.shareIcon.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                requestAgain();\r\n                Log.e(\"CSelectedImg\",gson.toJson(selectedModelFromView.getFrame1()));\r\n                new DownloadImageTask(selectedModelFromView.getFrame1()).execute(selectedModelFromView.getFrame1());\r\n                dowloadAndShare(DOWLOAD);\r\n            }\r\n        });\r\n    }\r\n    public void LoadDataToUI(){\r\n        preafManager=new PreafManager(act);\r\n        if (selectedObject != null) {\r\n            Glide.with(act).load(selectedObject.getFrame()).placeholder(R.drawable.placeholder).into(binding.backgrounImageDuplicate);\r\n            Glide.with(act)\r\n                    .load(selectedObject.getFrame())\r\n                    .placeholder(R.drawable.placeholder)\r\n                    .into(binding.recoImage);\r\n\r\n            AddFavorite= preafManager.getSavedFavorites();\r\n            if (AddFavorite!=null) {\r\n                for (int i = 0; i < AddFavorite.size(); i++) {\r\n                    if (AddFavorite.get(i).getId().equals(selectedObject.getId())) {\r\n                        binding.addfabroutIcon.setVisibility(View.VISIBLE);\r\n                        binding.fabroutIcon.setVisibility(View.GONE);\r\n                        break;\r\n                    } else {\r\n                        binding.addfabroutIcon.setVisibility(View.GONE);\r\n                        binding.fabroutIcon.setVisibility(View.VISIBLE);\r\n                    }\r\n                }\r\n            }\r\n\r\n        }\r\n    }\r\n    public void startShare(File new_file) {\r\n        Intent shareIntent = new Intent();\r\n        shareIntent.setAction(Intent.ACTION_SEND);\r\n        shareIntent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);\r\n        Uri screenshotUri = Uri.parse(new_file.getPath());\r\n        shareIntent.setType(\"image/png\");\r\n        shareIntent.putExtra(Intent.EXTRA_STREAM, screenshotUri);\r\n        startActivity(Intent.createChooser(shareIntent, \"Choose an app\"));\r\n    }\r\n    Bitmap drawableFromUrl(String url)  {\r\n\r\n        HttpURLConnection connection = null;\r\n        InputStream input=null;\r\n        try {\r\n            connection = (HttpURLConnection)new URL(url) .openConnection();\r\n            connection.setRequestProperty(\"User-agent\",\"Mozilla/4.0\");\r\n            connection.connect();\r\n            input = connection.getInputStream();\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n        return BitmapFactory.decodeStream(input);\r\n    }\r\n    BitmapDrawable FrameDrawbable;\r\n    public void startSave() {\r\n\r\n        //Bitmap FrameDrawbable = drawableFromUrl(selectedModelFromView.getFrame1());\r\n        Drawable d = FrameDrawbable;\r\n        Drawable ImageDrawable = (BitmapDrawable) binding.backgrounImageDuplicate.getDrawable();\r\n        Bitmap merged = Bitmap.createBitmap(1000, 1000, Bitmap.Config.ARGB_8888);\r\n        Canvas canvas = new Canvas(merged);\r\n        d.setBounds(0, 0, 1000, 1000);\r\n        ImageDrawable.setBounds(5, 5, 1000, 1000);\r\n        ImageDrawable.draw(canvas);\r\n        d.draw(canvas);\r\n        binding.allSetImage.setImageBitmap(merged);\r\n\r\n        FileOutputStream fileOutputStream = null;\r\n        File file = getDisc();\r\n        if (!file.exists() && !file.mkdirs()) {\r\n            return;\r\n        }\r\n        SimpleDateFormat simpleDateFormat = new SimpleDateFormat(\"yyyymmsshhmmss\");\r\n        String date = simpleDateFormat.format(new Date());\r\n        String name = \"Img\" + date + \".jpg\";\r\n        String file_name = file.getAbsolutePath() + \"/\" + name;\r\n        new_file = new File(file_name);\r\n        try {\r\n            fileOutputStream = new FileOutputStream(new_file);\r\n            Bitmap bitmap = merged;//viewToBitmap(binding.allSetImage,binding.allSetImage.getWidth(),binding.recoImage.getHeight());\r\n            bitmap.compress(Bitmap.CompressFormat.JPEG, 100, fileOutputStream);\r\n\r\n            fileOutputStream.flush();\r\n            fileOutputStream.close();\r\n            startShare(new_file);\r\n        } catch (FileNotFoundException e) {\r\n            e.printStackTrace();\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n        refreshgallery(new_file);\r\n    }\r\n    //For RefresGalary........................\r\n    public void refreshgallery(File file) {\r\n        Intent intent = new Intent(Intent.ACTION_MEDIA_SCANNER_SCAN_FILE);\r\n        intent.setData(Uri.fromFile(file));\r\n        sendBroadcast(intent);\r\n    }\r\n    //For CreatFileeDisc For Download Image.........................\r\n    private File getDisc() {\r\n        File file = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DCIM);\r\n        return new File(file, \"Image Demo\");\r\n    }\r\n    //For SetAddaptor.................................\r\n    public void setAdapter() {\r\n        ImageCategoryAddaptor menuAddaptor = new ImageCategoryAddaptor(menuModels, act);\r\n        menuAddaptor.setLayoutType(FROM_VIEWALL);\r\n        RecyclerView.LayoutManager mLayoutManager = new GridLayoutManager(this, 4);\r\n        binding.viewRecoRecycler.setLayoutManager(mLayoutManager);\r\n        binding.viewRecoRecycler.setHasFixedSize(true);\r\n        binding.viewRecoRecycler.setAdapter(menuAddaptor);\r\n    }\r\n    //For GetImageCategory..............................\r\n    private void getImageCtegory() {\r\n\r\n        Utility.Log(\"API : \", APIs.GET_IMAGEBUID_CATEGORY);\r\n        StringRequest stringRequest = new StringRequest(Request.Method.POST, APIs.GET_IMAGEBUID_CATEGORY + \"/1\", new Response.Listener<String>() {\r\n            @Override\r\n            public void onResponse(String response) {\r\n\r\n                Utility.Log(\"GET_IMAGE_CATEGORY : \", response);\r\n\r\n                try {\r\n                    JSONObject jsonObject = new JSONObject(response);\r\n\r\n                    menuModels = ResponseHandler.HandleGetImageByIdCategory(jsonObject);\r\n\r\n                    if (menuModels != null && menuModels.size() != 0) {\r\n                        setAdapter();\r\n                    } else {\r\n                        Log.e(\"Condidtion\", \"Else\");\r\n\r\n                    }\r\n\r\n\r\n                } catch (JSONException e) {\r\n                    e.printStackTrace();\r\n                }\r\n\r\n            }\r\n        },\r\n                new Response.ErrorListener() {\r\n                    @Override\r\n                    public void onErrorResponse(VolleyError error) {\r\n\r\n                        error.printStackTrace();\r\n//                        String body;\r\n//                        body = new String(error.networkResponse.data, StandardCharsets.UTF_8);\r\n//                        Log.e(\"Load-Get_Exam \", body);\r\n\r\n                    }\r\n                }\r\n        ) {\r\n            /**\r\n             * Passing some request headers*\r\n             */\r\n            @Override\r\n            public Map<String, String> getHeaders() throws AuthFailureError {\r\n                Map<String, String> params = new HashMap<String, String>();\r\n                params.put(\"Accept\", \"application/x-www-form-urlencoded\");//application/json\r\n                params.put(\"Content-Type\", \"application/x-www-form-urlencoded\");\r\n                params.put(\"Authorization\", \"Bearer\" + preafManager.getUserToken());\r\n                Log.e(\"Token\", params.toString());\r\n                return params;\r\n            }\r\n\r\n            @Override\r\n            protected Map<String, String> getParams() {\r\n                Map<String, String> params = new HashMap<>();\r\n\r\n                if (imageList != null)\r\n                    params.put(\"image_category_id\", imageList.getId());\r\n                else\r\n                    params.put(\"image_category_id\", selectedObject.getId());\r\n\r\n                Utility.Log(\"POSTED-PARAMS-\", params.toString());\r\n                return params;\r\n            }\r\n\r\n        };\r\n\r\n        RequestQueue queue = Volley.newRequestQueue(act);\r\n        queue.add(stringRequest);\r\n    }\r\n    //For Download,Share and Faviorit Api...............\r\n    private void dowloadAndShare(final int download) {\r\n\r\n        Utility.Log(\"API : \", APIs.DOWNLOAD_SHARE);\r\n        StringRequest stringRequest = new StringRequest(Request.Method.POST, APIs.DOWNLOAD_SHARE, new Response.Listener<String>() {\r\n            @Override\r\n            public void onResponse(String response) {\r\n\r\n                Utility.Log(\"DOWNLOAD_SHARE : \", response);\r\n\r\n                try {\r\n                    JSONObject jsonObject = new JSONObject(response);\r\n\r\n\r\n                } catch (JSONException e) {\r\n                    e.printStackTrace();\r\n                }\r\n\r\n            }\r\n        },\r\n                new Response.ErrorListener() {\r\n                    @Override\r\n                    public void onErrorResponse(VolleyError error) {\r\n\r\n                        error.printStackTrace();\r\n\r\n                    }\r\n                }\r\n        ) {\r\n            /**\r\n             * Passing some request headers*\r\n             */\r\n            @Override\r\n            public Map<String, String> getHeaders() throws AuthFailureError {\r\n                Map<String, String> params = new HashMap<String, String>();\r\n                params.put(\"Accept\", \"application/x-www-form-urlencoded\");//application/json\r\n                params.put(\"Content-Type\", \"application/x-www-form-urlencoded\");\r\n                params.put(\"Authorization\", \"Bearer\" + preafManager.getUserToken());\r\n                Log.e(\"Token\", params.toString());\r\n                return params;\r\n            }\r\n\r\n            @Override\r\n            protected Map<String, String> getParams() {\r\n                Map<String, String> params = new HashMap<>();\r\n                if (imageList != null) {\r\n                    params.put(\"brand_id\", preafManager.getActiveBrand().getId());\r\n                    params.put(\"image_id\", selectedObject.getImageid());\r\n                    params.put(\"frame_id\", selectedModelFromView.getFrameId());\r\n\r\n                } else {\r\n                    params.put(\"brand_id\",  preafManager.getActiveBrand().getId());\r\n                    params.put(\"image_id\", selectedObject.getImageid());\r\n\r\n\r\n                }\r\n                params.put(\"type\", String.valueOf(download));\r\n                Utility.Log(\"POSTED-PARAMS-\", params.toString());\r\n                return params;\r\n            }\r\n\r\n        };\r\n\r\n        RequestQueue queue = Volley.newRequestQueue(act);\r\n        queue.add(stringRequest);\r\n    }\r\n    //For ImageSelectInterface.......................\r\n    @Override public void ImageCateonItemSelection(int position, ImageList listModel) {\r\n        selectedObject = listModel;\r\n        LoadDataToUI();\r\n    }\r\n    // For Frmae Loade ..................................\r\n    public void frameViewPager() {\r\n        viewPager = (ViewPager) findViewById(R.id.recoframe);\r\n        sliderDotspanel = (LinearLayout) findViewById(R.id.SliderDots);\r\n\r\n        viewPagerItems =brandListItems;// preafManager.getActiveBrand().getFrame();\r\n        Log.e(\"Frames\",gson.toJson(preafManager.getActiveBrand().getFrame()));\r\n        if (viewPagerItems!=null && viewPagerItems.size()!=0) {\r\n            Log.e(\"BrandListSize\", String.valueOf(viewPagerItems.size()) + \"kkl\");\r\n            Gson gson = new Gson();\r\n            Log.e(\"Viewwwjhfjkdhsjk\", gson.toJson(viewPagerItems));\r\n            ViewPagerAdapterFrame viewPagerAdapter = new ViewPagerAdapterFrame(viewPagerItems, this);\r\n            viewPager.setAdapter(viewPagerAdapter);\r\n            dotscount = viewPagerAdapter.getCount();\r\n            int h = viewPager.getCurrentItem();\r\n            if (dotscount > 0) {\r\n                dots = new ImageView[dotscount];\r\n                for (int i = 0; i < dotscount; i++) {\r\n\r\n                    dots[i] = new ImageView(this);\r\n                    dots[i].setImageDrawable(ContextCompat.getDrawable(getApplicationContext(), R.drawable.non_active_dot));\r\n\r\n                    LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(LinearLayout.LayoutParams.WRAP_CONTENT, LinearLayout.LayoutParams.WRAP_CONTENT);\r\n\r\n                    params.setMargins(8, 0, 8, 0);\r\n\r\n                    sliderDotspanel.addView(dots[i], params);\r\n                }\r\n                dots[0].setImageDrawable(ContextCompat.getDrawable(getApplicationContext(), R.drawable.active_dot));\r\n            }\r\n            viewPager.addOnPageChangeListener(new ViewPager.OnPageChangeListener() {\r\n                @Override\r\n                public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) {\r\n\r\n                }\r\n\r\n                @Override\r\n                public void onPageSelected(int position) {\r\n\r\n                    for (int i = 0; i < dotscount; i++) {\r\n                        dots[i].setImageDrawable(ContextCompat.getDrawable(getApplicationContext(), R.drawable.non_active_dot));\r\n                    }\r\n                    try {\r\n                        selectedModelFromView = (FrameItem) viewPagerItems.get(position).clone();\r\n                    } catch (CloneNotSupportedException e) {\r\n                        e.printStackTrace();\r\n                    }\r\n\r\n                    //drawable = drawableFromUrl(selectedModelFromView.getFrame1());\r\n                    dots[position].setImageDrawable(ContextCompat.getDrawable(getApplicationContext(), R.drawable.active_dot));\r\n                }\r\n\r\n                @Override\r\n                public void onPageScrollStateChanged(int state) { }\r\n            });\r\n            try {\r\n                selectedModelFromView = (FrameItem) viewPagerItems.get(viewPager.getCurrentItem()).clone();\r\n            } catch (CloneNotSupportedException e) {\r\n                e.printStackTrace();\r\n            }\r\n        }\r\n        else{\r\n            AlertBox();\r\n        }\r\n\r\n\r\n\r\n    }\r\n    public void AlertBox() {\r\n        AlertDialog.Builder alertDialogBuilder = new AlertDialog.Builder(this);\r\n        alertDialogBuilder.setMessage(\"Your Frame Is Not Added ! Please Contact To Admin\");\r\n                alertDialogBuilder.setPositiveButton(\"Ok\",\r\n                        new DialogInterface.OnClickListener() {\r\n                            @Override\r\n                            public void onClick(DialogInterface arg0, int arg1) {\r\n                                onBackPressed();\r\n                            }\r\n                        });\r\n\r\n\r\n\r\n        AlertDialog alertDialog = alertDialogBuilder.create();\r\n        alertDialog.setCancelable(false);\r\n        alertDialog.show();\r\n\r\n    }\r\n    //For GetFrame\r\n    @Override public void alertListenerClick() {\r\n        requestAgain();\r\n    }\r\n    private void requestAgain() {\r\n        ActivityCompat.requestPermissions(act,\r\n                new String[]{Manifest.permission.CAMERA, Manifest.permission.WRITE_EXTERNAL_STORAGE,\r\n                        Manifest.permission.READ_EXTERNAL_STORAGE},\r\n                CodeReUse.ASK_PERMISSSION);\r\n    }\r\n    private void getFrame() {\r\n        Utility.Log(\"API : \", APIs.GET_FRAME);\r\n        StringRequest stringRequest = new StringRequest(Request.Method.POST, APIs.GET_FRAME,new Response.Listener<String>() {\r\n            @Override\r\n            public void onResponse(String response) {\r\n\r\n                Utility.Log(\"GET_FRAME : \", response);\r\n\r\n                try {\r\n                    JSONObject jsonObject = new JSONObject(response);\r\n\r\n                    brandListItems = ResponseHandler.HandleGetFrame(jsonObject);\r\n\r\n\r\n                        frameViewPager();\r\n\r\n\r\n                } catch (JSONException e) {\r\n                    e.printStackTrace();\r\n                }\r\n\r\n            }\r\n        },\r\n                new Response.ErrorListener() {\r\n                    @Override\r\n                    public void onErrorResponse(VolleyError error) {\r\n\r\n                        error.printStackTrace();\r\n//                        String body;\r\n//                        body = new String(error.networkResponse.data, StandardCharsets.UTF_8);\r\n//                        Log.e(\"Load-Get_Exam \", body);\r\n\r\n                    }\r\n                }\r\n        ) {\r\n            /**\r\n             * Passing some request headers*\r\n             */\r\n            @Override\r\n            public Map<String, String> getHeaders() throws AuthFailureError {\r\n                Map<String, String> params = new HashMap<String, String>();\r\n                params.put(\"Accept\", \"application/x-www-form-urlencoded\");//application/json\r\n                params.put(\"Content-Type\", \"application/x-www-form-urlencoded\");\r\n                params.put(\"Authorization\", \"Bearer\" + preafManager.getUserToken());\r\n                Log.e(\"Token\", params.toString());\r\n                return params;\r\n            }\r\n\r\n            @Override\r\n            protected Map<String, String> getParams() {\r\n                Map<String, String> params = new HashMap<>();\r\n                params.put(\"brand_id\",preafManager.getActiveBrand().getId());\r\n                    Utility.Log(\"POSTED-PARAMS-\", params.toString());\r\n                return params;\r\n            }\r\n\r\n        };\r\n\r\n        RequestQueue queue = Volley.newRequestQueue(act);\r\n        queue.add(stringRequest);\r\n    }\r\n    //For BackPrace......................................\r\n    @Override public void onBackPressed() {CodeReUse.activityBackPress(act); }\r\n    private class DownloadImageTask extends AsyncTask<String, Void, BitmapDrawable> {\r\n        String url;\r\n\r\n        public DownloadImageTask(String url) {\r\n            this.url = url;\r\n        }\r\n        protected BitmapDrawable doInBackground(String... urls) {\r\n            String urldisplay = urls[0];\r\n            Bitmap mIcon11 = null;\r\n            try {\r\n                Log.e(\"ErrorImage\", url);\r\n                InputStream in = new java.net.URL(url).openStream();\r\n                mIcon11 = BitmapFactory.decodeStream(in);\r\n            } catch (Exception e) {\r\n                Log.e(\"ErrorImage\", e.getMessage());\r\n                e.printStackTrace();\r\n            }\r\n            return new BitmapDrawable(getResources(), mIcon11);\r\n        }\r\n        protected void onPostExecute(BitmapDrawable result) {\r\n            //bmImage.setImageBitmap(result);\r\n            FrameDrawbable=result;\r\n            startSave();\r\n\r\n\r\n        } }\r\n\r\n\r\n\r\n\r\n    private void removeFavourit(final int removeFav) {\r\n\r\n        Utility.Log(\"API : \", APIs.REMOVE_FAVOURIT);\r\n        StringRequest stringRequest = new StringRequest(Request.Method.POST, APIs.REMOVE_FAVOURIT, new Response.Listener<String>() {\r\n            @Override\r\n            public void onResponse(String response) {\r\n\r\n                Utility.Log(\"REMOVE_FAVOURIT : \", response);\r\n\r\n                try {\r\n                    JSONObject jsonObject = new JSONObject(response);\r\n\r\n\r\n                } catch (JSONException e) {\r\n                    e.printStackTrace();\r\n                }\r\n\r\n            }\r\n        },\r\n                new Response.ErrorListener() {\r\n                    @Override\r\n                    public void onErrorResponse(VolleyError error) {\r\n\r\n                        error.printStackTrace();\r\n\r\n                    }\r\n                }\r\n        ) {\r\n            /**\r\n             * Passing some request headers*\r\n             */\r\n            @Override\r\n            public Map<String, String> getHeaders() throws AuthFailureError {\r\n                Map<String, String> params = new HashMap<String, String>();\r\n                params.put(\"Accept\", \"application/x-www-form-urlencoded\");//application/json\r\n                params.put(\"Content-Type\", \"application/x-www-form-urlencoded\");\r\n                params.put(\"Authorization\", \"Bearer\" + preafManager.getUserToken());\r\n                Log.e(\"Token\", params.toString());\r\n                return params;\r\n            }\r\n\r\n            @Override\r\n            protected Map<String, String> getParams() {\r\n                Map<String, String> params = new HashMap<>();\r\n                if (imageList != null) {\r\n                    params.put(\"brand_id\", preafManager.getActiveBrand().getId());\r\n                    params.put(\"image_id\", selectedObject.getImageid());\r\n                } else {\r\n                    params.put(\"brand_id\",  preafManager.getActiveBrand().getId());\r\n                    params.put(\"image_id\", selectedObject.getImageid());\r\n\r\n                }\r\n                params.put(\"type\", String.valueOf(removeFav));\r\n                Utility.Log(\"POSTED-PARAMS-\", params.toString());\r\n                return params;\r\n            }\r\n\r\n        };\r\n\r\n        RequestQueue queue = Volley.newRequestQueue(act);\r\n        queue.add(stringRequest);\r\n    }\r\n    public void captureScreenShort() {\r\n        getWindow().setFlags(WindowManager.LayoutParams.FLAG_SECURE, WindowManager.LayoutParams.FLAG_SECURE);\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/app/brandmania/Activity/ViewAllImage.java	(revision 90317a36ad9c00f7df6d99091ebb42ca4ae706b0)
+++ app/src/main/java/com/app/brandmania/Activity/ViewAllImage.java	(date 1605017715755)
@@ -100,7 +100,7 @@
         act = this;
         captureScreenShort();
         binding = DataBindingUtil.setContentView(act, R.layout.activity_view_all_image);
-
+        getWindow().setFlags(WindowManager.LayoutParams.FLAG_SECURE, WindowManager.LayoutParams.FLAG_SECURE);
         preafManager = new PreafManager(this);
 
         gson = new Gson();
@@ -293,6 +293,12 @@
         binding.viewRecoRecycler.setLayoutManager(mLayoutManager);
         binding.viewRecoRecycler.setHasFixedSize(true);
         binding.viewRecoRecycler.setAdapter(menuAddaptor);
+
+
+        if (getIntent().hasExtra("viewAll")){
+            selectedObject=menuModels.get(0);
+            LoadDataToUI();
+        }
     }
     //For GetImageCategory..............................
     private void getImageCtegory() {
Index: app/src/main/java/com/app/brandmania/Connection/BaseActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.app.brandmania.Connection;\r\n\r\nimport android.app.Activity;\r\nimport android.app.Dialog;\r\nimport android.content.BroadcastReceiver;\r\nimport android.content.Context;\r\nimport android.content.IntentFilter;\r\nimport android.graphics.drawable.ColorDrawable;\r\nimport android.net.ConnectivityManager;\r\nimport android.os.Build;\r\nimport android.os.Bundle;\r\nimport android.view.View;\r\nimport android.view.Window;\r\nimport android.view.WindowManager;\r\n\r\nimport androidx.appcompat.app.AppCompatActivity;\r\n\r\nimport com.google.gson.Gson;\r\nimport com.app.brandmania.Common.MakeMyBrandApp;\r\nimport com.app.brandmania.Common.PreafManager;\r\nimport com.app.brandmania.R;\r\nimport com.app.brandmania.Common.ResponseHandler;\r\nimport com.app.brandmania.Utils.CodeReUse;\r\n\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\nimport java.util.Observable;\r\nimport java.util.Observer;\r\n\r\npublic class BaseActivity extends AppCompatActivity implements Observer {\r\n    private static final String TAG = BaseActivity.class.getSimpleName();\r\n    private static Dialog noconnectionAlertDialog;\r\n    Activity act;\r\n    PreafManager prefManager;\r\n    MakeMyBrandApp studentApp;\r\n    private BroadcastReceiver mNetworkReceiver;\r\n    /*public FirebaseAuth mAuth;*/\r\n    private ResponseHandler responseHandler;\r\n    private boolean isLoading = false;\r\n    Gson gson;\r\n    private static void showNoConnectionDialog() {\r\n        if (!noconnectionAlertDialog.isShowing()) {\r\n            noconnectionAlertDialog.setContentView(R.layout.dialog_no_internet_connection);\r\n            noconnectionAlertDialog.setCancelable(false);\r\n            noconnectionAlertDialog.show();\r\n        }\r\n    }\r\n    public static void InternetError(boolean value) {\r\n        if (value) {\r\n            if (noconnectionAlertDialog.isShowing()) {\r\n                noconnectionAlertDialog.dismiss();\r\n\r\n            }\r\n        } else {\r\n            showNoConnectionDialog();\r\n\r\n        }\r\n    }\r\n    public void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n\r\n        act = this;\r\n// In Activity's onCreate() for instance\r\n        Window w = getWindow();\r\n        w.setFlags(WindowManager.LayoutParams.FLAG_LAYOUT_IN_SCREEN, WindowManager.LayoutParams.FLAG_LAYOUT_IN_SCREEN);\r\n        getWindow().getDecorView().setSystemUiVisibility(\r\n                View.SYSTEM_UI_FLAG_LAYOUT_STABLE\r\n                        | View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN);\r\n        prefManager = new PreafManager(this);\r\n        // responseHandler = new ResponseHandler();\r\n      //  profileModel = prefManager.getUsers();\r\n\r\n        gson = new Gson();\r\n        /*profileObject = new StoreUserData().getUsers(this);\r\n        prefManager = new PrefManager(this);\r\n        responseHandler = new ResponseHandler(this);*/\r\n\r\n\r\n\r\n\r\n\r\n        noconnectionAlertDialog = new Dialog(this);\r\n        noconnectionAlertDialog.getWindow().setBackgroundDrawable(new ColorDrawable(android.graphics.Color.TRANSPARENT));\r\n\r\n        ConnectivityManager connectivityManager = (ConnectivityManager) getSystemService(Context.CONNECTIVITY_SERVICE);\r\n\r\n        mNetworkReceiver = new NetworkChangeReceiver();\r\n        registerNetworkBroadcastForNougat();\r\n\r\n       /* if(prefManager.getUserToken() != null)\r\n            updateUser();*/\r\n\r\n    }\r\n    private void registerNetworkBroadcastForNougat() {\r\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {\r\n            registerReceiver(mNetworkReceiver, new IntentFilter(ConnectivityManager.CONNECTIVITY_ACTION));\r\n        }\r\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\r\n            registerReceiver(mNetworkReceiver, new IntentFilter(ConnectivityManager.CONNECTIVITY_ACTION));\r\n        }\r\n    }\r\n    protected Map<String, String> getHeader(int flag) {\r\n        Map<String, String> headers = new HashMap<>();\r\n        if (flag == CodeReUse.GET_JSON_HEADER) {\r\n            headers.put(\"Accept\", \"application/json\");\r\n            headers.put(\"Content-Type\", \"application/json\");\r\n        } else {\r\n            headers.put(\"Accept\", \"application/x-www-form-urlencoded\");\r\n            headers.put(\"Content-Type\", \"application/x-www-form-urlencoded\");\r\n        }\r\n\r\n        if (prefManager.getUserToken() != null) {\r\n            headers.put(\"Authorization\",\"Bearer\"+prefManager.getUserToken());\r\n        }\r\n        return headers;\r\n    }\r\n    private void unregisterNetworkChanges() {\r\n        try {\r\n            unregisterReceiver(mNetworkReceiver);\r\n        } catch (IllegalArgumentException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n    @Override protected void onDestroy() {\r\n        super.onDestroy();\r\n        unregisterNetworkChanges();\r\n    }\r\n    @Override public void onResume() {\r\n        super.onResume();\r\n    }\r\n    @Override public void update(Observable observable, Object data) {\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/app/brandmania/Connection/BaseActivity.java	(revision 90317a36ad9c00f7df6d99091ebb42ca4ae706b0)
+++ app/src/main/java/com/app/brandmania/Connection/BaseActivity.java	(date 1605017221249)
@@ -63,9 +63,12 @@
 // In Activity's onCreate() for instance
         Window w = getWindow();
         w.setFlags(WindowManager.LayoutParams.FLAG_LAYOUT_IN_SCREEN, WindowManager.LayoutParams.FLAG_LAYOUT_IN_SCREEN);
+
         getWindow().getDecorView().setSystemUiVisibility(
                 View.SYSTEM_UI_FLAG_LAYOUT_STABLE
                         | View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN);
+
+        getWindow().setFlags(WindowManager.LayoutParams.FLAG_SECURE, WindowManager.LayoutParams.FLAG_SECURE);
         prefManager = new PreafManager(this);
         // responseHandler = new ResponseHandler();
       //  profileModel = prefManager.getUsers();
Index: app/src/main/java/com/app/brandmania/Activity/HelpAndSupport.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.app.brandmania.Activity;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.databinding.DataBindingUtil;\r\n\r\nimport android.app.Activity;\r\nimport android.content.Intent;\r\nimport android.os.Bundle;\r\nimport android.view.View;\r\n\r\nimport com.app.brandmania.R;\r\nimport com.app.brandmania.Utils.CodeReUse;\r\nimport com.app.brandmania.databinding.ActivityHelpAndSupportBinding;\r\n\r\npublic class HelpAndSupport extends AppCompatActivity {\r\n    Activity act;\r\n    private ActivityHelpAndSupportBinding binding;\r\n\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        setTheme(R.style.AppTheme_material_theme);\r\n        super.onCreate(savedInstanceState);\r\n\r\n        act=this;\r\n        binding= DataBindingUtil.setContentView(act,R.layout.activity_help_and_support);\r\n        binding.BackButtonMember.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                onBackPressed();\r\n            }\r\n\r\n        });\r\n        binding.faqactivity.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                Intent i =new Intent(getApplicationContext(),FaqActivity.class);\r\n                startActivity(i);\r\n\r\n            }\r\n        });\r\n        binding.reportAndBug.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                Intent i =new Intent(getApplicationContext(),AddReportAndBug.class);\r\n                startActivity(i);\r\n            }\r\n        });\r\n    }\r\n    @Override\r\n    public void onBackPressed() {\r\n        CodeReUse.activityBackPress(act);\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/app/brandmania/Activity/HelpAndSupport.java	(revision 90317a36ad9c00f7df6d99091ebb42ca4ae706b0)
+++ app/src/main/java/com/app/brandmania/Activity/HelpAndSupport.java	(date 1605017481444)
@@ -6,6 +6,7 @@
 import android.content.Intent;
 import android.os.Bundle;
 import android.view.View;
+import android.view.WindowManager;
 
 import com.app.brandmania.R;
 import com.app.brandmania.Utils.CodeReUse;
@@ -20,7 +21,7 @@
     protected void onCreate(Bundle savedInstanceState) {
         setTheme(R.style.AppTheme_material_theme);
         super.onCreate(savedInstanceState);
-
+        getWindow().setFlags(WindowManager.LayoutParams.FLAG_SECURE, WindowManager.LayoutParams.FLAG_SECURE);
         act=this;
         binding= DataBindingUtil.setContentView(act,R.layout.activity_help_and_support);
         binding.BackButtonMember.setOnClickListener(new View.OnClickListener() {
Index: app/src/main/java/com/app/brandmania/Activity/VIewAllDownloadImage.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.app.brandmania.Activity;\r\n\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.databinding.DataBindingUtil;\r\nimport androidx.recyclerview.widget.GridLayoutManager;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport android.app.Activity;\r\nimport android.os.Bundle;\r\nimport android.util.Log;\r\nimport android.view.View;\r\nimport android.view.WindowManager;\r\n\r\nimport com.android.volley.AuthFailureError;\r\nimport com.android.volley.Request;\r\nimport com.android.volley.RequestQueue;\r\nimport com.android.volley.Response;\r\nimport com.android.volley.VolleyError;\r\nimport com.android.volley.toolbox.StringRequest;\r\nimport com.android.volley.toolbox.Volley;\r\nimport com.bumptech.glide.Glide;\r\nimport com.google.gson.Gson;\r\nimport com.app.brandmania.Adapter.DownloadFavoriteAdapter;\r\nimport com.app.brandmania.Adapter.FrameCateItemeInterFace;\r\nimport com.app.brandmania.Common.PreafManager;\r\nimport com.app.brandmania.Common.ResponseHandler;\r\nimport com.app.brandmania.Model.DownloadFavoriteItemList;\r\nimport com.app.brandmania.R;\r\nimport com.app.brandmania.Utils.APIs;\r\nimport com.app.brandmania.Utils.CodeReUse;\r\nimport com.app.brandmania.Utils.Utility;\r\nimport com.app.brandmania.databinding.ActivityVIewAllDownloadImageBinding;\r\n\r\n\r\nimport org.json.JSONException;\r\nimport org.json.JSONObject;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\n\r\npublic class VIewAllDownloadImage extends AppCompatActivity implements FrameCateItemeInterFace {\r\n    Activity act;\r\n    private ActivityVIewAllDownloadImageBinding binding;\r\n    DownloadFavoriteItemList selectedModelFromView;\r\n    ArrayList<DownloadFavoriteItemList> menuModels = new ArrayList<>();\r\n    PreafManager preafManager;\r\n    Gson gson;\r\n\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        act=this;\r\n        setTheme(R.style.AppTheme_material_theme);\r\n        super.onCreate(savedInstanceState);\r\n        act = this;\r\n        captureScreenShort();\r\n        binding = DataBindingUtil.setContentView(act, R.layout.activity_v_iew_all_download_image);\r\n        gson=new Gson();\r\n        preafManager=new PreafManager(act);\r\n        binding.backIcon.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                onBackPressed();\r\n            }\r\n        });\r\n        getDownloadListItem();\r\n        selectedModelFromView = gson.fromJson(getIntent().getStringExtra(\"detailsObj\"), DownloadFavoriteItemList.class);\r\n        Glide.with(act)\r\n                .load(selectedModelFromView.getImage())\r\n                .placeholder(R.drawable.placeholder)\r\n                .into(binding.recoImage);\r\n\r\n       // if (selectedModelFromView.getFrame()!=null)\r\n        Glide.with(act)\r\n                .load(selectedModelFromView.getFrame())\r\n                .into(binding.recoFrame);\r\n\r\n    }\r\n    public void setAdapter() {\r\n        DownloadFavoriteAdapter menuAddaptor = new DownloadFavoriteAdapter(menuModels, act);\r\n        RecyclerView.LayoutManager mLayoutManager = new GridLayoutManager(act,4);\r\n        binding.viewRecoRecycler.setLayoutManager(mLayoutManager);\r\n        binding.viewRecoRecycler.setHasFixedSize(true);\r\n        binding.viewRecoRecycler.setAdapter(menuAddaptor);\r\n    }\r\n\r\n    private void getDownloadListItem() {\r\n\r\n        Utility.Log(\"API : \", APIs.GET_DOWNLOADLIST_ITEM);\r\n        StringRequest stringRequest = new StringRequest(Request.Method.POST, APIs.GET_DOWNLOADLIST_ITEM , new Response.Listener<String>() {\r\n            @Override\r\n            public void onResponse(String response) {\r\n\r\n                Utility.Log(\"GET_DOWNLOADLIST_ITEM : \", response);\r\n\r\n                try {\r\n                    JSONObject jsonObject = new JSONObject(response);\r\n\r\n                    menuModels = ResponseHandler.HandleGetIDownloadFavoritGrid(jsonObject);\r\n\r\n                    if (menuModels != null && menuModels.size() != 0) {\r\n                        setAdapter();\r\n                    }\r\n\r\n\r\n                } catch (JSONException e) {\r\n                    e.printStackTrace();\r\n                }\r\n\r\n            }\r\n        },\r\n                new Response.ErrorListener() {\r\n                    @Override\r\n                    public void onErrorResponse(VolleyError error) {\r\n\r\n                        error.printStackTrace();\r\n//                        String body;\r\n//                        body = new String(error.networkResponse.data, StandardCharsets.UTF_8);\r\n//                        Log.e(\"Load-Get_Exam \", body);\r\n\r\n                    }\r\n                }\r\n        ) {\r\n            /**\r\n             * Passing some request headers*\r\n             */\r\n            @Override\r\n            public Map<String, String> getHeaders() throws AuthFailureError {\r\n                Map<String, String> params = new HashMap<String, String>();\r\n                params.put(\"Accept\", \"application/x-www-form-urlencoded\");//application/json\r\n                params.put(\"Content-Type\", \"application/x-www-form-urlencoded\");\r\n                params.put(\"Authorization\", \"Bearer\" + preafManager.getUserToken());\r\n                Log.e(\"Token\", params.toString());\r\n                return params;\r\n            }\r\n\r\n            @Override\r\n            protected Map<String, String> getParams() {\r\n                Map<String, String> params = new HashMap<>();\r\n                params.put(\"id\",preafManager.getActiveBrand().getId());\r\n//                if (imageList != null)\r\n//                    params.put(\"image_category_id\", imageList.getId());\r\n//                else\r\n//                    params.put(\"image_category_id\", selectedObject.getId());\r\n\r\n                Utility.Log(\"POSTED-PARAMS-\", params.toString());\r\n                return params;\r\n            }\r\n\r\n        };\r\n\r\n        RequestQueue queue = Volley.newRequestQueue(act);\r\n        queue.add(stringRequest);\r\n    }\r\n\r\n    @Override\r\n    public void FrameCateonItemSelection(int position, DownloadFavoriteItemList listModel) {\r\n        Glide.with(act)\r\n                .load(listModel.getImage())\r\n                .placeholder(R.drawable.placeholder)\r\n                .into(binding.recoImage);\r\n\r\n        // if (selectedModelFromView.getFrame()!=null)\r\n        Glide.with(act)\r\n                .load(listModel.getFrame())\r\n                .into(binding.recoFrame);\r\n    }\r\n    public void onBackPressed() {\r\n        CodeReUse.activityBackPress(act);\r\n    }\r\n    public void captureScreenShort()\r\n    {\r\n        getWindow().setFlags(WindowManager.LayoutParams.FLAG_SECURE, WindowManager.LayoutParams.FLAG_SECURE);\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/app/brandmania/Activity/VIewAllDownloadImage.java	(revision 90317a36ad9c00f7df6d99091ebb42ca4ae706b0)
+++ app/src/main/java/com/app/brandmania/Activity/VIewAllDownloadImage.java	(date 1605017481433)
@@ -56,6 +56,7 @@
         act = this;
         captureScreenShort();
         binding = DataBindingUtil.setContentView(act, R.layout.activity_v_iew_all_download_image);
+        getWindow().setFlags(WindowManager.LayoutParams.FLAG_SECURE, WindowManager.LayoutParams.FLAG_SECURE);
         gson=new Gson();
         preafManager=new PreafManager(act);
         binding.backIcon.setOnClickListener(new View.OnClickListener() {
Index: app/src/main/java/com/app/brandmania/Activity/RegistrationActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.app.brandmania.Activity;\r\n\r\nimport androidx.annotation.RequiresApi;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.databinding.DataBindingUtil;\r\n\r\nimport android.app.Activity;\r\nimport android.app.AlertDialog;\r\nimport android.content.Intent;\r\nimport android.content.res.ColorStateList;\r\nimport android.os.Build;\r\nimport android.os.Bundle;\r\nimport android.text.Html;\r\nimport android.util.Log;\r\nimport android.view.KeyEvent;\r\nimport android.view.View;\r\nimport android.view.WindowManager;\r\n\r\nimport com.android.volley.AuthFailureError;\r\nimport com.android.volley.Request;\r\nimport com.android.volley.RequestQueue;\r\nimport com.android.volley.Response;\r\nimport com.android.volley.VolleyError;\r\nimport com.android.volley.toolbox.StringRequest;\r\nimport com.android.volley.toolbox.Volley;\r\nimport com.androidnetworking.AndroidNetworking;\r\nimport com.androidnetworking.common.ANRequest;\r\nimport com.androidnetworking.common.Priority;\r\nimport com.androidnetworking.error.ANError;\r\nimport com.androidnetworking.interfaces.JSONObjectRequestListener;\r\nimport com.androidnetworking.interfaces.UploadProgressListener;\r\nimport com.app.brandmania.Common.ResponseHandler;\r\nimport com.app.brandmania.Model.BrandListItem;\r\nimport com.app.brandmania.Model.FrameItem;\r\nimport com.app.brandmania.Utils.APIs;\r\nimport com.app.brandmania.Common.PreafManager;\r\nimport com.app.brandmania.R;\r\nimport com.app.brandmania.Utils.CodeReUse;\r\nimport com.app.brandmania.Utils.Utility;\r\nimport com.app.brandmania.databinding.ActivityRegistrationBinding;\r\n\r\nimport org.json.JSONArray;\r\nimport org.json.JSONException;\r\nimport org.json.JSONObject;\r\n\r\nimport java.nio.charset.StandardCharsets;\r\nimport java.util.ArrayList;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\n\r\npublic class RegistrationActivity extends AppCompatActivity {\r\n    Activity act;\r\n    private ActivityRegistrationBinding binding;\r\n    private boolean isLoading=false;\r\n    private String is_completed=\"\";\r\n    int errorColor;\r\n    final int version = Build.VERSION.SDK_INT;\r\n    PreafManager preafManager;\r\n    AlertDialog.Builder alertDialogBuilder;\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        setTheme(R.style.AppTheme_material_theme);\r\n        super.onCreate(savedInstanceState);\r\n        act= this;\r\n        binding= DataBindingUtil.setContentView(act, R.layout.activity_registration);\r\n        this.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_HIDDEN);\r\n        alertDialogBuilder=new AlertDialog.Builder(act);\r\n        preafManager=new PreafManager(this);\r\n        binding.emailId.setImeActionLabel(\"Custom text\", KeyEvent.KEYCODE_ENTER);\r\n\r\n        binding.firstName.setNextFocusDownId(R.id.lastName);\r\n        binding.lastName.setNextFocusDownId(R.id.emailId);\r\n        binding.emailId.setNextFocusDownId(R.id.submitBtn);\r\n\r\n\r\n\r\n\r\n\r\n\r\n        preafManager.setEMAIL_Id(binding.emailId.getText().toString());\r\n        binding.submitBtn.setOnClickListener(new View.OnClickListener() {\r\n            @RequiresApi(api = Build.VERSION_CODES.M)\r\n            @Override\r\n            public void onClick(View v) {\r\n                Validation();\r\n\r\n            }\r\n        });\r\n        CodeReUse.RemoveError(binding.firstName, binding.userNameTextLayout);\r\n        CodeReUse.RemoveError(binding.lastName, binding.lastNameTextLayout);\r\n        CodeReUse.RemoveError(binding.emailId, binding.emailIdTextLayout);\r\n\r\n        String CreatAccount = \"Create<br>Account</font></br>\";\r\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {\r\n           // binding.signupText.setText(Html.fromHtml(Message, Html.FROM_HTML_MODE_COMPACT));\r\n            binding.creatAccount.setText(Html.fromHtml(CreatAccount, Html.FROM_HTML_MODE_COMPACT));\r\n        } else {\r\n            //binding.signupText.setText(Html.fromHtml(Message));\r\n            binding.creatAccount.setText(Html.fromHtml(CreatAccount));\r\n        }\r\n    }\r\n    @RequiresApi(api = Build.VERSION_CODES.M)\r\n    private void Validation() {\r\n\r\n        boolean isError = false;\r\n        boolean isFocus = false;\r\n\r\n        if (binding.firstName.getText().toString().length() == 0) {\r\n            isError = true;\r\n            isFocus = true;\r\n            binding.userNameTextLayout.setError(getString(R.string.enter_first_name));\r\n            binding.userNameTextLayout.setErrorTextColor(ColorStateList.valueOf(getResources().getColor(R.color.colorNavText)));\r\n            binding.firstName.requestFocus();\r\n\r\n        }\r\n\r\n\r\n\r\n        if (binding.lastName.getText().toString().length() == 0) {\r\n            isError = true;\r\n            isFocus = true;\r\n            binding.lastNameTextLayout.setError(getString(R.string.enter_last_name));\r\n            binding.lastNameTextLayout.setErrorTextColor(ColorStateList.valueOf(getResources().getColor(R.color.colorNavText)));\r\n            binding.lastName.requestFocus();\r\n\r\n        }\r\n        if (!binding.emailId.getText().toString().equals(\"\")) {\r\n            if (!CodeReUse.isEmailValid(binding.emailId.getText().toString())) {\r\n                isError = true;\r\n                isFocus = true;\r\n                binding.emailIdTextLayout.setError(getString(R.string.enter_valid_email_address));\r\n                binding.emailIdTextLayout.setErrorTextColor(ColorStateList.valueOf(getResources().getColor(R.color.colorNavText)));\r\n                binding.emailId.requestFocus();\r\n\r\n            }\r\n            else\r\n            {\r\n\r\n            }\r\n\r\n        }\r\n        else {\r\n            if (binding.emailId.getText().toString().length() == 0) {\r\n                isError = true;\r\n                isFocus = true;\r\n                binding.emailIdTextLayout.setError(getString(R.string.enter_email_id));\r\n                binding.emailIdTextLayout.setErrorTextColor(ColorStateList.valueOf(getResources().getColor(R.color.colorNavText)));\r\n                          binding.emailId.requestFocus();\r\n\r\n            }\r\n        }\r\n        if (!isError)\r\n        {\r\n            addUser();\r\n        }\r\n\r\n    }\r\n\r\n    private void addUser() {\r\n        if (isLoading)\r\n            return;\r\n        isLoading = true;\r\n        Utility.showProgress(act);\r\n        Log.e(\"API\", APIs.USER_REGISTRATION);\r\n        Log.w(\"Tokennn\", preafManager.getUserToken());\r\n        ANRequest.MultiPartBuilder request = AndroidNetworking.upload(APIs.USER_REGISTRATION)\r\n                .addHeaders(\"Accept\", \"application/json\")\r\n                .addHeaders(\"Content-Type\", \"application/json\")\r\n                .addHeaders(\"Authorization\", \"Bearer \"+preafManager.getUserToken())\r\n                .addMultipartParameter(\"first_name\", binding.firstName.getText().toString())\r\n                .addMultipartParameter(\"last_name\", binding.lastName.getText().toString())\r\n                .addMultipartParameter(\"email\", binding.emailId.getText().toString())\r\n                .setTag(\"Add User\")\r\n                .setPriority(Priority.HIGH);\r\n        preafManager.setEMAIL_Id(binding.emailId.getText().toString());\r\n        request.build().setUploadProgressListener(new UploadProgressListener() {\r\n            @Override\r\n            public void onProgress(long bytesUploaded, long totalBytes) {\r\n                // do anything with progress\r\n            }\r\n        })\r\n                .getAsJSONObject(new JSONObjectRequestListener() {\r\n                    @Override\r\n                    public void onResponse(JSONObject response) {\r\n                        isLoading = false;\r\n                        Utility.dismissProgress();\r\n                        Utility.Log(\"Verify-Response\", response);\r\n\r\n                        try {\r\n\r\n                            if (response.getBoolean(\"status\")) {\r\n                                preafManager.setIs_Registration(true);\r\n\r\n                                JSONObject jsonArray = response.getJSONObject(\"data\");\r\n                                is_completed= jsonArray.getString(\"is_completed\");\r\n\r\n                                        preafManager.loginStep(is_completed);\r\n                                        if (is_completed.equals(\"1\"))\r\n                                        {\r\n                                            Intent i = new Intent(act, AddBranddActivity.class);\r\n                                            i.addCategory(Intent.CATEGORY_HOME);\r\n                                            i.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\r\n                                            startActivity(i);\r\n                                            overridePendingTransition(R.anim.slide_right_in, R.anim.slide_right_out);\r\n                                            finish();\r\n                                        }\r\n                                        if (is_completed.equals(\"2\"))\r\n                                        {\r\n\r\n                                            getBrandList();\r\n\r\n//                                    Intent i = new Intent(act, HomeActivity.class);\r\n//                                    i.addCategory(Intent.CATEGORY_HOME);\r\n//                                    i.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\r\n//                                    startActivity(i);\r\n//                                    overridePendingTransition(R.anim.slide_right_in, R.anim.slide_right_out);\r\n//                                    finish();\r\n                                        }\r\n\r\n\r\n\r\n\r\n                            }\r\n                        }\r\n                        catch (JSONException e) {\r\n                            e.printStackTrace();\r\n                        }\r\n\r\n\r\n\r\n                    }\r\n\r\n                    @Override\r\n                    public void onError(ANError error) {\r\n                        isLoading = false;\r\n                        Utility.dismissProgress();\r\n                        if (error.getErrorCode() != 0) {\r\n                            Log.e(\"onError errorCode : \", String.valueOf(error.getErrorCode()));\r\n                            Log.e(\"onError errorBody : \", error.getErrorBody());\r\n                            Log.e(\"onError errorDetail : \", error.getErrorDetail());\r\n                        } else {\r\n                            Log.e(\"onError errorDetail : \", error.getErrorDetail());\r\n                        }\r\n                    }\r\n                });\r\n\r\n    }\r\n    private void getBrandList() {\r\n        Utility.Log(\"API : \", APIs.GET_BRAND);\r\n        StringRequest stringRequest = new StringRequest(Request.Method.POST, APIs.GET_BRAND, new Response.Listener<String>() {\r\n            @Override\r\n            public void onResponse(String response) {\r\n                Log.e(\"addbrandresponce\",response);\r\n                ArrayList<BrandListItem> brandListItems=new ArrayList<>();\r\n                try {\r\n                    JSONObject res=new JSONObject(response);\r\n\r\n                    JSONArray jsonArray1 = res.getJSONArray(\"data\");\r\n                    for (int i=0;i<jsonArray1.length();i++)\r\n                    {\r\n                        JSONObject jsonObject=jsonArray1.getJSONObject(i);\r\n                        BrandListItem brandListItemm=new BrandListItem();\r\n                        brandListItemm.setId(ResponseHandler.getString(jsonObject,\"id\"));\r\n                        brandListItemm.setCategoryId(ResponseHandler.getString(jsonObject, \"br_category_id\"));\r\n                        brandListItemm.setCategoryName(ResponseHandler.getString(jsonObject, \"br_category_name\"));\r\n                        brandListItemm.setName(ResponseHandler.getString(jsonObject,\"br_name\"));\r\n                        brandListItemm.setWebsite(ResponseHandler.getString(jsonObject,\"br_website\"));\r\n                        brandListItemm.setEmail(ResponseHandler.getString(jsonObject,\"br_email\"));\r\n                        brandListItemm.setAddress(ResponseHandler.getString(jsonObject,\"br_address\"));\r\n                        brandListItemm.setLogo(ResponseHandler.getString(jsonObject,\"br_logo\"));\r\n                        JSONArray jsonArray = jsonObject.getJSONArray(\"br_frame\");\r\n                        ArrayList<FrameItem>frameItems=null;\r\n                        frameItems = new ArrayList<>();\r\n                        for (int j = 0; j < jsonArray.length(); j++) {\r\n                            JSONObject jsonObject1 = jsonArray.getJSONObject(j);\r\n                            FrameItem frameItem = new FrameItem();\r\n                            frameItem.setFrame1(ResponseHandler.getString(jsonObject,\"fream_base_url\")+\"/\"+ResponseHandler.getString(jsonObject1, \"frame_path\"));\r\n                            frameItem.setFrameId(ResponseHandler.getString(jsonObject1, \"id\"));\r\n\r\n                            frameItems.add(frameItem);\r\n                        }\r\n\r\n                        brandListItemm.setFrame(frameItems);\r\n                        brandListItems.add(brandListItemm);\r\n                    }\r\n\r\n\r\n                    preafManager.setAddBrandList(brandListItems);\r\n                    preafManager.setIS_Brand(true);\r\n\r\n                    if (brandListItems!=null && brandListItems.size()!=0){\r\n                        preafManager.setActiveBrand(brandListItems.get(0));\r\n                    }\r\n\r\n\r\n                    Intent i = new Intent(act, HomeActivity.class);\r\n                    startActivity(i);\r\n                    overridePendingTransition(R.anim.right_enter, R.anim.left_out);\r\n                    finish();\r\n\r\n                }\r\n                catch (JSONException e) {\r\n                    e.printStackTrace();\r\n                }\r\n\r\n            }\r\n        },\r\n                new Response.ErrorListener() {\r\n                    @Override\r\n                    public void onErrorResponse(VolleyError error) {\r\n\r\n                        error.printStackTrace();\r\n                        String body;\r\n                        body = new String(error.networkResponse.data, StandardCharsets.UTF_8);\r\n                        Log.e(\"Error \", body);\r\n\r\n\r\n                    }\r\n                }\r\n        ) {\r\n            /**\r\n             * Passing some request headers*\r\n             */\r\n\r\n            @Override\r\n            public Map<String, String> getHeaders() throws AuthFailureError {\r\n                Map<String, String> params = new HashMap<String, String>();\r\n                params.put(\"Accept\", \"application/json\");\r\n                params.put(\"Content-Type\", \"application/json\");\r\n                params.put(\"Authorization\",\"Bearer \"+preafManager.getUserToken());\r\n                Log.e(\"Token\",params.toString());\r\n                return params;\r\n            }\r\n\r\n\r\n            @Override\r\n            protected Map<String, String> getParams() {\r\n                Map<String, String> params = new HashMap<>();\r\n\r\n                Log.e(\"DateNdClass\", params.toString());\r\n                //params.put(\"upload_type_id\", String.valueOf(Constant.ADD_NOTICE));\r\n                Utility.Log(\"POSTED-PARAMS-\", params.toString());\r\n                return params;\r\n            }\r\n\r\n        };\r\n\r\n        RequestQueue queue = Volley.newRequestQueue(getApplicationContext());\r\n        queue.add(stringRequest);\r\n    }\r\n    public void captureScreenShort()\r\n    {\r\n        getWindow().setFlags(WindowManager.LayoutParams.FLAG_SECURE, WindowManager.LayoutParams.FLAG_SECURE);\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/app/brandmania/Activity/RegistrationActivity.java	(revision 90317a36ad9c00f7df6d99091ebb42ca4ae706b0)
+++ app/src/main/java/com/app/brandmania/Activity/RegistrationActivity.java	(date 1605017481424)
@@ -64,6 +64,7 @@
         act= this;
         binding= DataBindingUtil.setContentView(act, R.layout.activity_registration);
         this.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_HIDDEN);
+        getWindow().setFlags(WindowManager.LayoutParams.FLAG_SECURE, WindowManager.LayoutParams.FLAG_SECURE);
         alertDialogBuilder=new AlertDialog.Builder(act);
         preafManager=new PreafManager(this);
         binding.emailId.setImeActionLabel("Custom text", KeyEvent.KEYCODE_ENTER);
Index: .idea/compiler.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/compiler.xml	(date 1605017099620)
+++ .idea/compiler.xml	(date 1605017099620)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="CompilerConfiguration">
+    <bytecodeTargetLevel target="1.8" />
+  </component>
+</project>
\ No newline at end of file
Index: app/src/main/java/com/app/brandmania/Activity/ViewAllFavouritActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.app.brandmania.Activity;\r\n\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.databinding.DataBindingUtil;\r\nimport androidx.recyclerview.widget.GridLayoutManager;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport android.app.Activity;\r\nimport android.os.Bundle;\r\nimport android.util.Log;\r\nimport android.view.View;\r\nimport android.view.WindowManager;\r\n\r\nimport com.android.volley.AuthFailureError;\r\nimport com.android.volley.Request;\r\nimport com.android.volley.RequestQueue;\r\nimport com.android.volley.Response;\r\nimport com.android.volley.VolleyError;\r\nimport com.android.volley.toolbox.StringRequest;\r\nimport com.android.volley.toolbox.Volley;\r\nimport com.bumptech.glide.Glide;\r\nimport com.google.gson.Gson;\r\nimport com.app.brandmania.Adapter.DownloadFavoriteAdapter;\r\nimport com.app.brandmania.Adapter.FrameCateItemeInterFace;\r\nimport com.app.brandmania.Common.PreafManager;\r\nimport com.app.brandmania.Common.ResponseHandler;\r\nimport com.app.brandmania.Model.DownloadFavoriteItemList;\r\nimport com.app.brandmania.R;\r\nimport com.app.brandmania.Utils.APIs;\r\nimport com.app.brandmania.Utils.CodeReUse;\r\nimport com.app.brandmania.Utils.Utility;\r\nimport com.app.brandmania.databinding.ActivityVIewAllDownloadImageBinding;\r\nimport com.app.brandmania.databinding.ActivityViewAllFavouritBinding;\r\n\r\nimport org.json.JSONException;\r\nimport org.json.JSONObject;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\n\r\npublic class ViewAllFavouritActivity extends AppCompatActivity implements FrameCateItemeInterFace {\r\n    Activity act;\r\n    private ActivityViewAllFavouritBinding binding;\r\n    DownloadFavoriteItemList selectedModelFromView;\r\n    ArrayList<DownloadFavoriteItemList> menuModels = new ArrayList<>();\r\n    PreafManager preafManager;\r\n    Gson gson;\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        act=this;\r\n        setTheme(R.style.AppTheme_material_theme);\r\n        super.onCreate(savedInstanceState);\r\n        act = this;\r\n        captureScreenShort();\r\n        binding = DataBindingUtil.setContentView(act, R.layout.activity_view_all_favourit);\r\n        gson=new Gson();\r\n        preafManager=new PreafManager(act);\r\n        binding.backIcon.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                onBackPressed();\r\n            }\r\n        });\r\n        getFavoritListItem();\r\n        selectedModelFromView = gson.fromJson(getIntent().getStringExtra(\"detailsObjj\"), DownloadFavoriteItemList.class);\r\n        Glide.with(act)\r\n                .load(selectedModelFromView.getImage())\r\n                .placeholder(R.drawable.placeholder)\r\n                .into(binding.recoImage);\r\n\r\n        // if (selectedModelFromView.getFrame()!=null)\r\n        Glide.with(act)\r\n                .load(selectedModelFromView.getFrame())\r\n                .into(binding.recoFrame);\r\n\r\n    }\r\n    public void setAdapter() {\r\n        DownloadFavoriteAdapter menuAddaptor = new DownloadFavoriteAdapter(menuModels, act);\r\n        RecyclerView.LayoutManager mLayoutManager = new GridLayoutManager(act,4);\r\n        binding.viewRecoRecycler.setLayoutManager(mLayoutManager);\r\n        binding.viewRecoRecycler.setHasFixedSize(true);\r\n        binding.viewRecoRecycler.setAdapter(menuAddaptor);\r\n    }\r\n    private void getFavoritListItem() {\r\n        Utility.Log(\"API : \", APIs.GET_FAVORITLIST_ITEM);\r\n        StringRequest stringRequest = new StringRequest(Request.Method.POST, APIs.GET_FAVORITLIST_ITEM , new Response.Listener<String>() {\r\n            @Override\r\n            public void onResponse(String response) {\r\n\r\n                Utility.Log(\"GET_FAVORITLIST_ITEM : \", response);\r\n\r\n                try {\r\n                    JSONObject jsonObject = new JSONObject(response);\r\n                    menuModels = ResponseHandler.HandleGetIFavoritListGrid(jsonObject);\r\n\r\n\r\n                        setAdapter();\r\n\r\n                } catch (JSONException e) {\r\n                    e.printStackTrace();\r\n                }\r\n\r\n            }\r\n        },\r\n                new Response.ErrorListener() {\r\n                    @Override\r\n                    public void onErrorResponse(VolleyError error) {\r\n\r\n                        error.printStackTrace();\r\n//                        String body;\r\n//                        body = new String(error.networkResponse.data, StandardCharsets.UTF_8);\r\n//                        Log.e(\"Load-Get_Exam \", body);\r\n\r\n                    }\r\n                }\r\n        ) {\r\n            /**\r\n             * Passing some request headers*\r\n             */\r\n            @Override\r\n            public Map<String, String> getHeaders() throws AuthFailureError {\r\n                Map<String, String> params = new HashMap<String, String>();\r\n                params.put(\"Accept\", \"application/x-www-form-urlencoded\");//application/json\r\n                params.put(\"Content-Type\", \"application/x-www-form-urlencoded\");\r\n                params.put(\"Authorization\", \"Bearer\" + preafManager.getUserToken());\r\n                Log.e(\"Token\", params.toString());\r\n                return params;\r\n            }\r\n\r\n            @Override\r\n            protected Map<String, String> getParams() {\r\n                Map<String, String> params = new HashMap<>();\r\n                params.put(\"id\",preafManager.getActiveBrand().getId());\r\n//                if (imageList != null)\r\n//                    params.put(\"image_category_id\", imageList.getId());\r\n//                else\r\n//                    params.put(\"image_category_id\", selectedObject.getId());\r\n\r\n                Utility.Log(\"POSTED-PARAMS-\", params.toString());\r\n                return params;\r\n            }\r\n\r\n        };\r\n\r\n        RequestQueue queue = Volley.newRequestQueue(act);\r\n        queue.add(stringRequest);\r\n    }\r\n    @Override\r\n    public void FrameCateonItemSelection(int position, DownloadFavoriteItemList listModel) {\r\n        Glide.with(act)\r\n                .load(listModel.getImage())\r\n                .placeholder(R.drawable.placeholder)\r\n                .into(binding.recoImage);\r\n\r\n        // if (selectedModelFromView.getFrame()!=null)\r\n        Glide.with(act)\r\n                .load(listModel.getFrame())\r\n                .into(binding.recoFrame);\r\n    }\r\n    public void onBackPressed() {\r\n        CodeReUse.activityBackPress(act);\r\n    }\r\n    public void captureScreenShort()\r\n    {\r\n        getWindow().setFlags(WindowManager.LayoutParams.FLAG_SECURE, WindowManager.LayoutParams.FLAG_SECURE);\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/app/brandmania/Activity/ViewAllFavouritActivity.java	(revision 90317a36ad9c00f7df6d99091ebb42ca4ae706b0)
+++ app/src/main/java/com/app/brandmania/Activity/ViewAllFavouritActivity.java	(date 1605017481409)
@@ -54,6 +54,7 @@
         act = this;
         captureScreenShort();
         binding = DataBindingUtil.setContentView(act, R.layout.activity_view_all_favourit);
+        getWindow().setFlags(WindowManager.LayoutParams.FLAG_SECURE, WindowManager.LayoutParams.FLAG_SECURE);
         gson=new Gson();
         preafManager=new PreafManager(act);
         binding.backIcon.setOnClickListener(new View.OnClickListener() {
Index: app/src/main/java/com/app/brandmania/Activity/OnlyTextEditorActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.app.brandmania.Activity;\r\n\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.databinding.DataBindingUtil;\r\n\r\nimport android.app.Activity;\r\nimport android.graphics.Color;\r\nimport android.graphics.Paint;\r\nimport android.graphics.Typeface;\r\nimport android.os.Bundle;\r\nimport android.view.View;\r\nimport android.widget.Toast;\r\n\r\nimport com.google.android.material.tabs.TabLayout;\r\nimport com.app.brandmania.Adapter.FrameInterFace;\r\nimport com.app.brandmania.Adapter.ItemeInterFace;\r\nimport com.app.brandmania.Adapter.MultiListItem;\r\n\r\nimport com.app.brandmania.Interface.IItaliTextEvent;\r\nimport com.app.brandmania.Interface.ITextBoldEvent;\r\nimport com.app.brandmania.Interface.ITextColorChangeEvent;\r\nimport com.app.brandmania.Interface.IUnderLineTextEvent;\r\nimport com.app.brandmania.R;\r\nimport com.app.brandmania.Utils.IFontChangeEvent;\r\nimport com.app.brandmania.databinding.ActivityOnlyTextEditorBinding;\r\n\r\n\r\nimport static com.app.brandmania.Utils.Utility.Log;\r\n\r\npublic class OnlyTextEditorActivity extends AppCompatActivity implements ItemeInterFace, FrameInterFace, ITextColorChangeEvent, IFontChangeEvent, ITextBoldEvent, IItaliTextEvent, IUnderLineTextEvent {\r\n    Activity act;\r\n    private ActivityOnlyTextEditorBinding binding;\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        setTheme(R.style.AppTheme_material_theme);\r\n        super.onCreate(savedInstanceState);\r\n        act=this;\r\n        binding= DataBindingUtil.setContentView(act,R.layout.activity_only_text_editor);\r\n        binding.tabLayout.addTab(binding.tabLayout.newTab().setText(convertFirstUpper(\"Background\")));\r\n        binding.tabLayout.addTab(binding.tabLayout.newTab().setText(\"Frame\"));\r\n        binding.tabLayout.addTab(binding.tabLayout.newTab().setText(convertFirstUpper(\"Texture\")));\r\n        binding.tabLayout.addTab(binding.tabLayout.newTab().setText(convertFirstUpper(\"Text\")));\r\n        binding.tabLayout.setTabTextColors(Color.parseColor(\"#727272\"), Color.parseColor(\"#ad2753\"));\r\n        binding.tabLayout.setTabGravity(TabLayout.GRAVITY_FILL);\r\n        final EditTabAdapter adapter = new EditTabAdapter(act, getSupportFragmentManager(), binding.tabLayout.getTabCount());\r\n        binding.viewPager.setAdapter(adapter);\r\n        binding.viewPager.addOnPageChangeListener(new TabLayout.TabLayoutOnPageChangeListener(binding.tabLayout));\r\n        binding.textEdit.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                binding.clorframeLayout.setVisibility(View.VISIBLE);\r\n                binding.viewPager.setCurrentItem(3);\r\n            }\r\n        });\r\n        binding.tabLayout.addOnTabSelectedListener(new TabLayout.OnTabSelectedListener() {\r\n            @Override\r\n            public void onTabSelected(TabLayout.Tab tab) {\r\n                binding.viewPager.setCurrentItem(tab.getPosition());\r\n            }\r\n\r\n            @Override\r\n            public void onTabUnselected(TabLayout.Tab tab) {\r\n            }\r\n\r\n            @Override\r\n            public void onTabReselected(TabLayout.Tab tab) {\r\n            }\r\n        });\r\n\r\n        binding.main.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                if (binding.clorframeLayout.getVisibility()==View.GONE)\r\n                {\r\n                    binding.clorframeLayout.setVisibility(View.VISIBLE);\r\n                    binding.textClick.setVisibility(View.GONE);\r\n                }\r\n\r\n            }\r\n        });\r\n\r\n    }\r\n    public static String convertFirstUpper(String str) {\r\n\r\n        if (str == null || str.isEmpty()) {\r\n            return str;\r\n        }\r\n        Log(\"FirstLetter\", str.substring(0, 1) + \"    \" + str.substring(1));\r\n        return str.substring(0, 1).toUpperCase() + str.substring(1);\r\n    }\r\n\r\n    @Override\r\n    public void onItemSelection(int position, MultiListItem listModel) {\r\n        binding.recoImageee.setImageResource(listModel.getImage());\r\n    }\r\n\r\n    @Override\r\n    public void onFrameItemSelection(int position, MultiListItem listModel) {\r\n        binding.recoframe.setImageResource(listModel.getImage());\r\n    }\r\n\r\n    @Override\r\n    public void onColorItemChange(int colorcode) {\r\n        binding.textEdit.setTextColor(colorcode);\r\n    }\r\n\r\n    @Override\r\n    public void onFontChangeListenert(String Font) {\r\n        Typeface custom_font = Typeface.createFromAsset(act.getAssets(), Font);\r\n        binding.textEdit.setTypeface(custom_font);\r\n    }\r\n\r\n    @Override\r\n    public void onBoldTextChange(boolean Bold)\r\n    {\r\n        if (Bold) {\r\n            Toast.makeText(act,\"true\",Toast.LENGTH_SHORT).show();\r\n            binding.textEdit.setTypeface(  binding.textEdit.getTypeface(), Typeface.BOLD);\r\n\r\n        }else {\r\n            Toast.makeText(act,\"false\",Toast.LENGTH_SHORT).show();\r\n            binding.textEdit.setTypeface(null, Typeface.NORMAL);\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n    @Override\r\n    public void onItalicTextChange(boolean Italic) {\r\n        if (Italic) {\r\n            Toast.makeText(act,\"true\",Toast.LENGTH_SHORT).show();\r\n            binding.textEdit.setTypeface(  binding.textEdit.getTypeface(), Typeface.ITALIC);\r\n\r\n        }else {\r\n            Toast.makeText(act,\"false\",Toast.LENGTH_SHORT).show();\r\n            binding.textEdit.setTypeface(null, Typeface.NORMAL);\r\n\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void onUnderLineItalic(boolean Left) {\r\n        if (Left) {\r\n            Toast.makeText(act,\"true\",Toast.LENGTH_SHORT).show();\r\n            binding.textEdit.setPaintFlags( binding.textEdit.getPaintFlags() | Paint.UNDERLINE_TEXT_FLAG);\r\n        }\r\n        else\r\n        {\r\n            Toast.makeText(act,\"false\",Toast.LENGTH_SHORT).show();\r\n          //  .setTypeface(null, Typeface.NORMAL);\r\n            binding.textEdit.setPaintFlags(0);\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/app/brandmania/Activity/OnlyTextEditorActivity.java	(revision 90317a36ad9c00f7df6d99091ebb42ca4ae706b0)
+++ app/src/main/java/com/app/brandmania/Activity/OnlyTextEditorActivity.java	(date 1605017481404)
@@ -9,6 +9,7 @@
 import android.graphics.Typeface;
 import android.os.Bundle;
 import android.view.View;
+import android.view.WindowManager;
 import android.widget.Toast;
 
 import com.google.android.material.tabs.TabLayout;
@@ -35,6 +36,7 @@
         setTheme(R.style.AppTheme_material_theme);
         super.onCreate(savedInstanceState);
         act=this;
+        getWindow().setFlags(WindowManager.LayoutParams.FLAG_SECURE, WindowManager.LayoutParams.FLAG_SECURE);
         binding= DataBindingUtil.setContentView(act,R.layout.activity_only_text_editor);
         binding.tabLayout.addTab(binding.tabLayout.newTab().setText(convertFirstUpper("Background")));
         binding.tabLayout.addTab(binding.tabLayout.newTab().setText("Frame"));
Index: app/src/main/java/com/app/brandmania/Activity/PartnerProgramActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.app.brandmania.Activity;\r\n\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.databinding.DataBindingUtil;\r\n\r\nimport android.app.Activity;\r\nimport android.os.Bundle;\r\nimport android.view.View;\r\n\r\nimport com.app.brandmania.R;\r\nimport com.app.brandmania.Utils.CodeReUse;\r\nimport com.app.brandmania.databinding.ActivityPartnerProgramBinding;\r\n\r\npublic class PartnerProgramActivity extends AppCompatActivity {\r\n    Activity act;\r\n    private ActivityPartnerProgramBinding binding;\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        setTheme(R.style.AppTheme_material_theme);\r\n        super.onCreate(savedInstanceState);\r\n        act=this;\r\n        binding= DataBindingUtil.setContentView(act,R.layout.activity_partner_program);\r\n        binding.BackButtonMember.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                onBackPressed();\r\n            }\r\n\r\n        });\r\n    }\r\n    @Override\r\n    public void onBackPressed() {\r\n        CodeReUse.activityBackPress(act);\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/app/brandmania/Activity/PartnerProgramActivity.java	(revision 90317a36ad9c00f7df6d99091ebb42ca4ae706b0)
+++ app/src/main/java/com/app/brandmania/Activity/PartnerProgramActivity.java	(date 1605017481379)
@@ -6,6 +6,7 @@
 import android.app.Activity;
 import android.os.Bundle;
 import android.view.View;
+import android.view.WindowManager;
 
 import com.app.brandmania.R;
 import com.app.brandmania.Utils.CodeReUse;
@@ -19,6 +20,7 @@
     protected void onCreate(Bundle savedInstanceState) {
         setTheme(R.style.AppTheme_material_theme);
         super.onCreate(savedInstanceState);
+        getWindow().setFlags(WindowManager.LayoutParams.FLAG_SECURE, WindowManager.LayoutParams.FLAG_SECURE);
         act=this;
         binding= DataBindingUtil.setContentView(act,R.layout.activity_partner_program);
         binding.BackButtonMember.setOnClickListener(new View.OnClickListener() {
Index: .idea/gradle.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"GradleMigrationSettings\" migrationVersion=\"1\" />\r\n  <component name=\"GradleSettings\">\r\n    <option name=\"linkedExternalProjectsSettings\">\r\n      <GradleProjectSettings>\r\n        <option name=\"testRunner\" value=\"PLATFORM\" />\r\n        <option name=\"distributionType\" value=\"DEFAULT_WRAPPED\" />\r\n        <option name=\"externalProjectPath\" value=\"$PROJECT_DIR$\" />\r\n        <option name=\"gradleJvm\" value=\"1.8\" />\r\n        <option name=\"modules\">\r\n          <set>\r\n            <option value=\"$PROJECT_DIR$\" />\r\n            <option value=\"$PROJECT_DIR$/app\" />\r\n          </set>\r\n        </option>\r\n        <option name=\"resolveModulePerSourceSet\" value=\"false\" />\r\n      </GradleProjectSettings>\r\n    </option>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/gradle.xml	(revision 90317a36ad9c00f7df6d99091ebb42ca4ae706b0)
+++ .idea/gradle.xml	(date 1605016944032)
@@ -15,6 +15,7 @@
           </set>
         </option>
         <option name="resolveModulePerSourceSet" value="false" />
+        <option name="useQualifiedModuleNames" value="true" />
       </GradleProjectSettings>
     </option>
   </component>
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ProjectRootManager\" version=\"2\" languageLevel=\"JDK_1_8\" project-jdk-name=\"1.8\" project-jdk-type=\"JavaSDK\">\r\n    <output url=\"file://$PROJECT_DIR$/build/classes\" />\r\n  </component>\r\n  <component name=\"ProjectType\">\r\n    <option name=\"id\" value=\"Android\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/misc.xml	(revision 90317a36ad9c00f7df6d99091ebb42ca4ae706b0)
+++ .idea/misc.xml	(date 1605017099498)
@@ -1,6 +1,6 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
-  <component name="ProjectRootManager" version="2" languageLevel="JDK_1_8" project-jdk-name="1.8" project-jdk-type="JavaSDK">
+  <component name="ProjectRootManager" version="2" languageLevel="JDK_1_8" default="true" project-jdk-name="1.8" project-jdk-type="JavaSDK">
     <output url="file://$PROJECT_DIR$/build/classes" />
   </component>
   <component name="ProjectType">
Index: app/src/main/java/com/app/brandmania/Activity/ColorAndTextEditActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.app.brandmania.Activity;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.core.app.ActivityCompat;\r\nimport androidx.core.content.ContextCompat;\r\nimport androidx.databinding.DataBindingUtil;\r\nimport androidx.recyclerview.widget.LinearLayoutManager;\r\n\r\nimport android.Manifest;\r\nimport android.app.Activity;\r\nimport android.app.AlertDialog;\r\nimport android.app.ProgressDialog;\r\nimport android.content.DialogInterface;\r\nimport android.content.pm.PackageManager;\r\nimport android.graphics.Bitmap;\r\nimport android.graphics.Canvas;\r\nimport android.graphics.Color;\r\nimport android.graphics.drawable.BitmapDrawable;\r\nimport android.net.Uri;\r\nimport android.os.Bundle;\r\nimport android.os.Environment;\r\nimport android.provider.MediaStore;\r\nimport android.util.Log;\r\nimport android.view.View;\r\nimport android.view.Window;\r\nimport android.view.WindowManager;\r\n\r\nimport com.google.android.material.snackbar.Snackbar;\r\nimport com.google.android.material.tabs.TabLayout;\r\nimport com.app.brandmania.Adapter.EditingToolsAdapter;\r\nimport com.app.brandmania.Adapter.FrameInterFace;\r\nimport com.app.brandmania.Adapter.ItemeInterFace;\r\nimport com.app.brandmania.Adapter.MultiListItem;\r\nimport com.app.brandmania.Fragment.TextEditorDialogFragment;\r\nimport com.app.brandmania.Interface.ITextColorChangeEvent;\r\nimport com.app.brandmania.Interface.ToolType;\r\nimport com.app.brandmania.R;\r\nimport com.app.brandmania.databinding.ActivityColorAndTextEditBinding;\r\n\r\nimport java.io.ByteArrayOutputStream;\r\nimport java.io.File;\r\nimport java.io.FileOutputStream;\r\nimport java.io.IOException;\r\n\r\nimport ja.burhanrashid52.photoeditor.OnPhotoEditorListener;\r\nimport ja.burhanrashid52.photoeditor.PhotoEditor;\r\nimport ja.burhanrashid52.photoeditor.SaveSettings;\r\nimport ja.burhanrashid52.photoeditor.TextStyleBuilder;\r\nimport ja.burhanrashid52.photoeditor.ViewType;\r\n\r\nimport static com.app.brandmania.Utils.Utility.Log;\r\n\r\npublic class ColorAndTextEditActivity extends AppCompatActivity implements ItemeInterFace, FrameInterFace, EditingToolsAdapter.OnItemSelected, OnPhotoEditorListener , ITextColorChangeEvent {\r\n\r\n    Activity act;\r\n    private ActivityColorAndTextEditBinding binding;\r\n    private static final String TAG = ColorAndTextEditActivity.class.getSimpleName();\r\n    public static final String FILE_PROVIDER_AUTHORITY = \"com.burhanrashid52.photoeditor.fileprovider\";\r\n    private static final int CAMERA_REQUEST = 52;\r\n    private EditingToolsAdapter mEditingToolsAdapter;\r\n    PhotoEditor mPhotoEditor;\r\n    Uri mSaveImageUri;\r\n    public static final int READ_WRITE_STORAGE = 52;\r\n    private ProgressDialog mProgressDialog;\r\n\r\n    public boolean requestPermission(String permission) {\r\n        boolean isGranted = ContextCompat.checkSelfPermission(this, permission) == PackageManager.PERMISSION_GRANTED;\r\n        if (!isGranted) {\r\n            ActivityCompat.requestPermissions(\r\n                    this,\r\n                    new String[]{permission},\r\n                    READ_WRITE_STORAGE);\r\n        }\r\n        return isGranted;\r\n    }\r\n    public void makeFullScreen() {\r\n        requestWindowFeature(Window.FEATURE_NO_TITLE);\r\n        getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN, WindowManager.LayoutParams.FLAG_FULLSCREEN);\r\n    }\r\n    @Override public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {\r\n        switch (requestCode) {\r\n            case READ_WRITE_STORAGE:\r\n                isPermissionGranted(grantResults[0] == PackageManager.PERMISSION_GRANTED, permissions[0]);\r\n                break;\r\n        }\r\n    }\r\n\r\n    @Override public void onCreate(Bundle savedInstanceState) {\r\n        setTheme(R.style.AppTheme_material_theme);\r\n        super.onCreate(savedInstanceState);\r\n        act = this;\r\n        binding = DataBindingUtil.setContentView(act, R.layout.activity_color_and_text_edit);\r\n        binding.tabLayout.addTab(binding.tabLayout.newTab().setText(convertFirstUpper(\"Color\")));\r\n        binding.tabLayout.addTab(binding.tabLayout.newTab().setText(\"Frame\"));\r\n        binding.tabLayout.addTab(binding.tabLayout.newTab().setText(convertFirstUpper(\"Texture\")));\r\n        binding.tabLayout.setTabTextColors(Color.parseColor(\"#727272\"), Color.parseColor(\"#ad2753\"));\r\n        binding.tabLayout.setTabGravity(TabLayout.GRAVITY_FILL);\r\n        final EditTabAdapter adapter = new EditTabAdapter(act, getSupportFragmentManager(), binding.tabLayout.getTabCount());\r\n        binding.viewPager.setAdapter(adapter);\r\n        binding.viewPager.addOnPageChangeListener(new TabLayout.TabLayoutOnPageChangeListener(binding.tabLayout));\r\n\r\n\r\n\r\n        binding.downloadIcon.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                saveImage();\r\n            }\r\n        });\r\n        binding.tabLayout.addOnTabSelectedListener(new TabLayout.OnTabSelectedListener() {\r\n            @Override\r\n            public void onTabSelected(TabLayout.Tab tab) {\r\n                binding.viewPager.setCurrentItem(tab.getPosition());\r\n            }\r\n\r\n            @Override\r\n            public void onTabUnselected(TabLayout.Tab tab) {\r\n            }\r\n\r\n            @Override\r\n            public void onTabReselected(TabLayout.Tab tab) {\r\n            }\r\n        });\r\n        binding.main.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                if (binding.clorframeLayout.getVisibility() == View.GONE) {\r\n                    binding.clorframeLayout.setVisibility(View.VISIBLE);\r\n                    binding.textClick.setVisibility(View.GONE);\r\n                }\r\n\r\n            }\r\n        });\r\n\r\n        //TextEditor--------------------------------------\r\n        mEditingToolsAdapter = new EditingToolsAdapter((EditingToolsAdapter.OnItemSelected) this);\r\n        LinearLayoutManager llmTools = new LinearLayoutManager(this, LinearLayoutManager.HORIZONTAL, false);\r\n        binding.rvConstraintTools.setLayoutManager(llmTools);\r\n        binding.rvConstraintTools.setAdapter(mEditingToolsAdapter);\r\n        mPhotoEditor = new PhotoEditor.Builder(this, binding.recoImageee)\r\n                .setPinchTextScalable(true)\r\n                .build(); // build photo editor sdk\r\n\r\n        mPhotoEditor.setOnPhotoEditorListener(this);\r\n\r\n\r\n    }\r\n    public static String convertFirstUpper(String str) {\r\n\r\n        if (str == null || str.isEmpty()) {\r\n            return str;\r\n        }\r\n        Log(\"FirstLetter\", str.substring(0, 1) + \"    \" + str.substring(1));\r\n        return str.substring(0, 1).toUpperCase() + str.substring(1);\r\n    }\r\n    @Override public void onItemSelection(int position, MultiListItem listModel) {\r\n        binding.recoImageee.getSource().setImageResource(listModel.getImage());\r\n    }\r\n    @Override public void onFrameItemSelection(int position, MultiListItem listModel) {\r\n        binding.recoframe.setImageResource(listModel.getImage());\r\n    }\r\n    @Override public void onToolSelected(ToolType toolType) {\r\n        switch (toolType) {\r\n\r\n            case TEXT:\r\n                TextEditorDialogFragment textEditorDialogFragment = TextEditorDialogFragment.show(this);\r\n                textEditorDialogFragment.setOnTextEditorListener(new TextEditorDialogFragment.TextEditor() {\r\n                    @Override\r\n                    public void onDone(String inputText, int colorCode) {\r\n                        final TextStyleBuilder styleBuilder = new TextStyleBuilder();\r\n                        styleBuilder.withTextColor(colorCode);\r\n\r\n                        mPhotoEditor.addText(inputText, styleBuilder);\r\n\r\n                    }\r\n                });\r\n                break;\r\n\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void onEditTextChangeListener(final View rootView, String text, int colorCode) {\r\n        TextEditorDialogFragment textEditorDialogFragment =\r\n                TextEditorDialogFragment.show(this, text, colorCode);\r\n        textEditorDialogFragment.setOnTextEditorListener(new TextEditorDialogFragment.TextEditor() {\r\n            @Override\r\n            public void onDone(String inputText, int colorCode) {\r\n                final TextStyleBuilder styleBuilder = new TextStyleBuilder();\r\n                styleBuilder.withTextColor(colorCode);\r\n\r\n                mPhotoEditor.editText(rootView, inputText, styleBuilder);\r\n\r\n            }\r\n        });\r\n    }\r\n\r\n    @Override public void onAddViewListener(ViewType viewType, int numberOfAddedViews) {\r\n        Log.d(TAG, \"onAddViewListener() called with: viewType = [\" + viewType + \"], numberOfAddedViews = [\" + numberOfAddedViews + \"]\");\r\n    }\r\n\r\n    @Override\r\n    public void onRemoveViewListener(ViewType viewType, int numberOfAddedViews) {\r\n        Log.d(TAG, \"onRemoveViewListener() called with: viewType = [\" + viewType + \"], numberOfAddedViews = [\" + numberOfAddedViews + \"]\");\r\n    }\r\n\r\n    @Override\r\n    public void onStartViewChangeListener(ViewType viewType) {\r\n        Log.d(TAG, \"onStartViewChangeListener() called with: viewType = [\" + viewType + \"]\");\r\n    }\r\n\r\n    @Override\r\n    public void onStopViewChangeListener(ViewType viewType) {\r\n        Log.d(TAG, \"onStopViewChangeListener() called with: viewType = [\" + viewType + \"]\");\r\n    }\r\n    private void saveImage() {\r\n        if (requestPermission(Manifest.permission.WRITE_EXTERNAL_STORAGE)) {\r\n            showLoading(\"Saving...\");\r\n            File file = new File(Environment.getExternalStorageDirectory()\r\n                    + File.separator + \"\"\r\n                    + System.currentTimeMillis() + \".png\");\r\n            try {\r\n                file.createNewFile();\r\n\r\n                SaveSettings saveSettings = new SaveSettings.Builder()\r\n                        .setClearViewsEnabled(true)\r\n                        .setTransparencyEnabled(true)\r\n                        .build();\r\n\r\n                if (ActivityCompat.checkSelfPermission(this, Manifest.permission.WRITE_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED) {\r\n                    // TODO: Consider calling\r\n                    //    ActivityCompat#requestPermissions\r\n                    // here to request the missing permissions, and then overriding\r\n                    //   public void onRequestPermissionsResult(int requestCode, String[] permissions,\r\n                    //                                          int[] grantResults)\r\n                    // to handle the case where the user grants the permission. See the documentation\r\n                    // for ActivityCompat#requestPermissions for more details.\r\n                    return;\r\n                }\r\n                mPhotoEditor.saveAsFile(file.getAbsolutePath(), saveSettings, new PhotoEditor.OnSaveListener() {\r\n                    @Override\r\n                    public void onSuccess(@NonNull String imagePath) {\r\n                        hideLoading();\r\n                        showSnackbar(\"Image Saved Successfully\");\r\n                        mSaveImageUri = Uri.fromFile(new File(imagePath));\r\n                        BitmapDrawable drawable = (BitmapDrawable) binding.recoframe. getDrawable();\r\n                        Bitmap frameBitmap = drawable. getBitmap();\r\n\r\n\r\n                        Bitmap ImageBitmap = null;\r\n                        try {\r\n                            ImageBitmap = MediaStore.Images.Media.getBitmap(act.getContentResolver(), mSaveImageUri);\r\n                        } catch (IOException e) {\r\n                            e.printStackTrace();\r\n                        }\r\n                        mSaveImageUri=Uri.fromFile(createFileFromBitmap(act,\"photo.jpeg\",createSingleImageFromMultipleImages(frameBitmap,ImageBitmap)));\r\n                        binding.recoImageee.getSource().setImageURI(mSaveImageUri);\r\n\r\n                    }\r\n\r\n                    @Override\r\n                    public void onFailure(@NonNull Exception exception) {\r\n                        hideLoading();\r\n                        showSnackbar(\"Failed to save Image\");\r\n                    }\r\n                });\r\n            } catch (IOException e) {\r\n                e.printStackTrace();\r\n                hideLoading();\r\n                showSnackbar(e.getMessage());\r\n            }\r\n        }\r\n    }\r\n    public static File createFileFromBitmap(Activity act, String fileName, Bitmap bitmap) {\r\n        File file;\r\n        file = new File(act.getCacheDir(), System.currentTimeMillis() + fileName);\r\n        try {\r\n            file.createNewFile();\r\n            ByteArrayOutputStream bos = new ByteArrayOutputStream();\r\n            bitmap.compress(Bitmap.CompressFormat.JPEG, 50, bos);\r\n            byte[] bitmapdata = bos.toByteArray();\r\n            FileOutputStream fos = new FileOutputStream(file);\r\n            fos.write(bitmapdata);\r\n            fos.flush();\r\n            fos.close();\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n        return file;\r\n    }\r\n    protected void showLoading(@NonNull String message) {\r\n        mProgressDialog = new ProgressDialog(this);\r\n        mProgressDialog.setMessage(message);\r\n        mProgressDialog.setProgressStyle(ProgressDialog.STYLE_SPINNER);\r\n        mProgressDialog.setCancelable(false);\r\n        mProgressDialog.show();\r\n    }\r\n    protected void hideLoading() {\r\n        if (mProgressDialog != null) {\r\n            mProgressDialog.dismiss();\r\n        }\r\n    }\r\n    protected void showSnackbar(@NonNull String message) {\r\n        View view = findViewById(android.R.id.content);\r\n        if (view != null) {\r\n            Snackbar.make(view, message, Snackbar.LENGTH_SHORT).show();\r\n        } else {\r\n\r\n        }\r\n    }\r\n    public void isPermissionGranted(boolean isGranted, String permission) {\r\n        if (isGranted) {\r\n            saveImage();\r\n        }\r\n    }\r\n    private void showSaveDialog() {\r\n        AlertDialog.Builder builder = new AlertDialog.Builder(this);\r\n        builder.setMessage(getString(R.string.msg_save_image));\r\n        builder.setPositiveButton(\"Save\", new DialogInterface.OnClickListener() {\r\n            @Override\r\n            public void onClick(DialogInterface dialog, int which) {\r\n                saveImage();\r\n            }\r\n        });\r\n        builder.setNegativeButton(\"Cancel\", new DialogInterface.OnClickListener() {\r\n            @Override\r\n            public void onClick(DialogInterface dialog, int which) {\r\n                dialog.dismiss();\r\n            }\r\n        });\r\n\r\n        builder.setNeutralButton(\"Discard\", new DialogInterface.OnClickListener() {\r\n            @Override\r\n            public void onClick(DialogInterface dialog, int which) {\r\n                finish();\r\n            }\r\n        });\r\n        builder.create().show();\r\n\r\n    }\r\n\r\n    @Override\r\n    public void onBackPressed() {\r\n        if (!mPhotoEditor.isCacheEmpty()) {\r\n            showSaveDialog();\r\n        } else {\r\n            super.onBackPressed();\r\n        }\r\n    }\r\n    private Bitmap createSingleImageFromMultipleImages( Bitmap secondImage,Bitmap firstImage){\r\n        Bitmap result = Bitmap.createBitmap(secondImage.getWidth(), secondImage.getHeight(), secondImage.getConfig());\r\n        Canvas canvas = new Canvas(result);\r\n        canvas.drawBitmap(secondImage, 0f, 0f, null);\r\n        canvas.drawBitmap(firstImage, 10, 10, null);\r\n        return result;\r\n    }\r\n\r\n    @Override\r\n    public void onColorItemChange(int colorcode) {\r\n        binding.recoImageee.setBackgroundColor(colorcode);\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/app/brandmania/Activity/ColorAndTextEditActivity.java	(revision 90317a36ad9c00f7df6d99091ebb42ca4ae706b0)
+++ app/src/main/java/com/app/brandmania/Activity/ColorAndTextEditActivity.java	(date 1605017481414)
@@ -90,6 +90,7 @@
         setTheme(R.style.AppTheme_material_theme);
         super.onCreate(savedInstanceState);
         act = this;
+        getWindow().setFlags(WindowManager.LayoutParams.FLAG_SECURE, WindowManager.LayoutParams.FLAG_SECURE);
         binding = DataBindingUtil.setContentView(act, R.layout.activity_color_and_text_edit);
         binding.tabLayout.addTab(binding.tabLayout.newTab().setText(convertFirstUpper("Color")));
         binding.tabLayout.addTab(binding.tabLayout.newTab().setText("Frame"));
Index: app/src/main/java/com/app/brandmania/Activity/UpdateBandList.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.app.brandmania.Activity;\r\n\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.core.app.ActivityCompat;\r\nimport androidx.databinding.DataBindingUtil;\r\n\r\nimport android.Manifest;\r\nimport android.app.Activity;\r\nimport android.app.AlertDialog;\r\nimport android.content.DialogInterface;\r\nimport android.content.Intent;\r\nimport android.content.res.ColorStateList;\r\nimport android.graphics.Bitmap;\r\nimport android.os.Bundle;\r\nimport android.util.Log;\r\nimport android.view.View;\r\nimport android.view.WindowManager;\r\n\r\nimport com.android.volley.AuthFailureError;\r\nimport com.android.volley.Request;\r\nimport com.android.volley.RequestQueue;\r\nimport com.android.volley.Response;\r\nimport com.android.volley.VolleyError;\r\nimport com.android.volley.toolbox.StringRequest;\r\nimport com.android.volley.toolbox.Volley;\r\nimport com.androidnetworking.AndroidNetworking;\r\nimport com.androidnetworking.common.ANRequest;\r\nimport com.androidnetworking.common.Priority;\r\nimport com.androidnetworking.error.ANError;\r\nimport com.androidnetworking.interfaces.JSONObjectRequestListener;\r\nimport com.androidnetworking.interfaces.UploadProgressListener;\r\nimport com.bumptech.glide.Glide;\r\nimport com.google.gson.Gson;\r\nimport com.app.brandmania.Common.Constant;\r\nimport com.app.brandmania.Common.PreafManager;\r\nimport com.app.brandmania.Common.ResponseHandler;\r\nimport com.app.brandmania.Connection.ItemSelectionInterface;\r\nimport com.app.brandmania.Fragment.bottom.ListBottomFragment;\r\nimport com.app.brandmania.Fragment.bottom.PickerFragment;\r\nimport com.app.brandmania.Model.BrandListItem;\r\nimport com.app.brandmania.Model.CommonListModel;\r\nimport com.app.brandmania.R;\r\nimport com.app.brandmania.Utils.APIs;\r\nimport com.app.brandmania.Utils.CodeReUse;\r\nimport com.app.brandmania.Utils.Utility;\r\nimport com.app.brandmania.databinding.ActivityUpdateBandListBinding;\r\n\r\nimport org.json.JSONArray;\r\nimport org.json.JSONException;\r\nimport org.json.JSONObject;\r\n\r\nimport java.io.File;\r\nimport java.util.ArrayList;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\n\r\npublic class UpdateBandList extends AppCompatActivity implements ItemSelectionInterface,alertListenerCallback {\r\n    PreafManager prefManager;\r\n    Gson gson;\r\n    public static int BRAND_CATEGORY = 0;\r\n    private String BrandTitle;\r\n    private int showingView = -1;\r\n    private boolean isEditModeEnable = false;\r\n    private BrandListItem listModel;\r\n    private boolean isLoading=false;\r\n    private ActivityUpdateBandListBinding binding;\r\n    private Activity act;\r\n    ArrayList<CommonListModel> BRANDTypeList = new ArrayList<>();\r\n    private ListBottomFragment bottomSheetFragment;\r\n    CommonListModel commonListModel;\r\n    private Bitmap selectedImagesBitmap;\r\n    private AlertDialog.Builder alertDialogBuilder;\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        setTheme(R.style.AppTheme_material_theme);\r\n        super.onCreate(savedInstanceState);\r\n        act = this;\r\n        captureScreenShort();\r\n        binding = DataBindingUtil.setContentView(act, R.layout.activity_update_band_list);\r\n        prefManager = new PreafManager(this);\r\n        gson = new Gson();\r\n        CodeReUse.RemoveError(binding.categoryEdt, binding.categoryEdtLayout);\r\n        CodeReUse.RemoveError(binding.nameTxt, binding.nameTxtLayout);\r\n        CodeReUse.RemoveError(binding.phoneTxt, binding.phoneTxtLayout);\r\n        CodeReUse.RemoveError(binding.addressEdt, binding.addressEdtLayout);\r\n        CodeReUse.RemoveError(binding.websiteEdt, binding.websiteEdtLayout);\r\n        CodeReUse.RemoveError(binding.emailIdEdt, binding.emailIdEdtLayout);\r\n        alertDialogBuilder=new AlertDialog.Builder(act);\r\n        binding.viewImgFirst.setTag(\"0\");\r\n        binding.viewImgFirst.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                if (!isEditModeEnable) {\r\n                    if (binding.viewImgFirst.getTag().toString().equalsIgnoreCase(\"1\"))\r\n                        pickerView(Constant.PICKER_FIRST, true, selectedImagesBitmap);\r\n                    else\r\n                        pickerView(Constant.PICKER_FIRST, false, null);\r\n                }\r\n            }\r\n        });\r\n        getBrandCategory(BRAND_CATEGORY);\r\n        binding.categoryEdt.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n\r\n                showFragmentList(BRAND_CATEGORY, BrandTitle, BRANDTypeList);\r\n            }\r\n        });\r\n        binding.addExpenceBtn.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                Validation();\r\n            }\r\n        });\r\n        listModel = gson.fromJson(getIntent().getStringExtra(\"detailsObj\"), BrandListItem.class);\r\n      //  getConversation();\r\n        Log.e(\"-- \", getIntent().getStringExtra(\"detailsObj\"));\r\n        //not filled conditions remains ask to mem\r\n        if (listModel != null) {\r\n            binding.categoryEdt.setText(listModel.getCategoryName());\r\n            binding.nameTxt.setText(listModel.getName());\r\n            binding.phoneTxt.setText(listModel.getPhonenumber());\r\n            binding.addressEdt.setText(listModel.getAddress());\r\n            binding.websiteEdt.setText(listModel.getWebsite());\r\n            binding.emailIdEdt.setText(listModel.getEmail());\r\n            binding.BackButtonMember.setOnClickListener(new View.OnClickListener() {\r\n                @Override\r\n                public void onClick(View v) {\r\n                    onBackPressed();\r\n                }\r\n\r\n            });\r\n\r\n            Glide.with(act)\r\n                    .load(listModel.getLogo())\r\n                    .placeholder(R.drawable.placeholder)\r\n                    .into((binding.viewImgFirst));\r\n            Glide.with(act)\r\n                    .load(listModel.getFrame())\r\n                    .placeholder(R.drawable.placeholder)\r\n                    .into((binding.selectframe1));\r\n        }\r\n    }\r\n    private void getBrandCategory(int flag) {\r\n        String apiUrl = \"\";\r\n        int requestedMethod = 0;\r\n\r\n        if (flag == BRAND_CATEGORY) {\r\n            apiUrl = APIs.GET_BRAND_CATEGORY;\r\n            requestedMethod = Request.Method.POST;\r\n        }\r\n\r\n        Utility.Log(\"API : \", apiUrl);\r\n\r\n        StringRequest request = new StringRequest(requestedMethod, apiUrl, new Response.Listener<String>() {\r\n            @Override\r\n            public void onResponse(String response) {\r\n\r\n\r\n                Utility.Log(flag + \"- Response : \", response);\r\n                try {\r\n                    if (ResponseHandler.isSuccess(response, null)) {\r\n                        JSONObject responseJson = ResponseHandler.createJsonObject(response);\r\n                        JSONArray jsonArray = ResponseHandler.getJSONArray(responseJson, \"data\");\r\n                        Log.e(\"jsonArray-\", jsonArray.toString());\r\n                        for (int i = 0; i < jsonArray.length(); i++) {\r\n                            JSONObject itemObj = jsonArray.getJSONObject(i);\r\n                            CommonListModel listModel = new CommonListModel();\r\n                            listModel.setLayoutType(CommonListModel.LAYOUT_BLOCK);\r\n                            listModel.setId(ResponseHandler.getString(itemObj, \"id\"));\r\n                            listModel.setName(ResponseHandler.getString(itemObj, \"biz_cat_name\"));\r\n                            BRANDTypeList.add(listModel);\r\n                        }\r\n                        Log.w(\"Size\", String.valueOf(BRANDTypeList.size()));\r\n                    }\r\n\r\n                } catch (JSONException e) {\r\n                    e.printStackTrace();\r\n                }\r\n            }\r\n        }, new Response.ErrorListener() {\r\n            @Override\r\n            public void onErrorResponse(VolleyError error) {\r\n                error.printStackTrace();\r\n            }\r\n        }) {\r\n\r\n            @Override\r\n            public Map<String, String> getHeaders() throws AuthFailureError {\r\n                Map<String, String> params = new HashMap<String, String>();\r\n                params.put(\"Accept\", \"application/x-www-form-urlencoded\");//application/json\r\n                params.put(\"Content-Type\", \"application/x-www-form-urlencoded\");\r\n                params.put(\"Authorization\", \"Bearer\"+prefManager.getUserToken());\r\n                Log.e(\"Token\", params.toString());\r\n                return params;\r\n            }\r\n\r\n\r\n            @Override\r\n            protected Map<String, String> getParams() throws AuthFailureError {\r\n                HashMap<String, String> map = new HashMap<>();\r\n\r\n\r\n                Utility.Log(\"Params : \", map.toString());\r\n                return map;\r\n            }\r\n        };\r\n        RequestQueue queue = Volley.newRequestQueue(this);\r\n        queue.add(request);\r\n\r\n    }\r\n    private void Validation() {\r\n        boolean isError = false;\r\n        boolean isFocus = false;\r\n\r\n        if (binding.categoryEdt.getText().toString().length() == 0) {\r\n            isError = true;\r\n            isFocus = true;\r\n            binding.categoryEdtLayout.setError(getString(R.string.brandcategory_text));\r\n            binding.categoryEdtLayout.setErrorTextColor(ColorStateList.valueOf(getResources().getColor(R.color.colorPrimary)));\r\n            binding.categoryEdt.requestFocus();\r\n\r\n        }\r\n        if (binding.nameTxt.getText().toString().length() == 0) {\r\n            isError = true;\r\n            isFocus = true;\r\n            binding.nameTxtLayout.setError(getString(R.string.brandname_text));\r\n            binding.nameTxtLayout.setErrorTextColor(ColorStateList.valueOf(getResources().getColor(R.color.colorPrimary)));\r\n            binding.nameTxt.requestFocus();\r\n\r\n        }\r\n\r\n        if (!binding.phoneTxt.getText().toString().equals(\"\")) {\r\n            if (binding.phoneTxt.getText().toString().length() < 10) {\r\n                binding.phoneTxtLayout.setError(getString(R.string.validphoneno_txt));\r\n                binding.phoneTxtLayout.setErrorTextColor(ColorStateList.valueOf(getResources().getColor(R.color.colorPrimary)));\r\n                binding.phoneTxt.requestFocus();\r\n                return;\r\n            }\r\n\r\n        }\r\n        else\r\n        {\r\n            if (binding.phoneTxt.getText().toString().equals(\"\"))\r\n            {\r\n                binding.phoneTxtLayout.setError(getString(R.string.entermobileno_text));\r\n                binding.phoneTxtLayout.setErrorTextColor(ColorStateList.valueOf(getResources().getColor(R.color.colorPrimary)));\r\n                binding.phoneTxt.requestFocus();\r\n                return;\r\n            }\r\n\r\n        }\r\n\r\n        if (binding.addressEdt.getText().toString().length() == 0) {\r\n            isError = true;\r\n            isFocus = true;\r\n            binding.addressEdtLayout.setError(getString(R.string.enter_address));\r\n            binding.addressEdtLayout.setErrorTextColor(ColorStateList.valueOf(getResources().getColor(R.color.colorPrimary)));\r\n            binding.addressEdt.requestFocus();\r\n\r\n        }\r\n\r\n        if (binding.websiteEdt.getText().toString().length() == 0) {\r\n            isError = true;\r\n            isFocus = true;\r\n            binding.websiteEdtLayout.setError(getString(R.string.enter_website));\r\n            binding.websiteEdtLayout.setErrorTextColor(ColorStateList.valueOf(getResources().getColor(R.color.colorPrimary)));\r\n            binding.websiteEdt.requestFocus();\r\n\r\n        }\r\n\r\n        if (!binding.emailIdEdt.getText().toString().equals(\"\")) {\r\n            if (!CodeReUse.isEmailValid(binding.emailIdEdt.getText().toString())) {\r\n                isError = true;\r\n                isFocus = true;\r\n                binding.emailIdEdtLayout.setError(getString(R.string.enter_valid_email_address));\r\n                binding.emailIdEdtLayout.setErrorTextColor(ColorStateList.valueOf(getResources().getColor(R.color.colorPrimary)));\r\n                binding.emailIdEdt.requestFocus();\r\n\r\n            }\r\n            else\r\n            {\r\n\r\n            }\r\n\r\n        }\r\n        else {\r\n            if (binding.emailIdEdt.getText().toString().length() == 0) {\r\n                isError = true;\r\n                isFocus = true;\r\n                binding.emailIdEdtLayout.setError(getString(R.string.enter_email_id));\r\n                binding.emailIdEdtLayout.setErrorTextColor(ColorStateList.valueOf(getResources().getColor(R.color.colorPrimary)));\r\n                binding.emailIdEdt.requestFocus();\r\n\r\n            }\r\n        }\r\n\r\n        if (!isError) {\r\n            Bitmap bitmap = null;\r\n            if (selectedImagesBitmap != null) {\r\n                bitmap = selectedImagesBitmap;\r\n            }\r\n            Bitmap bitmap1 = null;\r\n            if (selectedImagesBitmap != null) {\r\n                bitmap1 = selectedImagesBitmap;\r\n            }\r\n            EditBrandBrand(bitmap);\r\n        }\r\n\r\n    }\r\n\r\n    private void EditBrandBrand(Bitmap img) {\r\n        if (isLoading)\r\n            return;\r\n        isLoading = true;\r\n        Utility.showProgress(act);\r\n        Log.e(\"API\", APIs.EDIT_BRAND);\r\n        Log.e(\"API\", prefManager.getUserToken());\r\n        File img1File = null;\r\n        if (img != null) {\r\n            img1File = CodeReUse.createFileFromBitmap(act, \"photo.jpeg\", img);\r\n        }\r\n        ANRequest.MultiPartBuilder request = AndroidNetworking.upload(APIs.EDIT_BRAND)\r\n                .addHeaders(\"Accept\", \"application/json\")\r\n                .addHeaders(\"Content-Type\", \"application/json\")\r\n                .addHeaders(\"Authorization\", \"Bearer\"+prefManager.getUserToken())\r\n                .addMultipartParameter(\"brand_id\",listModel.getId())\r\n                .addMultipartParameter(\"br_category\",  binding.categoryEdt.getText().toString())\r\n                .addMultipartParameter(\"br_name\", binding.nameTxt.getText().toString())\r\n                .addMultipartParameter(\"br_phone\", binding.phoneTxt.getText().toString())\r\n                .addMultipartParameter(\"br_address\", binding.addressEdt.getText().toString())\r\n                .addMultipartParameter(\"br_website\", binding.websiteEdt.getText().toString())\r\n                .addMultipartParameter(\"br_email\", binding.emailIdEdt.getText().toString())\r\n                .setTag(\"Add User\")\r\n                .setPriority(Priority.HIGH);\r\n\r\n        if (commonListModel!=null)\r\n        {\r\n            request.addMultipartParameter(\"br_category\",commonListModel.getId());\r\n        }\r\n        else\r\n        {\r\n            request.addMultipartParameter(\"br_category\",listModel.getCategoryId());\r\n        }\r\n\r\n        if (img1File != null) {\r\n            request.addMultipartFile(\"br_logo\", img1File);\r\n            Log.e(\"br_logo\", String.valueOf(img1File));\r\n        }\r\n\r\n//        if (img1File1 != null) {\r\n//            request.addMultipartFile(\"frame\", img1File1);\r\n//            Log.e(\"frame\", String.valueOf(img1File1));\r\n//        }\r\n\r\n        request.build().setUploadProgressListener(new UploadProgressListener() {\r\n            @Override\r\n            public void onProgress(long bytesUploaded, long totalBytes) {\r\n                // do anything with progress\r\n            }\r\n        })\r\n                .getAsJSONObject(new JSONObjectRequestListener() {\r\n                    @Override\r\n                    public void onResponse(JSONObject response) {\r\n                        isLoading = false;\r\n                        Utility.dismissProgress();\r\n                        Utility.Log(\"Verify-Response\", response);\r\n\r\n                        try {\r\n\r\n                            if (response.getBoolean(\"status\")) {\r\n\r\n                                alertDialogBuilder.setMessage(ResponseHandler.getString(response, \"message\"));\r\n                                alertDialogBuilder.setPositiveButton(\"Ok\", new DialogInterface.OnClickListener() {\r\n                                    @Override\r\n                                    public void onClick(DialogInterface arg0, int arg1) {\r\n                                        Intent i = new Intent(act, ViewBrandActivity.class);\r\n                                        i.addCategory(Intent.CATEGORY_HOME);\r\n                                        i.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\r\n                                        startActivity(i);\r\n                                        overridePendingTransition(R.anim.slide_right_in, R.anim.slide_right_out);\r\n                                        finish();\r\n                                    }\r\n                                });\r\n                                AlertDialog alertDialog = alertDialogBuilder.create();\r\n                                alertDialog.setCancelable(false);\r\n                                alertDialog.show();\r\n\r\n\r\n\r\n\r\n\r\n                            }\r\n                        }\r\n                        catch (JSONException e) {\r\n                            e.printStackTrace();\r\n                        }\r\n\r\n\r\n\r\n                    }\r\n\r\n                    @Override\r\n                    public void onError(ANError error) {\r\n                        isLoading = false;\r\n                        Utility.dismissProgress();\r\n\r\n                        if (error.getErrorCode() != 0) {\r\n                            Log.e(\"onError errorCode : \", String.valueOf(error.getErrorCode()));\r\n                            Log.e(\"onError errorBody : \", error.getErrorBody());\r\n                            Log.e(\"onError errorDetail : \", error.getErrorDetail());\r\n                        } else {\r\n                            Log.e(\"onError errorDetail : \", error.getErrorDetail());\r\n                        }\r\n                    }\r\n                });\r\n\r\n    }\r\n    public void showFragmentList(int callingFlag, String title, ArrayList<CommonListModel> datalist) {\r\n        bottomSheetFragment = new ListBottomFragment();\r\n        Log.e(\"Size---\", String.valueOf(datalist.size()));\r\n        bottomSheetFragment.setListData(callingFlag, title, datalist);\r\n        if (bottomSheetFragment.isVisible()) {\r\n            bottomSheetFragment.dismiss();\r\n        }\r\n        if (bottomSheetFragment.isAdded()) {\r\n            bottomSheetFragment.dismiss();\r\n        }\r\n        bottomSheetFragment.show(getSupportFragmentManager(), bottomSheetFragment.getTag());\r\n    }\r\n    private void pickerView(int actionId, boolean viewMode, Bitmap selectedBitmap) {\r\n        PickerFragment pickerFragment = new PickerFragment(act);\r\n        pickerFragment.setEnableViewMode(viewMode);\r\n        pickerFragment.setActionId(actionId);\r\n\r\n        if (viewMode) {\r\n            pickerFragment.setSelectedBitmapForFullView(selectedBitmap);\r\n        }\r\n        PickerFragment.HandlerImageLoad imageLoad = new PickerFragment.HandlerImageLoad() {\r\n            @Override\r\n            public void onGalleryResult(int flag, Bitmap bitmap) {\r\n                if (flag == Constant.PICKER_FIRST) {\r\n                    binding.viewImgFirst.setImageBitmap(bitmap);\r\n                    binding.imgEmptyStateFirst.setVisibility(View.GONE);\r\n                    binding.actionDeleteFirst.setVisibility(View.VISIBLE);\r\n                    selectedImagesBitmap = bitmap;\r\n                    binding.viewImgFirst.setTag(\"1\");\r\n                    if (!isEditModeEnable) {\r\n\r\n                    }\r\n                    binding.viewImgFirst.setVisibility(View.VISIBLE);\r\n                }\r\n\r\n\r\n\r\n            }\r\n        };\r\n        pickerFragment.setImageLoad(imageLoad);\r\n        pickerFragment.show(getSupportFragmentManager(), pickerFragment.getTag());\r\n    }\r\n    @Override public void onBackPressed() {\r\n        CodeReUse.activityBackPress(act);\r\n    }\r\n    @Override public void onItemSelection(int calledFlag, int position, CommonListModel listModel) {\r\n        if (bottomSheetFragment != null && bottomSheetFragment.isVisible()) {\r\n            bottomSheetFragment.dismiss();\r\n        }\r\n        if (calledFlag == BRAND_CATEGORY) {\r\n            binding.categoryEdt.setText(listModel.getName());\r\n            commonListModel=listModel;\r\n        }\r\n    }\r\n    private void requestAgain() {\r\n        ActivityCompat.requestPermissions(act,\r\n                new String[]{Manifest.permission.CAMERA, Manifest.permission.WRITE_EXTERNAL_STORAGE,\r\n                        Manifest.permission.READ_EXTERNAL_STORAGE},\r\n                CodeReUse.ASK_PERMISSSION);\r\n    }\r\n    @Override public void alertListenerClick() {\r\n        requestAgain();\r\n    }\r\n    public void captureScreenShort()\r\n    {\r\n        getWindow().setFlags(WindowManager.LayoutParams.FLAG_SECURE, WindowManager.LayoutParams.FLAG_SECURE);\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/app/brandmania/Activity/UpdateBandList.java	(revision 90317a36ad9c00f7df6d99091ebb42ca4ae706b0)
+++ app/src/main/java/com/app/brandmania/Activity/UpdateBandList.java	(date 1605017481400)
@@ -77,6 +77,7 @@
         act = this;
         captureScreenShort();
         binding = DataBindingUtil.setContentView(act, R.layout.activity_update_band_list);
+        getWindow().setFlags(WindowManager.LayoutParams.FLAG_SECURE, WindowManager.LayoutParams.FLAG_SECURE);
         prefManager = new PreafManager(this);
         gson = new Gson();
         CodeReUse.RemoveError(binding.categoryEdt, binding.categoryEdtLayout);
Index: app/src/main/java/com/app/brandmania/Activity/SpleshActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.app.brandmania.Activity;\r\n\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.databinding.DataBindingUtil;\r\n\r\nimport android.animation.AnimatorSet;\r\nimport android.animation.ObjectAnimator;\r\nimport android.app.Activity;\r\nimport android.content.Intent;\r\nimport android.os.Bundle;\r\nimport android.os.Handler;\r\nimport android.util.Log;\r\nimport android.view.View;\r\nimport android.view.WindowManager;\r\n\r\nimport com.android.volley.AuthFailureError;\r\nimport com.android.volley.Request;\r\nimport com.android.volley.RequestQueue;\r\nimport com.android.volley.Response;\r\nimport com.android.volley.VolleyError;\r\nimport com.android.volley.toolbox.StringRequest;\r\nimport com.android.volley.toolbox.Volley;\r\nimport com.app.brandmania.Common.PreafManager;\r\nimport com.app.brandmania.Common.ResponseHandler;\r\nimport com.app.brandmania.Model.BrandListItem;\r\nimport com.app.brandmania.Model.FrameItem;\r\nimport com.app.brandmania.Model.IsCompeteModel;\r\nimport com.app.brandmania.R;\r\nimport com.app.brandmania.Utils.APIs;\r\nimport com.app.brandmania.Utils.Utility;\r\nimport com.app.brandmania.databinding.ActivityMainBinding;\r\n\r\nimport org.json.JSONArray;\r\nimport org.json.JSONException;\r\nimport org.json.JSONObject;\r\n\r\nimport java.nio.charset.StandardCharsets;\r\nimport java.util.ArrayList;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\n\r\npublic class SpleshActivity extends AppCompatActivity  {\r\n    Activity act;\r\n    private ActivityMainBinding binding;\r\n    final ArrayList<IsCompeteModel> isCompeteModels = new ArrayList<IsCompeteModel>();\r\n    PreafManager preafManager;\r\n    AnimatorSet animatorSet1;\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        setTheme(R.style.AppTheme_material_theme);\r\n        super.onCreate(savedInstanceState);\r\n        act = this;\r\n        binding = DataBindingUtil.setContentView(act, R.layout.activity_main);\r\n        this.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_HIDDEN);\r\n\r\n        \r\n        preafManager=new PreafManager(this);\r\n\r\n        binding.logo.setVisibility(View.VISIBLE);\r\n        final ObjectAnimator scaleAnimatiorXX = ObjectAnimator.ofFloat(binding.logo, \"scaleX\", 0, 1f);\r\n        ObjectAnimator scaleAnimatiorYX = ObjectAnimator.ofFloat(binding.logo, \"scaleY\", 0, 1f);\r\n        animatorSet1 = new AnimatorSet();\r\n        animatorSet1.playTogether(scaleAnimatiorXX, scaleAnimatiorYX);\r\n        animatorSet1.setDuration(3000);\r\n        //animatorSet1.start();\r\n        new Handler().postDelayed(new Runnable() {\r\n            @Override\r\n            public void run() {\r\n\r\n                if (preafManager.getUserToken()!=null && !preafManager.getUserToken().isEmpty() ) {\r\n\r\n                    LoginFlow();\r\n\r\n                }\r\n                else {\r\n                    Intent intent = new Intent(act, LoginActivity.class);\r\n                    intent.addCategory(Intent.CATEGORY_HOME);\r\n                    intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\r\n                    startActivity(intent);\r\n                    overridePendingTransition(R.anim.slide_right_in, R.anim.slide_right_out);\r\n                    finish();\r\n                }\r\n\r\n            }\r\n        }, 1000);\r\n\r\n    }\r\n    private void LoginFlow() {\r\n        Utility.Log(\"API : \", APIs.IS_COMPLETE);\r\n        StringRequest stringRequest = new StringRequest(Request.Method.GET, APIs.IS_COMPLETE, new Response.Listener<String>() {\r\n            @Override\r\n            public void onResponse(String response) {\r\n                Utility.Log(\"IS_COMPLETE : \", response);\r\n                try {\r\n\r\n                    JSONObject jsonObject=new JSONObject(response);\r\n                    JSONObject jsonObject1 = jsonObject.getJSONObject(\"data\");\r\n                    if (jsonObject1.getString(\"is_completed\").equals(\"0\"))\r\n                    {\r\n                        preafManager.setIs_Registration(false);\r\n                        sessionCreat();\r\n                    }\r\n                    if (jsonObject1.getString(\"is_completed\").equals(\"1\"))\r\n                    {\r\n                        preafManager.setIS_Brand(false);\r\n                        sessionCreat();\r\n                    }\r\n                    if (jsonObject1.getString(\"is_completed\").equals(\"2\"))\r\n                    {\r\n                        preafManager.setIs_Registration(true);\r\n                        preafManager.setIS_Brand(true);\r\n                        getBrandList();\r\n\r\n                    }\r\n\r\n\r\n                } catch (JSONException e) {\r\n                    e.printStackTrace();\r\n                }\r\n\r\n            }\r\n        },\r\n                new Response.ErrorListener() {\r\n                    @Override\r\n                    public void onErrorResponse(VolleyError error) {\r\n\r\n                        error.printStackTrace();\r\n                        String body;\r\n\r\n\r\n\r\n                    }\r\n                }\r\n        ) {\r\n            /**\r\n             * Passing some request headers*\r\n             */\r\n\r\n            @Override\r\n            public Map<String, String> getHeaders() throws AuthFailureError {\r\n                Map<String, String> params = new HashMap<String, String>();\r\n                params.put(\"Accept\", \"application/json\");\r\n                params.put(\"Content-Type\", \"application/json\");\r\n                params.put(\"Authorization\",\"Bearer \"+preafManager.getUserToken());\r\n                Log.e(\"Token\",params.toString());\r\n                return params;\r\n            }\r\n\r\n\r\n            @Override\r\n            protected Map<String, String> getParams() {\r\n                Map<String, String> params = new HashMap<>();\r\n\r\n                Log.e(\"DateNdClass\", params.toString());\r\n                //params.put(\"upload_type_id\", String.valueOf(Constant.ADD_NOTICE));\r\n                Utility.Log(\"POSTED-PARAMS-\", params.toString());\r\n                return params;\r\n            }\r\n\r\n        };\r\n\r\n        RequestQueue queue = Volley.newRequestQueue(getApplicationContext());\r\n        queue.add(stringRequest);\r\n    }\r\n    private void sessionCreat() {\r\n\r\npreafManager=new PreafManager(act);\r\n        if (preafManager.getIs_Registration())\r\n        {\r\n            /*Intent intent = new Intent(act, AddBranddActivity.class);\r\n              intent.addCategory(Intent.CATEGORY_HOME);\r\n                        intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\r\n                        startActivity(intent);\r\n                        overridePendingTransition(R.anim.slide_right_in, R.anim.slide_right_out);\r\n                        finish();*/\r\n            if (preafManager.getIS_Brand())\r\n            {\r\n                Intent i = new Intent(act, HomeActivity.class);\r\n                i.addCategory(Intent.CATEGORY_HOME);\r\n                i.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\r\n                startActivity(i);\r\n                overridePendingTransition(R.anim.slide_right_in, R.anim.slide_right_out);\r\n                finish();\r\n            }\r\n            else\r\n            {\r\n                Intent i = new Intent(act, AddBranddActivity.class);\r\n                i.addCategory(Intent.CATEGORY_HOME);\r\n                i.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\r\n                startActivity(i);\r\n                overridePendingTransition(R.anim.slide_right_in, R.anim.slide_right_out);\r\n                finish();\r\n            }\r\n        }\r\n        else\r\n        {\r\n            Intent intent = new Intent(act, RegistrationActivity.class);\r\n            intent.addCategory(Intent.CATEGORY_HOME);\r\n            intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\r\n            startActivity(intent);\r\n            overridePendingTransition(R.anim.slide_right_in, R.anim.slide_right_out);\r\n            finish();\r\n        }\r\n\r\n\r\n    }\r\n\r\n    private void getBrandList() {\r\n        Utility.Log(\"API : \", APIs.GET_BRAND);\r\n        StringRequest stringRequest = new StringRequest(Request.Method.POST, APIs.GET_BRAND, new Response.Listener<String>() {\r\n            @Override\r\n            public void onResponse(String response) {\r\n                Log.e(\"addbrandresponce\",response);\r\n                ArrayList<BrandListItem> brandListItems=new ArrayList<>();\r\n                try {\r\n                    JSONObject res=new JSONObject(response);\r\n\r\n                    JSONArray jsonArray1 = res.getJSONArray(\"data\");\r\n                    for (int i=0;i<jsonArray1.length();i++)\r\n                    {\r\n                        JSONObject jsonObject=jsonArray1.getJSONObject(i);\r\n                        BrandListItem brandListItemm=new BrandListItem();\r\n                        brandListItemm.setId(ResponseHandler.getString(jsonObject,\"id\"));\r\n                        brandListItemm.setCategoryId(ResponseHandler.getString(jsonObject, \"br_category_id\"));\r\n                        brandListItemm.setCategoryName(ResponseHandler.getString(jsonObject, \"br_category_name\"));\r\n                        brandListItemm.setName(ResponseHandler.getString(jsonObject,\"br_name\"));\r\n                        brandListItemm.setWebsite(ResponseHandler.getString(jsonObject,\"br_website\"));\r\n                        brandListItemm.setEmail(ResponseHandler.getString(jsonObject,\"br_email\"));\r\n                        brandListItemm.setAddress(ResponseHandler.getString(jsonObject,\"br_address\"));\r\n                        brandListItemm.setLogo(ResponseHandler.getString(jsonObject,\"br_logo\"));\r\n                        JSONArray jsonArray = jsonObject.getJSONArray(\"br_frame\");\r\n                        ArrayList<FrameItem>frameItems=null;\r\n                        frameItems = new ArrayList<>();\r\n                        for (int j = 0; j < jsonArray.length(); j++) {\r\n                            JSONObject jsonObject1 = jsonArray.getJSONObject(j);\r\n                            FrameItem frameItem = new FrameItem();\r\n                            frameItem.setFrame1(ResponseHandler.getString(jsonObject,\"fream_base_url\")+\"/\"+ResponseHandler.getString(jsonObject1, \"frame_path\"));\r\n                            frameItem.setFrameId(ResponseHandler.getString(jsonObject1, \"id\"));\r\n\r\n                            frameItems.add(frameItem);\r\n                        }\r\n\r\n                        brandListItemm.setFrame(frameItems);\r\n                        brandListItems.add(brandListItemm);\r\n                    }\r\n\r\n\r\n                    preafManager.setAddBrandList(brandListItems);\r\n                    preafManager.setIS_Brand(true);\r\n\r\n                    if (brandListItems!=null && brandListItems.size()!=0){\r\n                        preafManager.setActiveBrand(brandListItems.get(0));\r\n                    }\r\n\r\n\r\n                    Intent i = new Intent(act, HomeActivity.class);\r\n                    startActivity(i);\r\n                    overridePendingTransition(R.anim.right_enter, R.anim.left_out);\r\n                    finish();\r\n\r\n                }\r\n                catch (JSONException e) {\r\n                    e.printStackTrace();\r\n                }\r\n\r\n            }\r\n        },\r\n                new Response.ErrorListener() {\r\n                    @Override\r\n                    public void onErrorResponse(VolleyError error) {\r\n\r\n                        error.printStackTrace();\r\n                        String body;\r\n                        body = new String(error.networkResponse.data, StandardCharsets.UTF_8);\r\n                        Log.e(\"Error \", body);\r\n\r\n\r\n                    }\r\n                }\r\n        ) {\r\n            /**\r\n             * Passing some request headers*\r\n             */\r\n\r\n            @Override\r\n            public Map<String, String> getHeaders() throws AuthFailureError {\r\n                Map<String, String> params = new HashMap<String, String>();\r\n                params.put(\"Accept\", \"application/json\");\r\n                params.put(\"Content-Type\", \"application/json\");\r\n                params.put(\"Authorization\",\"Bearer \"+preafManager.getUserToken());\r\n                Log.e(\"Token\",params.toString());\r\n                return params;\r\n            }\r\n\r\n\r\n            @Override\r\n            protected Map<String, String> getParams() {\r\n                Map<String, String> params = new HashMap<>();\r\n\r\n                Log.e(\"DateNdClass\", params.toString());\r\n                //params.put(\"upload_type_id\", String.valueOf(Constant.ADD_NOTICE));\r\n                Utility.Log(\"POSTED-PARAMS-\", params.toString());\r\n                return params;\r\n            }\r\n\r\n        };\r\n\r\n        RequestQueue queue = Volley.newRequestQueue(getApplicationContext());\r\n        queue.add(stringRequest);\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/app/brandmania/Activity/SpleshActivity.java	(revision 90317a36ad9c00f7df6d99091ebb42ca4ae706b0)
+++ app/src/main/java/com/app/brandmania/Activity/SpleshActivity.java	(date 1605017481391)
@@ -53,7 +53,7 @@
         binding = DataBindingUtil.setContentView(act, R.layout.activity_main);
         this.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_HIDDEN);
 
-        
+        getWindow().setFlags(WindowManager.LayoutParams.FLAG_SECURE, WindowManager.LayoutParams.FLAG_SECURE);
         preafManager=new PreafManager(this);
 
         binding.logo.setVisibility(View.VISIBLE);
Index: app/src/main/java/com/app/brandmania/Activity/EditPicActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.app.brandmania.Activity;\r\n\r\nimport androidx.annotation.Nullable;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.databinding.DataBindingUtil;\r\nimport androidx.recyclerview.widget.GridLayoutManager;\r\n\r\nimport android.app.Activity;\r\nimport android.content.Intent;\r\nimport android.database.Cursor;\r\nimport android.graphics.Bitmap;\r\nimport android.graphics.BitmapFactory;\r\nimport android.net.Uri;\r\nimport android.os.Bundle;\r\nimport android.provider.OpenableColumns;\r\nimport android.util.Log;\r\nimport android.view.MotionEvent;\r\nimport android.view.ScaleGestureDetector;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.widget.FrameLayout;\r\nimport android.widget.ImageView;\r\nimport android.widget.RelativeLayout;\r\nimport android.widget.Toast;\r\n\r\nimport com.google.gson.Gson;\r\nimport com.app.brandmania.Adapter.ItemeInterFace;\r\nimport com.app.brandmania.Adapter.MenuAddaptor;\r\nimport com.app.brandmania.Adapter.MultiListItem;\r\nimport com.app.brandmania.R;\r\nimport com.app.brandmania.databinding.ActivityEditPic2Binding;\r\n\r\nimport com.app.brandmania.databinding.FragmentCustomBinding;\r\nimport com.yalantis.ucrop.UCrop;\r\n\r\nimport java.io.File;\r\nimport java.util.ArrayList;\r\nimport java.util.Timer;\r\n\r\npublic class EditPicActivity extends AppCompatActivity implements ItemeInterFace {\r\n    public static final int VIEW_RECOMDATION = 0;\r\n\r\n    Activity act;\r\n    int windowwidth;\r\n    int windowheight;\r\n    ImageView imageView;\r\n    private ViewGroup.LayoutParams layoutParams;\r\n    private ActivityEditPic2Binding binding;\r\n    Timer timer;\r\n    private ViewGroup mainLayout;\r\n    ArrayList<MultiListItem> menuModels = new ArrayList<>();\r\n    private MultiListItem listModel;\r\n    Gson gson;\r\n    private int showingView = -1;\r\n    private static final int REQUEST_IMAGE = 101;\r\n    private String filename;\r\n    private int xDelta, yDelta;\r\n    private ScaleGestureDetector scaleGestureDetector;\r\n    private float mScaleFactor = 1.0f;\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n\r\n        act = this;\r\n        binding= DataBindingUtil.setContentView(act, R.layout.activity_edit_pic2);\r\n        imageView = new ImageView(EditPicActivity.this);\r\n        scaleGestureDetector = new ScaleGestureDetector(this, new ScaleListener());\r\n\r\n        gson = new Gson();\r\n        windowwidth = getWindowManager().getDefaultDisplay().getWidth();\r\n        windowheight = getWindowManager().getDefaultDisplay().getHeight();\r\n        Recommendation();\r\n        if (getIntent().hasExtra(\"flag\")) {\r\n            int flag = getIntent().getIntExtra(\"flag\", -1);\r\n            if (flag == VIEW_RECOMDATION) {\r\n                showingView = VIEW_RECOMDATION;\r\n            }\r\n        }\r\n        if (showingView == VIEW_RECOMDATION)\r\n            viewRecomdation();\r\n\r\n    }\r\n\r\n    private void viewRecomdation() {\r\n        binding.recoText.setVisibility(View.VISIBLE);\r\n        binding.recoText.setText(getString(R.string.recommendation_text));\r\n        binding.recommendation.setVisibility(View.VISIBLE);\r\n        mainLayout = (RelativeLayout) findViewById(R.id.main);\r\n\r\n        binding.recoframe.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n//                Intent pickPhoto = new Intent(Intent.ACTION_PICK, android.provider.MediaStore.Images.Media.EXTERNAL_CONTENT_URI);\r\n//                startActivityForResult(pickPhoto , 1);\r\n                Intent intent = new Intent(Intent.ACTION_GET_CONTENT);\r\n                intent.setType(\"image/*\");\r\n                startActivityForResult(intent, REQUEST_IMAGE);\r\n\r\n            }\r\n        });\r\n\r\n        listModel = gson.fromJson(getIntent().getStringExtra(\"detailsObj\"), MultiListItem.class);\r\n        Log.e(\"-- \", getIntent().getStringExtra(\"detailsObj\"));\r\n        Recommendation();\r\n    }\r\n    public void Recommendation() {\r\n\r\n        ArrayList<MultiListItem> menuModels = new ArrayList<>();\r\n        MultiListItem model = new MultiListItem();\r\n        model.setLayoutType(MultiListItem.ACTIVITY_VIEWALLIMAGE);\r\n        model.setImage(R.drawable.recfirs);\r\n        menuModels.add(model);\r\n\r\n        model = new MultiListItem();\r\n        model.setLayoutType(MultiListItem.ACTIVITY_VIEWALLIMAGE);\r\n        model.setImage(R.drawable.firstn);\r\n        menuModels.add(model);\r\n\r\n        model = new MultiListItem();\r\n        model.setLayoutType(MultiListItem.ACTIVITY_VIEWALLIMAGE);\r\n        model.setImage(R.drawable.secondn);\r\n        menuModels.add(model);\r\n\r\n        model = new MultiListItem();\r\n        model.setLayoutType(MultiListItem.ACTIVITY_VIEWALLIMAGE);\r\n        model.setImage(R.drawable.thirdn);\r\n        menuModels.add(model);\r\n\r\n        model = new MultiListItem();\r\n        model.setLayoutType(MultiListItem.ACTIVITY_VIEWALLIMAGE);\r\n        model.setImage(R.drawable.fourn);\r\n        menuModels.add(model);\r\n\r\n        model = new MultiListItem();\r\n        model.setLayoutType(MultiListItem.ACTIVITY_VIEWALLIMAGE);\r\n        model.setImage(R.drawable.five);\r\n        menuModels.add(model);\r\n\r\n        model = new MultiListItem();\r\n        model.setLayoutType(MultiListItem.ACTIVITY_VIEWALLIMAGE);\r\n        model.setImage(R.drawable.sixn);\r\n        menuModels.add(model);\r\n\r\n        model = new MultiListItem();\r\n        model.setLayoutType(MultiListItem.ACTIVITY_VIEWALLIMAGE);\r\n        model.setImage(R.drawable.\r\n                firstn);\r\n        menuModels.add(model);\r\n\r\n        model = new MultiListItem();\r\n        model.setLayoutType(MultiListItem.ACTIVITY_VIEWALLIMAGE);\r\n        model.setImage(R.drawable.secondn);\r\n        menuModels.add(model);\r\n\r\n        model = new MultiListItem();\r\n        model.setLayoutType(MultiListItem.ACTIVITY_VIEWALLIMAGE);\r\n        model.setImage(R.drawable.thirdn);\r\n        menuModels.add(model);\r\n\r\n        model = new MultiListItem();\r\n        model.setLayoutType(MultiListItem.ACTIVITY_VIEWALLIMAGE);\r\n        model.setImage(R.drawable.fourn);\r\n        menuModels.add(model);\r\n\r\n        model = new MultiListItem();\r\n        model.setLayoutType(MultiListItem.ACTIVITY_VIEWALLIMAGE);\r\n        model.setImage(R.drawable.recofifth);\r\n        menuModels.add(model);\r\n\r\n        model = new MultiListItem();\r\n        model.setLayoutType(MultiListItem.ACTIVITY_VIEWALLIMAGE);\r\n        model.setImage(R.drawable.five);\r\n        menuModels.add(model);\r\n\r\n        model = new MultiListItem();\r\n        model.setLayoutType(MultiListItem.ACTIVITY_VIEWALLIMAGE);\r\n        model.setImage(R.drawable.sixn);\r\n        menuModels.add(model);\r\n\r\n        model = new MultiListItem();\r\n        model.setLayoutType(MultiListItem.ACTIVITY_VIEWALLIMAGE);\r\n        model.setImage(R.drawable.recfirs);\r\n        menuModels.add(model);\r\n        MenuAddaptor menuAddaptor = new MenuAddaptor(menuModels, act);\r\n        binding.viewRecoRecyclerrrr.setLayoutManager(new GridLayoutManager(this,3));\r\n        binding.viewRecoRecyclerrrr.setHasFixedSize(true);\r\n        binding.viewRecoRecyclerrrr.setAdapter(menuAddaptor);\r\n    }\r\n    protected void onActivityResult(int requestCode, int resultCode, @Nullable Intent data) {\r\n        super.onActivityResult(requestCode, resultCode, data);\r\n        if (resultCode == RESULT_OK) {\r\n            switch (requestCode) {\r\n                case REQUEST_IMAGE: {\r\n                    if (data != null && data.getData() != null) {\r\n                        startCrop(data.getData());\r\n                    }\r\n                    break;\r\n                }\r\n                case UCrop.REQUEST_CROP: {\r\n                    createImageView();\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    boolean isAdded=false;\r\n    private void createImageView() {\r\n        File file = new File(getCacheDir(), filename);\r\n        Bitmap bmp = BitmapFactory.decodeFile(file.getAbsolutePath());\r\n     //   ImageView imageView = new ImageView(EditPicActivity.this);\r\n\r\n        FrameLayout.LayoutParams params = new FrameLayout.LayoutParams(250, 250);\r\n        params.leftMargin = 0;\r\n        params.topMargin = 0;\r\n        imageView.setLayoutParams(params);\r\n        imageView.setImageBitmap(bmp);\r\n        imageView.setOnTouchListener(touchListener);\r\n        if (!isAdded) {\r\n            binding.recoImageee.addView(imageView);\r\n            file.delete();\r\n            isAdded=true;\r\n            binding.recoframe.setVisibility(View.GONE);\r\n        }\r\n    }\r\n    @Override public boolean onTouchEvent(MotionEvent motionEvent) {\r\n        scaleGestureDetector.onTouchEvent(motionEvent);\r\n        return true;\r\n    }\r\n    private void startCrop(Uri data) {\r\n        String name = getFileName(data);\r\n        File file = new File(getCacheDir(), name);\r\n        filename = name;\r\n        UCrop uCrop = UCrop.of(data, Uri.fromFile(file));\r\n        uCrop.start(this);\r\n    }\r\n    private class ScaleListener extends ScaleGestureDetector.SimpleOnScaleGestureListener {\r\n        @Override\r\n        public boolean onScale(ScaleGestureDetector scaleGestureDetector) {\r\n            mScaleFactor *= scaleGestureDetector.getScaleFactor();\r\n            mScaleFactor = Math.max(0.1f, Math.min(mScaleFactor, 10.0f));\r\n            imageView.setScaleX(mScaleFactor);\r\n            imageView.setScaleY(mScaleFactor);\r\n            return true;\r\n        }\r\n    }\r\n    private View.OnTouchListener touchListener = new View.OnTouchListener() {\r\n        @Override public boolean onTouch(View view, MotionEvent event) {\r\n            final int x = (int) event.getRawX();\r\n            final int y = (int) event.getRawY();\r\n\r\n            switch (event.getAction() & MotionEvent.ACTION_MASK) {\r\n                case MotionEvent.ACTION_DOWN: {\r\n                    FrameLayout.LayoutParams lParams = (FrameLayout.LayoutParams) view.getLayoutParams();\r\n\r\n                    xDelta = x - lParams.leftMargin;\r\n                    yDelta = y - lParams.topMargin;\r\n                    break;\r\n                }\r\n                case MotionEvent.ACTION_UP: {\r\n                    Toast.makeText(getApplicationContext(), \"Объект перемещён\", Toast.LENGTH_SHORT).show();\r\n                    break;\r\n                }\r\n                case MotionEvent.ACTION_MOVE: {\r\n                    if (x - xDelta + view.getWidth() <= binding.recoImageee.getWidth()\r\n                            && y - yDelta + view.getHeight() <= binding.recoImageee.getHeight()\r\n                            && x - xDelta >= 0\r\n                            && y - yDelta >= 0) {\r\n                        FrameLayout.LayoutParams layoutParams =\r\n                                (FrameLayout.LayoutParams) view.getLayoutParams();\r\n                        layoutParams.leftMargin = x - xDelta;\r\n                        layoutParams.topMargin = y - yDelta;\r\n                        layoutParams.rightMargin = 0;\r\n                        layoutParams.bottomMargin = 0;\r\n                        view.setLayoutParams(layoutParams);\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n            binding.recoImageee.invalidate();\r\n            return true;\r\n        }\r\n    };\r\n    public String getFileName(Uri uri) {\r\n        String result = null;\r\n        if (uri.getScheme().equals(\"content\")) {\r\n            Cursor cursor = getContentResolver().query(uri, null, null, null, null);\r\n            try {\r\n                if (cursor != null && cursor.moveToFirst()) {\r\n                    result = cursor.getString(cursor.getColumnIndex(OpenableColumns.DISPLAY_NAME));\r\n                }\r\n            } finally {\r\n                cursor.close();\r\n            }\r\n        }\r\n        if (result == null) {\r\n            result = uri.getPath();\r\n            int cut = result.lastIndexOf('/');\r\n            if (cut != -1) {\r\n                result = result.substring(cut + 1);\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n    @Override public void onItemSelection(int position, MultiListItem listModel) {\r\n         binding.recoImageee.setBackgroundResource(listModel.getImage());\r\n    }\r\n\r\n\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/app/brandmania/Activity/EditPicActivity.java	(revision 90317a36ad9c00f7df6d99091ebb42ca4ae706b0)
+++ app/src/main/java/com/app/brandmania/Activity/EditPicActivity.java	(date 1605017481429)
@@ -18,6 +18,7 @@
 import android.view.ScaleGestureDetector;
 import android.view.View;
 import android.view.ViewGroup;
+import android.view.WindowManager;
 import android.widget.FrameLayout;
 import android.widget.ImageView;
 import android.widget.RelativeLayout;
@@ -65,7 +66,7 @@
         binding= DataBindingUtil.setContentView(act, R.layout.activity_edit_pic2);
         imageView = new ImageView(EditPicActivity.this);
         scaleGestureDetector = new ScaleGestureDetector(this, new ScaleListener());
-
+        getWindow().setFlags(WindowManager.LayoutParams.FLAG_SECURE, WindowManager.LayoutParams.FLAG_SECURE);
         gson = new Gson();
         windowwidth = getWindowManager().getDefaultDisplay().getWidth();
         windowheight = getWindowManager().getDefaultDisplay().getHeight();
Index: app/src/main/java/com/app/brandmania/Activity/SubscriptionActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.app.brandmania.Activity;\r\n\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.databinding.DataBindingUtil;\r\nimport androidx.recyclerview.widget.LinearLayoutManager;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport android.app.Activity;\r\nimport android.os.Bundle;\r\nimport android.util.Log;\r\nimport android.view.View;\r\n\r\nimport com.android.volley.AuthFailureError;\r\nimport com.android.volley.Request;\r\nimport com.android.volley.RequestQueue;\r\nimport com.android.volley.Response;\r\nimport com.android.volley.VolleyError;\r\nimport com.android.volley.toolbox.StringRequest;\r\nimport com.android.volley.toolbox.Volley;\r\nimport com.app.brandmania.Adapter.BrandAdapter;\r\nimport com.app.brandmania.Common.PreafManager;\r\nimport com.app.brandmania.Model.BrandListItem;\r\nimport com.app.brandmania.R;\r\nimport com.app.brandmania.Utils.APIs;\r\nimport com.app.brandmania.Utils.CodeReUse;\r\nimport com.app.brandmania.Utils.Utility;\r\nimport com.app.brandmania.databinding.ActivitySubscriptionBinding;\r\nimport com.app.brandmania.databinding.ActivityViewBrandBinding;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\n\r\npublic class SubscriptionActivity extends AppCompatActivity {\r\n    Activity act;\r\n    private ActivitySubscriptionBinding binding;\r\n    ArrayList<BrandListItem> multiListItems=new ArrayList<>();\r\n    PreafManager preafManager;\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        setTheme(R.style.AppTheme_material_theme);\r\n        super.onCreate(savedInstanceState);\r\n        act=this;\r\n        preafManager=new PreafManager(this);\r\n        binding= DataBindingUtil.setContentView(act,R.layout.activity_subscription);\r\n        binding.BackButtonMember.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                onBackPressed();\r\n            }\r\n\r\n        });\r\n        startAnimation();\r\n        getBrandList();\r\n    }\r\n    private void startAnimation() {\r\n        binding.shimmerViewContainer.startShimmer();\r\n        binding.shimmerViewContainer.setVisibility(View.VISIBLE);\r\n        binding.getBrandList.setVisibility(View.GONE);\r\n        binding.emptyStateLayout.setVisibility(View.GONE);\r\n    }\r\n    private void GetBrandAddaptor() {\r\n\r\n        BrandAdapter MenuAddaptor = new BrandAdapter(multiListItems, this);\r\n        RecyclerView.LayoutManager mLayoutManager = new LinearLayoutManager(act, RecyclerView.VERTICAL, false);\r\n        binding.getBrandList.setHasFixedSize(true);\r\n        binding.getBrandList.setLayoutManager(mLayoutManager);\r\n        binding.getBrandList.setAdapter(MenuAddaptor);\r\n\r\n    }\r\n    private void getBrandList() {\r\n\r\n        Utility.Log(\"API : \", APIs.GET_BRAND);\r\n        StringRequest stringRequest = new StringRequest(Request.Method.POST, APIs.GET_BRAND, new Response.Listener<String>() {\r\n            @Override\r\n            public void onResponse(String response) {\r\n\r\n                Utility.Log(\"GET_BRAND : \", response);\r\n\r\n//                try {\r\n//                    JSONObject jsonObject = new JSONObject(response);\r\n//\r\n//                    multiListItems = ResponseHandler.HandleGetBrandList(jsonObject);\r\n//\r\n//                    if (multiListItems != null && multiListItems.size() != 0) {\r\n//                        GetBrandAddaptor();\r\n//                        binding.shimmerViewContainer.stopShimmer();\r\n//                        binding.shimmerViewContainer.setVisibility(View.GONE);\r\n//                        binding.getBrandList.setVisibility(View.VISIBLE);\r\n//                        binding.emptyStateLayout.setVisibility(View.GONE);\r\n//                    }\r\n//                    if (multiListItems == null || multiListItems.size() == 0) {\r\n//                        binding.emptyStateLayout.setVisibility(View.VISIBLE);\r\n//                        binding.getBrandList.setVisibility(View.GONE);\r\n//                        binding.shimmerViewContainer.stopShimmer();\r\n//                        binding.shimmerViewContainer.setVisibility(View.GONE);\r\n//                    }\r\n//\r\n//\r\n//\r\n//\r\n//\r\n//                } catch (JSONException e) {\r\n//                    e.printStackTrace();\r\n//                }\r\n\r\n\r\n            }\r\n        },\r\n                new Response.ErrorListener() {\r\n                    @Override\r\n                    public void onErrorResponse(VolleyError error) {\r\n\r\n                        error.printStackTrace();\r\n\r\n                        binding.swipeContainer.setRefreshing(false);\r\n                        binding.emptyStateLayout.setVisibility(View.VISIBLE);\r\n                        binding.getBrandList.setVisibility(View.GONE);\r\n                        binding.shimmerViewContainer.stopShimmer();\r\n                        binding.shimmerViewContainer.setVisibility(View.GONE);\r\n\r\n                    }\r\n                }\r\n        ) {\r\n            /**\r\n             * Passing some request headers*\r\n             */\r\n\r\n            @Override\r\n            public Map<String, String> getHeaders() throws AuthFailureError {\r\n                Map<String, String> params = new HashMap<String, String>();\r\n                params.put(\"Accept\", \"application/json\");\r\n                params.put(\"Content-Type\", \"application/json\");\r\n                params.put(\"Authorization\",\"Bearer \"+preafManager.getUserToken());\r\n                Log.e(\"Token\",params.toString());\r\n                return params;\r\n            }\r\n\r\n\r\n            @Override\r\n            protected Map<String, String> getParams() {\r\n                Map<String, String> params = new HashMap<>();\r\n\r\n                Log.e(\"DateNdClass\", params.toString());\r\n                //params.put(\"upload_type_id\", String.valueOf(Constant.ADD_NOTICE));\r\n                Utility.Log(\"POSTED-PARAMS-\", params.toString());\r\n                return params;\r\n            }\r\n\r\n        };\r\n\r\n        RequestQueue queue = Volley.newRequestQueue(getApplicationContext());\r\n        queue.add(stringRequest);\r\n    }\r\n    @Override\r\n    public void onBackPressed() {\r\n        CodeReUse.activityBackPress(act);\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/app/brandmania/Activity/SubscriptionActivity.java	(revision 90317a36ad9c00f7df6d99091ebb42ca4ae706b0)
+++ app/src/main/java/com/app/brandmania/Activity/SubscriptionActivity.java	(date 1605017481385)
@@ -9,6 +9,7 @@
 import android.os.Bundle;
 import android.util.Log;
 import android.view.View;
+import android.view.WindowManager;
 
 import com.android.volley.AuthFailureError;
 import com.android.volley.Request;
@@ -42,6 +43,7 @@
         super.onCreate(savedInstanceState);
         act=this;
         preafManager=new PreafManager(this);
+        getWindow().setFlags(WindowManager.LayoutParams.FLAG_SECURE, WindowManager.LayoutParams.FLAG_SECURE);
         binding= DataBindingUtil.setContentView(act,R.layout.activity_subscription);
         binding.BackButtonMember.setOnClickListener(new View.OnClickListener() {
             @Override
Index: app/src/main/java/com/app/brandmania/Connection/MyFirebaseMessagingService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.app.brandmania.Connection;\r\n\r\nimport android.app.Notification;\r\nimport android.app.NotificationChannel;\r\nimport android.app.NotificationManager;\r\nimport android.app.PendingIntent;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.graphics.BitmapFactory;\r\nimport android.graphics.Color;\r\nimport android.media.RingtoneManager;\r\nimport android.net.Uri;\r\nimport android.os.Build;\r\nimport android.util.Log;\r\n\r\nimport androidx.core.app.NotificationCompat;\r\n\r\nimport com.google.firebase.messaging.FirebaseMessagingService;\r\nimport com.google.firebase.messaging.RemoteMessage;\r\nimport com.app.brandmania.Activity.HomeActivity;\r\nimport com.app.brandmania.Activity.ViewAllImage;\r\nimport com.app.brandmania.Activity.ViewBrandActivity;\r\nimport com.app.brandmania.Common.PreafManager;\r\nimport com.app.brandmania.R;\r\nimport com.app.brandmania.Utils.CodeReUse;\r\nimport com.app.brandmania.Utils.Utility;\r\n\r\npublic class MyFirebaseMessagingService extends FirebaseMessagingService {\r\n\r\n//    @Override\r\n//    public void onNewToken(String s) {\r\n//        super.onNewToken(s);\r\n//        Log.e(\"NEW_TOKEN\",s);\r\n//    }\r\n//\r\n//    @Override\r\n//    public void onMessageReceived(RemoteMessage remoteMessage) {\r\n//        super.onMessageReceived(remoteMessage);\r\n//        Log.e(\"remoteMessage\", remoteMessage.getData().toString());\r\n//\r\n//        // Checking for first time launch - before calling setContentView()\r\n//        PreafManager prefManager = new PreafManager(getApplicationContext());\r\n//\r\n//        //if (prefManager.getReceiveNotification()) {\r\n//        ///         removePendingOrders(remoteMessage.getData().get(\"message\"));\r\n//        Utility.Log(\"Notification\", remoteMessage.getData().get(\"title\") + \"-\" + remoteMessage.getData().get(\"msg\") + \"-\" + remoteMessage.getData().get(\"flag\"));\r\n//\r\n//\r\n//    }\r\n\r\n    public static final String TAG = MyFirebaseMessagingService.class.getSimpleName();\r\n\r\n\r\n    @Override\r\n    public void onNewToken(String s) {\r\n        super.onNewToken(s);\r\n    }\r\n\r\n    @Override\r\n    public void onMessageReceived( RemoteMessage remoteMessage) {\r\n        super.onMessageReceived(remoteMessage);\r\n        Log.e(\"remoteMessage\", remoteMessage.getData().toString());\r\n\r\n        // Checking for first time launch - before calling setContentView()\r\n        PreafManager prefManager = new PreafManager(getApplicationContext());\r\n\r\n        //if (prefManager.getReceiveNotification()) {\r\n        ///         removePendingOrders(remoteMessage.getData().get(\"message\"));\r\n        Utility.Log(\"Notification\", remoteMessage.getData().get(\"title\") + \"-\" + remoteMessage.getData().get(\"msg\") + \"-\" + remoteMessage.getData().get(\"flag\"));\r\n\r\n        //Utility.Log(\"Notification\", remoteMessage.getNotification().getTitle() + \"- \" + remoteMessage.getNotification().getBody()+\"-\"+remoteMessage.getNotification().);\r\n        shownotification(remoteMessage.getData().get(\"title\"), remoteMessage.getData().get(\"msg\"), remoteMessage.getData().get(\"flag\"));\r\n        //shownotification(remoteMessage.getNotification().getTitle(), remoteMessage.getNotification().getBody());\r\n        //  }\r\n\r\n    }\r\n\r\n\r\n    private void shownotification(String title, String msg, String message) {\r\n\r\n\r\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {\r\n\r\n            NotificationManager mNotificationManager =\r\n                    (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE);\r\n            int importance = NotificationManager.IMPORTANCE_HIGH;\r\n            NotificationChannel mChannel = new NotificationChannel(CodeReUse.CHANNEL_ID, CodeReUse.CHANNEL_NAME, importance);\r\n            mChannel.setDescription(CodeReUse.CHANNEL_DESCRIPTION);\r\n            mChannel.enableLights(true);\r\n            mChannel.setLightColor(Color.RED);\r\n            mChannel.enableVibration(true);\r\n            //mChannel.setSound(soundUri, audioAttributes);\r\n            mChannel.setVibrationPattern(new long[]{100, 200, 300, 400, 500, 400, 300, 200, 400});\r\n            mNotificationManager.createNotificationChannel(mChannel);\r\n        }\r\n        String copiedMessage = message;\r\n        Intent intent = null;\r\n        if (copiedMessage.equalsIgnoreCase(\"addBrand\")) {\r\n            intent = new Intent(this, ViewBrandActivity.class);\r\n\r\n        } else if (copiedMessage.equalsIgnoreCase(\"addFrame\")) {\r\n            intent = new Intent(this, ViewBrandActivity.class);\r\n        }\r\n        else {\r\n        intent = new Intent(this, HomeActivity.class);\r\n        }\r\n        intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);\r\n        PendingIntent pendingIntent = PendingIntent.getActivity(this, 0, intent, PendingIntent.FLAG_UPDATE_CURRENT);\r\n\r\n        Uri defaultSoundUri = RingtoneManager.getDefaultUri(RingtoneManager.TYPE_NOTIFICATION);\r\n        NotificationCompat.Builder notificationBuilder = new NotificationCompat.Builder(this, CodeReUse.CHANNEL_ID)\r\n                .setSmallIcon(R.drawable.ic_launcher_icon)\r\n                .setLargeIcon(BitmapFactory.decodeResource(getApplication().getResources(), R.drawable.ic_launcher_icon))\r\n                .setContentTitle(title)\r\n                .setStyle(new NotificationCompat.BigTextStyle().bigText(msg))\r\n                .setContentText(msg)\r\n                .setAutoCancel(false)\r\n                .setPriority(Notification.PRIORITY_MAX)\r\n                .setSound(defaultSoundUri)\r\n                .setContentIntent(pendingIntent);\r\n\r\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\r\n            notificationBuilder.setSmallIcon(R.drawable.ic_launcher_icon);\r\n            notificationBuilder.setColor(getResources().getColor(R.color.colorPrimary));\r\n        } else {\r\n            notificationBuilder.setSmallIcon(R.drawable.ic_launcher_icon);\r\n        }\r\n\r\n        NotificationManager notificationManager = (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE);\r\n\r\n        notificationManager.notify(0, notificationBuilder.build());\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/app/brandmania/Connection/MyFirebaseMessagingService.java	(revision 90317a36ad9c00f7df6d99091ebb42ca4ae706b0)
+++ app/src/main/java/com/app/brandmania/Connection/MyFirebaseMessagingService.java	(date 1605017898564)
@@ -94,7 +94,7 @@
             mNotificationManager.createNotificationChannel(mChannel);
         }
         String copiedMessage = message;
-        Intent intent = null;
+        Intent intent = new Intent(this, HomeActivity.class);;
         if (copiedMessage.equalsIgnoreCase("addBrand")) {
             intent = new Intent(this, ViewBrandActivity.class);
 
Index: app/src/main/java/com/app/brandmania/Activity/ViewBrandActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.app.brandmania.Activity;\r\n\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.databinding.DataBindingUtil;\r\nimport androidx.recyclerview.widget.LinearLayoutManager;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport android.app.Activity;\r\nimport android.content.Intent;\r\nimport android.os.Bundle;\r\nimport android.util.Log;\r\nimport android.view.View;\r\nimport android.view.WindowManager;\r\n\r\nimport com.android.volley.AuthFailureError;\r\nimport com.android.volley.Request;\r\nimport com.android.volley.RequestQueue;\r\nimport com.android.volley.Response;\r\nimport com.android.volley.VolleyError;\r\nimport com.android.volley.toolbox.StringRequest;\r\nimport com.android.volley.toolbox.Volley;\r\nimport com.app.brandmania.Adapter.BrandAdapter;\r\nimport com.app.brandmania.Common.PreafManager;\r\nimport com.app.brandmania.Common.ResponseHandler;\r\nimport com.app.brandmania.Model.BrandListItem;\r\nimport com.app.brandmania.R;\r\nimport com.app.brandmania.Utils.APIs;\r\nimport com.app.brandmania.Utils.CodeReUse;\r\nimport com.app.brandmania.Utils.Utility;\r\n\r\nimport com.app.brandmania.databinding.ActivityViewBrandBinding;\r\n\r\nimport org.json.JSONException;\r\nimport org.json.JSONObject;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\n\r\npublic class ViewBrandActivity extends AppCompatActivity {\r\n    Activity act;\r\n    private ActivityViewBrandBinding binding;\r\n    ArrayList<BrandListItem> multiListItems=new ArrayList<>();\r\n    PreafManager preafManager;\r\n    @Override\r\n    public void onCreate(Bundle savedInstanceState) {\r\n        setTheme(R.style.AppTheme_material_theme);\r\n        super.onCreate(savedInstanceState);\r\n        act=this;\r\n        captureScreenShort();\r\n        preafManager=new PreafManager(this);\r\n        binding= DataBindingUtil.setContentView(act,R.layout.activity_view_brand);\r\n        binding.BackButtonMember.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                onBackPressed();\r\n            }\r\n\r\n        });\r\n        binding.addBrandImage.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                Intent intent=new Intent(getApplicationContext(),AddBrandMultipleActivity.class);\r\n                startActivity(intent);\r\n\r\n            }\r\n        });\r\n        startAnimation();\r\n        getBrandList();\r\n    }\r\n    private void startAnimation() {\r\n        binding.shimmerViewContainer.startShimmer();\r\n        binding.shimmerViewContainer.setVisibility(View.VISIBLE);\r\n        binding.getBrandList.setVisibility(View.GONE);\r\n        binding.emptyStateLayout.setVisibility(View.GONE);\r\n    }\r\n    private void GetBrandAddaptor() {\r\n\r\n        BrandAdapter MenuAddaptor = new BrandAdapter(multiListItems, this);\r\n        RecyclerView.LayoutManager mLayoutManager = new LinearLayoutManager(act, RecyclerView.VERTICAL, false);\r\n        binding.getBrandList.setHasFixedSize(true);\r\n        binding.getBrandList.setLayoutManager(mLayoutManager);\r\n        binding.getBrandList.setAdapter(MenuAddaptor);\r\n\r\n    }\r\n\r\n\r\n    private void getBrandList() {\r\n\r\n        Utility.Log(\"API : \", APIs.GET_BRAND);\r\n        StringRequest stringRequest = new StringRequest(Request.Method.POST, APIs.GET_BRAND, new Response.Listener<String>() {\r\n            @Override\r\n            public void onResponse(String response) {\r\n\r\n                Utility.Log(\"GET_BRAND : \", response);\r\n                ArrayList<BrandListItem> brandListItems=new ArrayList<>();\r\n                try {\r\n\r\n                    JSONObject jsonObject = new JSONObject(response);\r\n                    multiListItems = ResponseHandler.HandleGetBrandList(jsonObject);\r\n                    if (multiListItems != null && multiListItems.size() != 0) {\r\n                        GetBrandAddaptor();\r\n                        binding.shimmerViewContainer.stopShimmer();\r\n                        binding.shimmerViewContainer.setVisibility(View.GONE);\r\n                        binding.getBrandList.setVisibility(View.VISIBLE);\r\n                        binding.emptyStateLayout.setVisibility(View.GONE);\r\n                    }\r\n                    if (multiListItems == null || multiListItems.size() == 0) {\r\n                        binding.emptyStateLayout.setVisibility(View.VISIBLE);\r\n                        binding.getBrandList.setVisibility(View.GONE);\r\n                        binding.shimmerViewContainer.stopShimmer();\r\n                        binding.shimmerViewContainer.setVisibility(View.GONE);\r\n                    }\r\n\r\n\r\n\r\n\r\n\r\n                } catch (JSONException e) {\r\n                    e.printStackTrace();\r\n                }\r\n\r\n\r\n            }\r\n        },\r\n                new Response.ErrorListener() {\r\n                    @Override\r\n                    public void onErrorResponse(VolleyError error) {\r\n\r\n                        error.printStackTrace();\r\n\r\n                        binding.swipeContainer.setRefreshing(false);\r\n                        binding.emptyStateLayout.setVisibility(View.VISIBLE);\r\n                        binding.getBrandList.setVisibility(View.GONE);\r\n                        binding.shimmerViewContainer.stopShimmer();\r\n                        binding.shimmerViewContainer.setVisibility(View.GONE);\r\n\r\n                    }\r\n                }\r\n        ) {\r\n            /**\r\n             * Passing some request headers*\r\n             */\r\n\r\n            @Override\r\n            public Map<String, String> getHeaders() throws AuthFailureError {\r\n                Map<String, String> params = new HashMap<String, String>();\r\n                params.put(\"Accept\", \"application/json\");\r\n                params.put(\"Content-Type\", \"application/json\");\r\n                params.put(\"Authorization\",\"Bearer \"+preafManager.getUserToken());\r\n                Log.e(\"Token\",params.toString());\r\n                return params;\r\n            }\r\n\r\n\r\n            @Override\r\n            protected Map<String, String> getParams() {\r\n                Map<String, String> params = new HashMap<>();\r\n\r\n                Log.e(\"DateNdClass\", params.toString());\r\n                //params.put(\"upload_type_id\", String.valueOf(Constant.ADD_NOTICE));\r\n                Utility.Log(\"POSTED-PARAMS-\", params.toString());\r\n                return params;\r\n            }\r\n\r\n        };\r\n\r\n        RequestQueue queue = Volley.newRequestQueue(getApplicationContext());\r\n        queue.add(stringRequest);\r\n    }\r\n    @Override\r\n    public void onBackPressed() {\r\n        CodeReUse.activityBackPress(act);\r\n    }\r\n    public void captureScreenShort()\r\n    {\r\n        getWindow().setFlags(WindowManager.LayoutParams.FLAG_SECURE, WindowManager.LayoutParams.FLAG_SECURE);\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/app/brandmania/Activity/ViewBrandActivity.java	(revision 90317a36ad9c00f7df6d99091ebb42ca4ae706b0)
+++ app/src/main/java/com/app/brandmania/Activity/ViewBrandActivity.java	(date 1605017481418)
@@ -50,6 +50,7 @@
         captureScreenShort();
         preafManager=new PreafManager(this);
         binding= DataBindingUtil.setContentView(act,R.layout.activity_view_brand);
+        getWindow().setFlags(WindowManager.LayoutParams.FLAG_SECURE, WindowManager.LayoutParams.FLAG_SECURE);
         binding.BackButtonMember.setOnClickListener(new View.OnClickListener() {
             @Override
             public void onClick(View v) {
