Index: app/src/main/java/com/app/brandmania/Fragment/bottom/HomeFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.app.brandmania.Fragment.bottom;\r\n\r\nimport static android.Manifest.permission.CAMERA;\r\nimport static android.Manifest.permission.READ_EXTERNAL_STORAGE;\r\nimport static android.Manifest.permission.WRITE_EXTERNAL_STORAGE;\r\n\r\nimport android.annotation.SuppressLint;\r\nimport android.app.Activity;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.content.pm.PackageManager;\r\nimport android.content.res.ColorStateList;\r\nimport android.graphics.Color;\r\nimport android.graphics.drawable.ColorDrawable;\r\nimport android.net.Uri;\r\nimport android.os.Bundle;\r\nimport android.os.Handler;\r\nimport android.util.Log;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.view.WindowManager;\r\nimport android.view.animation.Animation;\r\nimport android.view.animation.AnimationUtils;\r\nimport android.widget.Toast;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.core.content.ContextCompat;\r\nimport androidx.databinding.DataBindingUtil;\r\nimport androidx.recyclerview.widget.LinearLayoutManager;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\nimport androidx.swiperefreshlayout.widget.SwipeRefreshLayout;\r\n\r\nimport com.android.volley.Request;\r\nimport com.android.volley.RequestQueue;\r\nimport com.android.volley.Response;\r\nimport com.android.volley.VolleyError;\r\nimport com.android.volley.toolbox.StringRequest;\r\nimport com.android.volley.toolbox.Volley;\r\nimport com.app.brandmania.Activity.HomeActivity;\r\nimport com.app.brandmania.Activity.PdfActivity;\r\nimport com.app.brandmania.Activity.ViewNotificationActivity;\r\nimport com.app.brandmania.Activity.basics.ReferNEarnActivity;\r\nimport com.app.brandmania.Activity.brand.AddBrandMultipleActivity;\r\nimport com.app.brandmania.Activity.brand.UpdateBandList;\r\nimport com.app.brandmania.Activity.custom.CustomViewAllActivit;\r\nimport com.app.brandmania.Activity.packages.PackageActivity;\r\nimport com.app.brandmania.Adapter.DasboardAddaptor;\r\nimport com.app.brandmania.Adapter.ViewPagerAdapter;\r\nimport com.app.brandmania.Common.HELPER;\r\nimport com.app.brandmania.Common.MakeMyBrandApp;\r\nimport com.app.brandmania.Common.ObserverActionID;\r\nimport com.app.brandmania.Common.PreafManager;\r\nimport com.app.brandmania.Common.ResponseHandler;\r\nimport com.app.brandmania.Fragment.AddBrandFragment;\r\nimport com.app.brandmania.Fragment.BaseFragment;\r\nimport com.app.brandmania.Fragment.UserNewRegistrationFragment;\r\nimport com.app.brandmania.Fragment.UserRegistrationFragment;\r\nimport com.app.brandmania.Interface.ImageCateItemeInterFace;\r\nimport com.app.brandmania.Interface.ItemMultipleSelectionInterface;\r\nimport com.app.brandmania.Model.BrandListItem;\r\nimport com.app.brandmania.Model.DashBoardItem;\r\nimport com.app.brandmania.Model.FrameItem;\r\nimport com.app.brandmania.Model.ImageList;\r\nimport com.app.brandmania.Model.ViewPagerItem;\r\nimport com.app.brandmania.R;\r\nimport com.app.brandmania.databinding.DialogOfferBinding;\r\nimport com.app.brandmania.databinding.DialogRequestBusinessCategoryRemarksBinding;\r\nimport com.app.brandmania.databinding.FragmentHomeBinding;\r\nimport com.app.brandmania.utils.APIs;\r\nimport com.app.brandmania.utils.CodeReUse;\r\nimport com.app.brandmania.utils.Utility;\r\nimport com.app.brandmania.views.MyBounceInterpolator;\r\nimport com.bumptech.glide.Glide;\r\nimport com.google.android.material.dialog.MaterialAlertDialogBuilder;\r\nimport com.google.firebase.messaging.FirebaseMessaging;\r\n\r\nimport org.json.JSONException;\r\nimport org.json.JSONObject;\r\n\r\nimport java.text.ParseException;\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.ArrayList;\r\nimport java.util.Calendar;\r\nimport java.util.Date;\r\nimport java.util.HashMap;\r\nimport java.util.Locale;\r\nimport java.util.Map;\r\nimport java.util.Observable;\r\nimport java.util.Timer;\r\nimport java.util.TimerTask;\r\n\r\nimport angtrim.com.fivestarslibrary.FiveStarsDialog;\r\nimport angtrim.com.fivestarslibrary.NegativeReviewListener;\r\nimport angtrim.com.fivestarslibrary.ReviewListener;\r\n\r\n\r\npublic class HomeFragment extends BaseFragment implements ItemMultipleSelectionInterface, ImageCateItemeInterFace, NegativeReviewListener, ReviewListener, SwipeRefreshLayout.OnRefreshListener {\r\n    public static int BUSINESS_TYPE = 1;\r\n    ArrayList<DashBoardItem> menuModels = new ArrayList<>();\r\n    DashBoardItem apiResponse;\r\n    BrandListItem brandListItem;\r\n    ArrayList<BrandListItem> multiListItems = new ArrayList<>();\r\n    FiveStarsDialog fiveStarsDialog;\r\n    private DasboardAddaptor dasboardAddaptor;\r\n    ArrayList<FrameItem> brandListItems = new ArrayList<>();\r\n    ArrayList<ViewPagerItem> viewPagerItems = new ArrayList<>();\r\n    Activity act;\r\n    PreafManager preafManager;\r\n    private String deviceToken = \"\";\r\n    private String popupImg;\r\n    private String isActivityStatus;\r\n    private String targetLink;\r\n    private FragmentHomeBinding binding;\r\n    private boolean LIVE_MODE = true;\r\n    private Timer timer;\r\n    private HomeFragment homeFragment;\r\n    static Calendar now = Calendar.getInstance();\r\n    private SelectBrandListBottomFragment bottomSheetFragment;\r\n\r\n\r\n    public interface CUSTOM_TAB_CHANGE_INTERFACE {\r\n        void makeTabChange(int i);\r\n    }\r\n\r\n    public void getDeviceToken() {\r\n        FirebaseMessaging.getInstance().getToken().addOnCompleteListener(task -> {\r\n            if (task.isSuccessful())\r\n                deviceToken = task.getResult();\r\n            UpdateToken();\r\n        });\r\n    }\r\n\r\n    @Override\r\n    public void onResume() {\r\n        act = getActivity();\r\n        assert act != null;\r\n        preafManager = new PreafManager(act);\r\n        if (userRegistrationFragment != null) {\r\n            if (userRegistrationFragment.isVisible()) {\r\n                userRegistrationFragment.dismiss();\r\n            }\r\n        }\r\n        super.onResume();\r\n    }\r\n\r\n    @SuppressLint({\"CheckResult\", \"SimpleDateFormat\"})\r\n    @Override\r\n    public View provideFragmentView(LayoutInflater inflater, ViewGroup parent, Bundle savedInstanceState) {\r\n        act = getActivity();\r\n        binding = DataBindingUtil.inflate(inflater, R.layout.fragment_home, parent, false);\r\n        homeFragment = this;\r\n        fiveStarsDialog = new FiveStarsDialog(act, \"brandmania@gmail.com\");\r\n        //prefManager.setCurrentDate(\"\");\r\n        //prefManager.setCurrentDate(\"2023-08-01\");\r\n        homeLoad();\r\n        return binding.getRoot();\r\n    }\r\n\r\n    AddBrandFragment addBrandFragment;\r\n\r\n    public UserNewRegistrationFragment userRegistrationFragment;\r\n\r\n    public void homeLoad() {\r\n        preafManager = new PreafManager(act);\r\n        binding.infoMsg.setSelected(true);\r\n\r\n        if (LIVE_MODE) {\r\n            act.getWindow().clearFlags(WindowManager.LayoutParams.FLAG_SECURE);\r\n        }\r\n        setActiveBrand();\r\n        if (preafManager.getActiveBrand() != null) {\r\n            Glide.with(act).load(preafManager.getActiveBrand().getLogo());\r\n            binding.businessName.setText(preafManager.getActiveBrand().getName());\r\n        }\r\n\r\n        if (ContextCompat.checkSelfPermission(act, CAMERA) == PackageManager.PERMISSION_GRANTED &&\r\n                ContextCompat.checkSelfPermission(act, READ_EXTERNAL_STORAGE) == PackageManager.PERMISSION_GRANTED &&\r\n                ContextCompat.checkSelfPermission(act, WRITE_EXTERNAL_STORAGE) == PackageManager.PERMISSION_GRANTED) {\r\n            if (preafManager.getUserName().isEmpty()) {\r\n                newUserRegistration();\r\n                //addUserInfo();\r\n            } else if (preafManager.getActiveBrand() == null) {\r\n                if (!HomeActivity.isAddBrandDialogDisplayed) {\r\n                    HomeActivity.isAddBrandDialogDisplayed = true;\r\n                    addBrandList();\r\n                }\r\n            } else {\r\n                RateUs();\r\n            }\r\n        }\r\n        Utility.Log(\"Token::::\", prefManager.getUserToken());\r\n\r\n        binding.showNotification.setOnClickListener(view -> HELPER.ROUTE(act, ViewNotificationActivity.class));\r\n        binding.referCodeLayout.setOnClickListener(v -> {\r\n            if (preafManager.getActiveBrand() != null) {\r\n                HELPER.ROUTE(act, ReferNEarnActivity.class);\r\n            } else {\r\n                addBrandList();\r\n            }\r\n        });\r\n\r\n        binding.referralcodeTxt.setText(preafManager.getReferCode());\r\n\r\n        binding.createDigitalCard.setOnClickListener(view -> {\r\n            if (preafManager.getActiveBrand() != null) {\r\n                if (!preafManager.getActiveBrand().getLogo().isEmpty()) {\r\n                    HELPER.ROUTE(act, PdfActivity.class);\r\n                } else {\r\n                    androidx.appcompat.app.AlertDialog AlertDialogBuilder = new MaterialAlertDialogBuilder(act, R.style.RoundShapeTheme)\r\n                            .setTitle(\"Add Your Logo\")\r\n                            .setMessage(\"Your Logo is empty..!\")\r\n                            .setPositiveButton(\"OK\", (dialogInterface, i) -> HELPER.ROUTE(act, UpdateBandList.class))\r\n                            .setNeutralButton(\"LATER\", (dialogInterface, i) -> {\r\n                            })\r\n                            .show();\r\n                    AlertDialogBuilder.setCancelable(false);\r\n\r\n//                    AlertDialog.Builder alertDialogBuilder = new AlertDialog.Builder(act);\r\n//                    alertDialogBuilder.setTitle(\"Add Your Logo\");\r\n//                    alertDialogBuilder.setMessage(\"Your Logo is empty..!\");\r\n//                    alertDialogBuilder.setPositiveButton(\"Ok\", (arg0, arg1) -> HELPER.ROUTE(act, UpdateBandList.class));\r\n//                    alertDialogBuilder.setNegativeButton(\"Later\", new DialogInterface.OnClickListener() {\r\n//                        @Override\r\n//                        public void onClick(DialogInterface dialog, int which) {\r\n//\r\n//                        }\r\n//                    });\r\n//                    AlertDialog alertDialog = alertDialogBuilder.create();\r\n//                    alertDialog.setCancelable(false);\r\n//                    alertDialog.show();\r\n                }\r\n            } else {\r\n                addBrandList();\r\n            }\r\n        });\r\n        binding.request.setOnClickListener(v -> showRequestForm());\r\n        binding.createCustomImages.setOnClickListener(v -> HELPER.ROUTE(act, CustomViewAllActivit.class));\r\n        binding.createGreetingImages.setOnClickListener(v -> ((CUSTOM_TAB_CHANGE_INTERFACE) act).makeTabChange(1));\r\n        startAnimation();\r\n        loadImagesCategory();\r\n        getBanner();\r\n        binding.swipeContainer.setColorSchemeResources(R.color.colorPrimary, R.color.colorsecond, R.color.colorthird);\r\n\r\n        binding.swipeContainer.setOnRefreshListener(() -> {\r\n            startAnimation();\r\n            loadImagesCategory();\r\n        });\r\n\r\n        //if (Utility.oneTimeCodeExecutes(act)) {\r\n        //Toast.makeText(act, \"Only Once A Day Code Run\", Toast.LENGTH_LONG).show();\r\n        getDeviceToken();\r\n        //}\r\n        //getDeviceToken();\r\n        binding.businessNameDropDown.setOnClickListener(v -> showFragmentList(BUSINESS_TYPE, \"\"));\r\n\r\n        if (!HomeActivity.isAlreadyDisplayedOffer) {\r\n            try {\r\n                String offerValidDate = \"05/11/2021\";\r\n                Date calDate = new Date();\r\n                @SuppressLint(\"SimpleDateFormat\") SimpleDateFormat formatter;\r\n                formatter = new SimpleDateFormat(\"dd/MM/yyyy\");\r\n                String calDateStr = formatter.format(calDate);\r\n\r\n                Date calDateFF;\r\n                calDateFF = formatter.parse(calDateStr);\r\n                Date offerValidDateFF = formatter.parse(offerValidDate);\r\n                assert calDateFF != null;\r\n                if (calDateFF.compareTo(offerValidDateFF) < 0) {\r\n                    diwaliOffer();\r\n                }\r\n            } catch (ParseException e) {\r\n                e.printStackTrace();\r\n            }\r\n        }\r\n        if (!prefManager.getAllFreeImage()) {\r\n            if (preafManager.getActiveBrand() != null) {\r\n                if (preafManager.getActiveBrand().getExpiery_date() != null && !preafManager.getActiveBrand().getExpiery_date().isEmpty() && Utility.isPackageExpired(act)) {\r\n                    binding.infoMsg.setText(\"                           Dear user, your current package is expired on date \" + preafManager.getActiveBrand().getExpiery_date() + \". Please Upgrade your plan and enjoy downloading image, GIF and videos.\");\r\n                    binding.tapActionBtn.setVisibility(View.VISIBLE);\r\n                    binding.easyMessage.setVisibility(View.VISIBLE);\r\n                    binding.easyMessage.setOnClickListener(v -> {\r\n                        HELPER.ROUTE(act, PackageActivity.class);\r\n                    });\r\n                }\r\n            }\r\n        }\r\n        setActiveBrandText();\r\n    }\r\n\r\n\r\n    public void setActiveBrandText() {\r\n\r\n        if (preafManager.getActiveBrand() == null) {\r\n            binding.businessNameDropDown.setVisibility(View.GONE);\r\n            binding.firsttitle.setVisibility(View.GONE);\r\n            binding.noBrandLayout.setVisibility(View.VISIBLE);\r\n            animateButton();\r\n            binding.noBrandLayout.setOnClickListener(v -> {\r\n                HELPER.ROUTE(act, AddBrandMultipleActivity.class);\r\n            });\r\n\r\n        } else {\r\n            binding.businessNameDropDown.setVisibility(View.VISIBLE);\r\n            binding.firsttitle.setVisibility(View.VISIBLE);\r\n            binding.noBrandLayout.setVisibility(View.GONE);\r\n\r\n        }\r\n\r\n    }\r\n\r\n    public void newUserRegistration() {\r\n\r\n        if (userRegistrationFragment != null) {\r\n            if (userRegistrationFragment.isVisible()) {\r\n                userRegistrationFragment.dismiss();\r\n            }\r\n\r\n        }\r\n        userRegistrationFragment = new UserNewRegistrationFragment();\r\n        userRegistrationFragment.show(getParentFragmentManager(), \"\");\r\n    }\r\n\r\n    public void setActiveBrand() {\r\n\r\n        if (preafManager.getAddBrandList() != null && preafManager.getAddBrandList().size() != 0) {\r\n            if (preafManager.getActiveBrand() == null) {\r\n                preafManager.setActiveBrand(preafManager.getAddBrandList().get(0));\r\n                preafManager = new PreafManager(act);\r\n            }\r\n        }\r\n    }\r\n\r\n    public void addBrandList() {\r\n        try {\r\n            if (addBrandFragment != null && bottomSheetFragment != null) {\r\n                if (bottomSheetFragment.isVisible()) {\r\n                    bottomSheetFragment.dismiss();\r\n                }\r\n            }\r\n            addBrandFragment = new AddBrandFragment();\r\n            addBrandFragment.show(getParentFragmentManager(), \"\");\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    UserRegistrationFragment registrationFragment;\r\n\r\n    public void addUserInfo() {\r\n        if (registrationFragment != null) {\r\n            if (registrationFragment.isVisible()) {\r\n                registrationFragment.dismiss();\r\n            }\r\n        }\r\n\r\n        registrationFragment = new UserRegistrationFragment();\r\n        registrationFragment.show(getParentFragmentManager(), \"\");\r\n    }\r\n\r\n    private void startAnimation() {\r\n        binding.shimmerViewContainer.startShimmer();\r\n        binding.shimmerViewContainer.setVisibility(View.VISIBLE);\r\n        binding.swipeContainer.setVisibility(View.GONE);\r\n    }\r\n\r\n    public void showFragmentList(int callingFlag, String title) {\r\n        bottomSheetFragment = new SelectBrandListBottomFragment();\r\n        bottomSheetFragment.setHomeFragment(homeFragment);\r\n        bottomSheetFragment.setListData(callingFlag, title);\r\n        bottomSheetFragment.setLayoutType(1);\r\n        if (bottomSheetFragment.isVisible()) {\r\n            bottomSheetFragment.dismiss();\r\n        }\r\n        if (bottomSheetFragment.isAdded()) {\r\n            bottomSheetFragment.dismiss();\r\n        }\r\n        bottomSheetFragment.show(getChildFragmentManager(), bottomSheetFragment.getTag());\r\n    }\r\n\r\n    public void setAdapter() {\r\n        dasboardAddaptor = new DasboardAddaptor(menuModels, act);\r\n        RecyclerView.LayoutManager mLayoutManager = new LinearLayoutManager(act, RecyclerView.VERTICAL, false);\r\n        binding.rocommRecycler.setHasFixedSize(true);\r\n\r\n        binding.rocommRecycler.setLayoutManager(mLayoutManager);\r\n        binding.rocommRecycler.setAdapter(dasboardAddaptor);\r\n    }\r\n\r\n    @Override\r\n    public void onAttach(@NonNull Context context) {\r\n        super.onAttach(context);\r\n    }\r\n\r\n    private void getBanner() {\r\n        binding.swipeContainer.setRefreshing(true);\r\n        StringRequest stringRequest = new StringRequest(Request.Method.GET, APIs.GET_BANNER, response -> {\r\n            try {\r\n                JSONObject jsonObject = new JSONObject(response);\r\n                binding.swipeContainer.setRefreshing(false);\r\n                viewPagerItems = ResponseHandler.HandleGetBanneList(jsonObject);\r\n                if (viewPagerItems != null && viewPagerItems.size() != 0) {\r\n                    ViewPagerAdapter sliderAdapter = new ViewPagerAdapter(viewPagerItems, act);\r\n                    binding.ViewPagerView.setAdapter(sliderAdapter);\r\n                    TimerTask timerTask = new TimerTask() {\r\n                        @Override\r\n                        public void run() {\r\n                            binding.ViewPagerView.post(() -> binding.ViewPagerView.setCurrentItem((binding.ViewPagerView.getCurrentItem() + 1) % sliderAdapter.getCount(), true));\r\n                        }\r\n                    };\r\n                    timer = new Timer();\r\n                    timer.schedule(timerTask, 10000, 10000);\r\n                }\r\n\r\n            } catch (JSONException e) {\r\n                e.printStackTrace();\r\n            }\r\n\r\n        },\r\n                error -> {\r\n                    binding.swipeContainer.setRefreshing(false);\r\n                    error.printStackTrace();\r\n                }\r\n        ) {\r\n            @Override\r\n            public Map<String, String> getHeaders() {\r\n                return getHeader(CodeReUse.GET_FORM_HEADER);\r\n            }\r\n        };\r\n\r\n        RequestQueue queue = Volley.newRequestQueue(act);\r\n        queue.add(stringRequest);\r\n    }\r\n\r\n    private void loadImagesCategory() {\r\n        Utility.Log(\"API : \", APIs.GET_IMAGE_CATEGORY + \"?page=1\");\r\n        StringRequest stringRequest = new StringRequest(Request.Method.POST, APIs.GET_IMAGE_CATEGORY + \"?page=1\", response -> {\r\n            binding.swipeContainer.setRefreshing(false);\r\n            try {\r\n                //Log.e(\"dashboard\", gson.toJson(response));\r\n                JSONObject jsonObject = new JSONObject(response);\r\n                apiResponse = ResponseHandler.HandleGetImageCategory(act, jsonObject);\r\n                if (apiResponse.getDashBoardItems() != null) {\r\n                    menuModels = apiResponse.getDashBoardItems();\r\n                    if (menuModels != null && menuModels.size() != 0) {\r\n                        setAdapter();\r\n                        binding.shimmerViewContainer.stopShimmer();\r\n                        binding.shimmerViewContainer.setVisibility(View.GONE);\r\n                        binding.swipeContainer.setVisibility(View.VISIBLE);\r\n                    }\r\n                }\r\n\r\n                if (apiResponse.getLinks() != null) {\r\n                    if (apiResponse.getLinks().getNextPageUrl() != null && !apiResponse.getLinks().getNextPageUrl().equalsIgnoreCase(\"null\") && !apiResponse.getLinks().getNextPageUrl().isEmpty()) {\r\n                        getImageCategoryNextPage(apiResponse.getLinks().getNextPageUrl());\r\n                    }\r\n                }\r\n\r\n            } catch (JSONException e) {\r\n                e.printStackTrace();\r\n            }\r\n\r\n        },\r\n                error -> {\r\n                    binding.swipeContainer.setRefreshing(false);\r\n                    error.printStackTrace();\r\n                    binding.swipeContainer.setRefreshing(false);\r\n                    binding.swipeContainer.setVisibility(View.GONE);\r\n                    binding.shimmerViewContainer.stopShimmer();\r\n                    binding.shimmerViewContainer.setVisibility(View.GONE);\r\n                }\r\n        ) {\r\n            @Override\r\n            public Map<String, String> getHeaders() {\r\n                return getHeader(CodeReUse.GET_FORM_HEADER);\r\n            }\r\n        };\r\n        RequestQueue queue = Volley.newRequestQueue(act);\r\n        queue.add(stringRequest);\r\n    }\r\n\r\n    private void getImageCategoryNextPage(String nextPageUrl) {\r\n        Utility.Log(\"API-\", nextPageUrl);\r\n        StringRequest stringRequest = new StringRequest(Request.Method.POST, nextPageUrl, response -> {\r\n            binding.swipeContainer.setRefreshing(false);\r\n            Utility.Log(\"GET_IMAGE_CATEGORY : \", response);\r\n            try {\r\n                JSONObject jsonObject = new JSONObject(response);\r\n                apiResponse = ResponseHandler.HandleGetImageCategory(act, jsonObject);\r\n                if (apiResponse.getDashBoardItems() != null) {\r\n                    if (menuModels != null && menuModels.size() != 0) {\r\n                        int lastPos = menuModels.size();\r\n                        menuModels.addAll(menuModels.size(), apiResponse.getDashBoardItems());\r\n                        dasboardAddaptor.notifyItemRangeInserted(lastPos, apiResponse.getDashBoardItems().size());\r\n                    } else {\r\n                        menuModels = new ArrayList<>();\r\n                        menuModels.addAll(0, apiResponse.getDashBoardItems());\r\n                    }\r\n                }\r\n                if (apiResponse.getLinks() != null) {\r\n                    if (apiResponse.getLinks().getNextPageUrl() != null && !apiResponse.getLinks().getNextPageUrl().equalsIgnoreCase(\"null\") && !apiResponse.getLinks().getNextPageUrl().isEmpty()) {\r\n                        getImageCategoryNextPage(apiResponse.getLinks().getNextPageUrl());\r\n                    }\r\n                }\r\n            } catch (JSONException e) {\r\n                e.printStackTrace();\r\n            }\r\n\r\n        },\r\n                error -> {\r\n                    binding.swipeContainer.setRefreshing(false);\r\n                    error.printStackTrace();\r\n\r\n                }\r\n        ) {\r\n            @Override\r\n            public Map<String, String> getHeaders() {\r\n                return getHeader(CodeReUse.GET_FORM_HEADER);\r\n            }\r\n        };\r\n        RequestQueue queue = Volley.newRequestQueue(act);\r\n        queue.add(stringRequest);\r\n    }\r\n\r\n    private void UpdateToken() {\r\n        Utility.Log(\"UpdateToken\", APIs.UPDATE_TOKEN);\r\n\r\n        StringRequest stringRequest = new StringRequest(Request.Method.POST, APIs.UPDATE_TOKEN, response -> {\r\n            JSONObject jsonObject = ResponseHandler.createJsonObject(response);\r\n            Log.e(\"UpdateToken::::::\", gson.toJson(jsonObject));\r\n            try {\r\n                if (jsonObject != null) {\r\n                    preafManager.setAppTutorial(ResponseHandler.getString(ResponseHandler.getJSONArray(jsonObject, \"data\").getJSONObject(0), \"video_url_path\"));\r\n\r\n                    JSONObject jsonArray1 = jsonObject.getJSONObject(\"message\");\r\n                    preafManager.setUserName(jsonArray1.getString(\"name\"));\r\n                    preafManager.setUserEmail_Id(jsonArray1.getString(\"email\"));\r\n                    preafManager.setUserMobileNumber(jsonArray1.getString(\"phone\"));\r\n                    preafManager.setWallet(jsonArray1.getString(\"user_total_coin\"));\r\n                    preafManager.setReferCode(jsonArray1.getString(\"referal_code\"));\r\n                    preafManager.setAllFreeImage(jsonArray1.getBoolean(\"isAllFree\"));\r\n                    popupImg = jsonArray1.getString(\"popup_img\");\r\n                    isActivityStatus = jsonArray1.getString(\"is_activity\");\r\n                    targetLink = jsonArray1.getString(\"target_link\");\r\n                    if (jsonArray1.getString(\"reference_code\").equals(\"null\"))\r\n                        jsonArray1.put(\"reference_code\", \"\");\r\n\r\n                    if (!preafManager.getUserName().isEmpty()) {\r\n                        preafManager.setSpleshReferrer(jsonArray1.getString(\"reference_code\"));\r\n                        preafManager.setReferrerCode(jsonArray1.getString(\"reference_code\"));\r\n                    }\r\n\r\n                    //preafManager.setImageCounter(\"1\");\r\n                    preafManager.setImageCounter(jsonArray1.getString(\"image_counter\"));\r\n                    preafManager.setDaysCounter(jsonArray1.getString(\"days_counter\"));\r\n                    //preafManager.setDaysCounter(\"15\");\r\n\r\n                    MakeMyBrandApp.getInstance().getObserver().setValue(ObserverActionID.APP_INTRO_REFRESH);\r\n                    setupReferralCode();\r\n                    if (!prefManager.getAllFreeImage()) {\r\n                        HELPER.print(\"ISValidate\", \"DONE\");\r\n                        if (!act.isFinishing() && !act.isDestroyed() && homeFragment.isVisible() && !HomeActivity.isAlreadyDisplayed) {\r\n                            if (popupImg != null && !popupImg.isEmpty()) {\r\n                                Handler handler = null;\r\n                                handler = new Handler();\r\n                                handler.postDelayed(new Runnable() {\r\n                                    public void run() {\r\n                                        // Utility.Log(\"OfferDialog\",\"yessssssss\");\r\n                                        setOfferCode();\r\n                                    }\r\n                                }, 10000);\r\n\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            } catch (JSONException e) {\r\n                e.printStackTrace();\r\n            }\r\n        }, new Response.ErrorListener() {\r\n            @Override\r\n            public void onErrorResponse(VolleyError error) {\r\n                error.printStackTrace();\r\n\r\n                //Utility.Log(\"UpdateTokenError\",\"Occurred\");\r\n                //if Errors occurred than go to Login Page\r\n\r\n//                prefManager.Logout();\r\n//                Intent i = new Intent(act, LoginActivity.class);\r\n//                i.addCategory(Intent.CATEGORY_HOME);\r\n//                i.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\r\n//                startActivity(i);\r\n//                act.overridePendingTransition(R.anim.slide_right_in, R.anim.slide_right_out);\r\n//                act.finish();\r\n\r\n//                try {\r\n//                    if (error.networkResponse.statusCode == 500 && error.networkResponse.data != null) {\r\n//                        String responseBody = new String(error.networkResponse.data, \"utf-8\");\r\n//                        Utility.Log(\"responseBody\", responseBody);\r\n//\r\n//                        JSONObject data = new JSONObject(responseBody);\r\n//                        JSONArray errors = data.getJSONArray(\"errors\");\r\n//                        JSONObject jsonMessage = errors.getJSONObject(0);\r\n//                        String message = jsonMessage.getString(\"message\");\r\n//                    }\r\n//                } catch (JSONException | UnsupportedEncodingException ignored) {\r\n//                    ignored.printStackTrace();\r\n//                }\r\n            }\r\n        }) {\r\n            @Override\r\n            public Map<String, String> getHeaders() {\r\n                return getHeader(CodeReUse.GET_FORM_HEADER);\r\n            }\r\n\r\n            @Override\r\n            protected Map<String, String> getParams() {\r\n                HashMap<String, String> hashMap = new HashMap<>();\r\n                if (deviceToken != null)\r\n                    hashMap.put(\"firebase_token\", deviceToken);\r\n                Utility.Log(\"Verify-Param\", hashMap.toString());\r\n                return hashMap;\r\n            }\r\n        };\r\n\r\n        RequestQueue queue = Volley.newRequestQueue(act);\r\n        queue.add(stringRequest);\r\n    }\r\n\r\n    public void setupReferralCode() {\r\n        binding.referralcodeTxt.setText(preafManager.getReferCode());\r\n        //boolean isValid = prefManager.getAllFreeImage() == false ? true : false;\r\n        if (prefManager.getAllFreeImage()) {\r\n            binding.allFreeImage.setVisibility(View.VISIBLE);\r\n            binding.referralCardView.setVisibility(View.GONE);\r\n        } else {\r\n            binding.allFreeImage.setVisibility(View.GONE);\r\n            if (preafManager.getReferCode() != null && preafManager.getReferCode().isEmpty()) {\r\n                binding.referralCardView.setVisibility(View.GONE);\r\n            } else {\r\n                binding.referralCardView.setVisibility(View.VISIBLE);\r\n            }\r\n        }\r\n    }\r\n\r\n    public DialogOfferBinding dialogOfferBinding;\r\n\r\n    void animateButton() {\r\n        final Animation myAnim = AnimationUtils.loadAnimation(act, R.anim.bounce);\r\n        double animationDuration = 4 * 1000;\r\n        //myAnim.setDuration((long)animationDuration);\r\n        myAnim.setRepeatCount(Animation.INFINITE);\r\n\r\n        // Use custom animation interpolator to achieve the bounce effect\r\n        MyBounceInterpolator interpolator = new MyBounceInterpolator(1, 10);\r\n\r\n        myAnim.setInterpolator(interpolator);\r\n\r\n        // Animate the button\r\n        binding.noBrandLayout.startAnimation(myAnim);\r\n\r\n\r\n        // Run button animation again after it finished\r\n        myAnim.setAnimationListener(new Animation.AnimationListener() {\r\n            @Override\r\n            public void onAnimationStart(Animation arg0) {\r\n            }\r\n\r\n            @Override\r\n            public void onAnimationRepeat(Animation arg0) {\r\n            }\r\n\r\n            @Override\r\n            public void onAnimationEnd(Animation arg0) {\r\n                animateButton();\r\n            }\r\n        });\r\n    }\r\n\r\n    public void setOfferCode() {\r\n        HomeActivity.isAlreadyDisplayed = true;\r\n        dialogOfferBinding = DataBindingUtil.inflate(LayoutInflater.from(act), R.layout.dialog_offer, null, false);\r\n        androidx.appcompat.app.AlertDialog.Builder builder = new androidx.appcompat.app.AlertDialog.Builder(act, R.style.MyAlertDialogStyle);\r\n        builder.setView(dialogOfferBinding.getRoot());\r\n        alertDialog = builder.create();\r\n        alertDialog.setContentView(dialogOfferBinding.getRoot());\r\n        alertDialog.setCancelable(true);\r\n        alertDialog.setCanceledOnTouchOutside(true);\r\n        alertDialog.getWindow().setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));\r\n        Glide.with(act).load(popupImg).placeholder(R.drawable.place_holder_vertical).into(dialogOfferBinding.offerImage);\r\n        alertDialog.show();\r\n\r\n        dialogOfferBinding.offerImageLayout.setOnClickListener(v -> {\r\n            alertDialog.dismiss();\r\n\r\n            if (!popupImg.isEmpty() && !popupImg.equals(\"null\")) {\r\n                if (isActivityStatus.equalsIgnoreCase(\"0\")) {\r\n                    Uri webpage = Uri.parse(targetLink);\r\n                    Intent intent = new Intent(Intent.ACTION_VIEW, webpage);\r\n                    intent.setPackage(\"com.android.chrome\");\r\n                    startActivity(intent);\r\n\r\n                } else {\r\n\r\n                    String nameOfActivity = targetLink;\r\n                    //String nameOfActivity = \"com.app.brandmania.Activity.packages.PackageActivity\";\r\n                    try {\r\n                        Class<?> aClass = Class.forName(nameOfActivity);\r\n                        Intent i = new Intent(act, aClass);\r\n                        act.startActivity(i);\r\n                        act.overridePendingTransition(R.anim.slide_right_in, R.anim.slide_right_out);\r\n                    } catch (ClassNotFoundException ignored) {\r\n                    }\r\n                }\r\n            }\r\n        });\r\n        dialogOfferBinding.closeLayout.setOnClickListener(v -> alertDialog.dismiss());\r\n    }\r\n\r\n    public void onBackPressed() {\r\n        Intent a = new Intent(Intent.ACTION_MAIN);\r\n        a.addCategory(Intent.CATEGORY_HOME);\r\n        a.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);\r\n        startActivity(a);\r\n    }\r\n\r\n    @Override\r\n    public void onItemSMultipleelection(int calledFlag, int position, BrandListItem listModel) {\r\n        if (bottomSheetFragment != null && bottomSheetFragment.isVisible()) {\r\n            bottomSheetFragment.dismiss();\r\n        }\r\n        preafManager.setActiveBrand(listModel);\r\n        Intent i = new Intent(act, HomeActivity.class);\r\n        i.addCategory(Intent.CATEGORY_HOME);\r\n        i.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\r\n        startActivity(i);\r\n        act.overridePendingTransition(R.anim.slide_right_in, R.anim.slide_right_out);\r\n        act.finish();\r\n        binding.businessName.setText(listModel.getName());\r\n        brandListItem = listModel;\r\n        preafManager.setActiveBrand(listModel);\r\n    }\r\n\r\n    @Override\r\n    public void ImageCateonItemSelection(int position, ImageList listModel) {\r\n\r\n    }\r\n\r\n    private void RateUs() {\r\n\r\n        fiveStarsDialog.setRateText(\"Rate Us\")\r\n                .setTitle(\"How was your experience with us?\")\r\n                .setForceMode(false)\r\n                .setUpperBound(2)\r\n                .setNegativeReviewListener(this)\r\n                .setReviewListener(this)\r\n                .showAfter(2);\r\n\r\n    }\r\n\r\n    private void getBrandList() {\r\n        binding.swipeContainer.setRefreshing(true);\r\n        Utility.Log(\"GetBrandList:::\", APIs.GET_BRAND);\r\n\r\n        StringRequest stringRequest = new StringRequest(Request.Method.POST, APIs.GET_BRAND, response -> {\r\n            try {\r\n\r\n                JSONObject jsonObject = new JSONObject(response);\r\n                binding.swipeContainer.setRefreshing(false);\r\n                multiListItems = ResponseHandler.HandleGetBrandList(jsonObject);\r\n                Utility.Log(\"GetBrandList:::\", gson.toJson(multiListItems));\r\n\r\n                if (multiListItems != null && multiListItems.size() != 0)\r\n                    preafManager.setAddBrandList(multiListItems);\r\n                if (preafManager.getActiveBrand() != null) {\r\n                    for (int i = 0; i < multiListItems.size(); i++) {\r\n                        if (multiListItems.get(i).getId().equalsIgnoreCase(preafManager.getActiveBrand().getId())) {\r\n                            preafManager.setActiveBrand(multiListItems.get(i));\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                preafManager = new PreafManager(act);\r\n                if (preafManager.getActiveBrand() != null)\r\n\r\n                    binding.businessName.setText(preafManager.getActiveBrand().getName());\r\n\r\n                if (act.getIntent().hasExtra(\"FirstLogin\")) {\r\n                    preafManager.setIS_Brand(true);\r\n                    if (multiListItems.size() != 0) {\r\n                        preafManager.setActiveBrand(multiListItems.get(0));\r\n                    }\r\n                }\r\n                if (preafManager.getActiveBrand() == null) {\r\n                    if (multiListItems.size() != 0) {\r\n                        preafManager.setActiveBrand(multiListItems.get(0));\r\n                    }\r\n                }\r\n                //setActiveBrand();\r\n\r\n            } catch (JSONException e) {\r\n                e.printStackTrace();\r\n            }\r\n        },\r\n                error -> {\r\n                    binding.swipeContainer.setRefreshing(false);\r\n                    error.printStackTrace();\r\n                }\r\n        ) {\r\n\r\n            @Override\r\n            public Map<String, String> getHeaders() {\r\n                return getHeader(CodeReUse.GET_FORM_HEADER);\r\n            }\r\n        };\r\n\r\n        RequestQueue queue = Volley.newRequestQueue(act);\r\n        queue.add(stringRequest);\r\n    }\r\n\r\n    @Override\r\n    public void onNegativeReview(int stars) {\r\n        Log.d(\"TAG\", \"Negative review \" + stars);\r\n    }\r\n\r\n    @Override\r\n    public void onRefresh() {\r\n        startAnimation();\r\n        //getFrame();\r\n        loadImagesCategory();\r\n        //getBrandList();\r\n        getBanner();\r\n    }\r\n\r\n    @Override\r\n    public void onReview(int stars) {\r\n    }\r\n\r\n    private void getFrame() {\r\n        Utility.Log(\"API : \", APIs.GET_FRAME);\r\n        StringRequest stringRequest = new StringRequest(Request.Method.POST, APIs.GET_FRAME, response -> {\r\n            try {\r\n                JSONObject jsonObject = new JSONObject(response);\r\n                brandListItems = ResponseHandler.HandleGetFrame(jsonObject);\r\n            } catch (JSONException e) {\r\n                e.printStackTrace();\r\n            }\r\n        }, Throwable::printStackTrace\r\n        ) {\r\n            @Override\r\n            public Map<String, String> getHeaders() {\r\n                return getHeader(CodeReUse.GET_FORM_HEADER);\r\n            }\r\n\r\n            @Override\r\n            protected Map<String, String> getParams() {\r\n                Map<String, String> params = new HashMap<>();\r\n                params.put(\"brand_id\", preafManager.getActiveBrand().getId());\r\n                return params;\r\n            }\r\n        };\r\n\r\n        RequestQueue queue = Volley.newRequestQueue(act);\r\n        queue.add(stringRequest);\r\n    }\r\n\r\n    @Override\r\n    public void update(Observable observable, Object data) {\r\n        if (MakeMyBrandApp.getInstance().getObserver().getValue() == ObserverActionID.REFRESH_BRAND_NAME) {\r\n            getBrandList();\r\n        }\r\n        if (MakeMyBrandApp.getInstance().getObserver().getValue() == ObserverActionID.REFRESH_IMAGE_CATEGORY_DATA) {\r\n            if (preafManager.getActiveBrand() != null) {\r\n                act.recreate();\r\n                setActiveBrandText();\r\n            }\r\n        }\r\n\r\n        if (MakeMyBrandApp.getInstance().getObserver().getValue() == ObserverActionID.NOTIFY) {\r\n            act.runOnUiThread(new Runnable() {\r\n                @Override\r\n                public void run() {\r\n                    if (dasboardAddaptor != null) {\r\n                        dasboardAddaptor.notifyDataSetChanged();\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    private androidx.appcompat.app.AlertDialog alertDialog;\r\n    private DialogRequestBusinessCategoryRemarksBinding reqBinding;\r\n\r\n    public void showRequestForm() {\r\n\r\n        if (alertDialog != null && alertDialog.isShowing())\r\n            alertDialog.dismiss();\r\n\r\n        reqBinding = DataBindingUtil.inflate(LayoutInflater.from(act), R.layout.dialog_request_business_category_remarks, null, false);\r\n        androidx.appcompat.app.AlertDialog.Builder builder = new androidx.appcompat.app.AlertDialog.Builder(act, R.style.MyAlertDialogStyle_extend2);\r\n        builder.setView(reqBinding.getRoot());\r\n        alertDialog = builder.create();\r\n        alertDialog.setContentView(reqBinding.getRoot());\r\n\r\n        Utility.RemoveError(reqBinding.nameTxt);\r\n        reqBinding.close.setOnClickListener(v -> alertDialog.dismiss());\r\n        reqBinding.submit.setOnClickListener(v -> {\r\n            if (reqBinding.nameTxt.getText().toString().trim().length() == 0) {\r\n                reqBinding.nameTxt.setError(\"Enter category\");\r\n                reqBinding.nameTxt.requestFocus();\r\n                return;\r\n            }\r\n            alertDialog.dismiss();\r\n            apiForCategoryRequest(reqBinding.nameTxt.getText().toString());\r\n            Toast.makeText(act, \"Thanks for request we will contact you soon\", Toast.LENGTH_SHORT).show();\r\n        });\r\n        alertDialog.show();\r\n\r\n    }\r\n\r\n    private void apiForCategoryRequest(String catString) {\r\n        Utility.showProgress(act);\r\n        StringRequest stringRequest = new StringRequest(Request.Method.POST, APIs.REQUEST_BUSINESS_CATEGORY, response -> Utility.dismissProgress(), error -> {\r\n            Utility.dismissProgress();\r\n            error.printStackTrace();\r\n        }) {\r\n\r\n            @Override\r\n            public Map<String, String> getHeaders() {\r\n                return getHeader(CodeReUse.GET_FORM_HEADER);\r\n            }\r\n\r\n            @Override\r\n            protected Map<String, String> getParams() {\r\n                HashMap<String, String> hashMap = new HashMap<>();\r\n                hashMap.put(\"cat_name\", catString);\r\n                return hashMap;\r\n            }\r\n        };\r\n\r\n\r\n        RequestQueue queue = Volley.newRequestQueue(act);\r\n        queue.add(stringRequest);\r\n    }\r\n\r\n    private androidx.appcompat.app.AlertDialog offerAlert;\r\n    private DialogOfferBinding offerBinding;\r\n\r\n    public void diwaliOffer() {\r\n        if (offerAlert != null && offerAlert.isShowing())\r\n            offerAlert.dismiss();\r\n        HomeActivity.isAlreadyDisplayedOffer = true;\r\n        offerBinding = DataBindingUtil.inflate(LayoutInflater.from(act), R.layout.dialog_offer, null, false);\r\n        androidx.appcompat.app.AlertDialog.Builder builder = new androidx.appcompat.app.AlertDialog.Builder(act, R.style.MyAlertDialogStyle_extend2);\r\n        builder.setView(offerBinding.getRoot());\r\n        offerAlert = builder.create();\r\n        offerAlert.setContentView(offerBinding.getRoot());\r\n        offerBinding.closeLayout.setBackgroundTintList(ColorStateList.valueOf(ContextCompat.getColor(act, R.color.colorthird)));\r\n        offerBinding.closeView.setImageTintList(ColorStateList.valueOf(ContextCompat.getColor(act, R.color.white)));\r\n        offerBinding.offerImage.setImageDrawable(ContextCompat.getDrawable(act, R.drawable.diwali_offer));\r\n        offerBinding.offerImage.setOnClickListener(v -> {\r\n            offerAlert.dismiss();\r\n            Intent intent = new Intent(act, PackageActivity.class);\r\n            startActivity(intent);\r\n            act.overridePendingTransition(R.anim.slide_right_in, R.anim.slide_right_out);\r\n        });\r\n        offerBinding.closeLayout.setOnClickListener(v -> offerAlert.dismiss());\r\n        offerAlert.show();\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/app/brandmania/Fragment/bottom/HomeFragment.java b/app/src/main/java/com/app/brandmania/Fragment/bottom/HomeFragment.java
--- a/app/src/main/java/com/app/brandmania/Fragment/bottom/HomeFragment.java	(revision 52f57d39551c92af55be48aa0d3084a0d48671ed)
+++ b/app/src/main/java/com/app/brandmania/Fragment/bottom/HomeFragment.java	(date 1691067787242)
@@ -151,8 +151,8 @@
         binding = DataBindingUtil.inflate(inflater, R.layout.fragment_home, parent, false);
         homeFragment = this;
         fiveStarsDialog = new FiveStarsDialog(act, "brandmania@gmail.com");
-        //prefManager.setCurrentDate("");
-        //prefManager.setCurrentDate("2023-08-01");
+        // prefManager.setCurrentDate("");
+        // prefManager.setCurrentDate("2023-08-01");
         homeLoad();
         return binding.getRoot();
     }
Index: app/src/main/java/com/app/brandmania/Common/HELPER.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.app.brandmania.Common;\r\n\r\nimport android.annotation.SuppressLint;\r\nimport android.app.Activity;\r\nimport android.content.ActivityNotFoundException;\r\nimport android.content.ContentUris;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.database.Cursor;\r\nimport android.graphics.Bitmap;\r\nimport android.graphics.BitmapFactory;\r\nimport android.graphics.Canvas;\r\nimport android.graphics.drawable.Drawable;\r\nimport android.net.Uri;\r\nimport android.os.Build;\r\nimport android.os.Environment;\r\nimport android.provider.DocumentsContract;\r\nimport android.provider.MediaStore;\r\nimport android.util.Log;\r\nimport android.widget.Toast;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.core.content.FileProvider;\r\n\r\nimport com.app.brandmania.Connection.MyPdfPageEventHelper;\r\nimport com.app.brandmania.R;\r\nimport com.itextpdf.text.Anchor;\r\nimport com.itextpdf.text.BaseColor;\r\nimport com.itextpdf.text.Document;\r\nimport com.itextpdf.text.DocumentException;\r\nimport com.itextpdf.text.Element;\r\nimport com.itextpdf.text.Font;\r\nimport com.itextpdf.text.FontFactory;\r\nimport com.itextpdf.text.Image;\r\nimport com.itextpdf.text.PageSize;\r\nimport com.itextpdf.text.Paragraph;\r\nimport com.itextpdf.text.Phrase;\r\nimport com.itextpdf.text.html.WebColors;\r\nimport com.itextpdf.text.pdf.BaseFont;\r\nimport com.itextpdf.text.pdf.PdfContentByte;\r\nimport com.itextpdf.text.pdf.PdfWriter;\r\n\r\nimport java.io.ByteArrayOutputStream;\r\nimport java.io.File;\r\nimport java.io.FileOutputStream;\r\nimport java.io.IOException;\r\nimport java.text.DateFormat;\r\nimport java.text.ParseException;\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.Calendar;\r\nimport java.util.Date;\r\nimport java.util.GregorianCalendar;\r\nimport java.util.Locale;\r\nimport java.util.Objects;\r\nimport java.util.concurrent.ExecutionException;\r\n\r\npublic class HELPER {\r\n\r\n    /**\r\n     * INTENT-EVENT\r\n     */\r\n    public static void ROUTE(Activity act, Class routeName) {\r\n        Intent i = new Intent(act, routeName);\r\n        act.startActivity(i);\r\n        act.overridePendingTransition(R.anim.slide_right_in, R.anim.slide_right_out);\r\n    }\r\n    public static void print(String tag, String message) {\r\n        Log.e(tag, message);\r\n    }\r\n\r\n    /**\r\n     * HOME FRAGMENT *\r\n     */\r\n    @NonNull\r\n    public static Bitmap getBitmapFromDrawable(@NonNull Drawable drawable) {\r\n        final Bitmap bmp = Bitmap.createBitmap(drawable.getIntrinsicWidth(), drawable.getIntrinsicHeight(), Bitmap.Config.ARGB_8888);\r\n        final Canvas canvas = new Canvas(bmp);\r\n        drawable.setBounds(0, 0, canvas.getWidth(), canvas.getHeight());\r\n        drawable.draw(canvas);\r\n        return bmp;\r\n    }\r\n\r\n    public static void generatePDF(Activity act, PreafManager preafManager, Bitmap brandLogo) {\r\n        Document document = new Document(PageSize.A4);\r\n\r\n        String path = Environment.getExternalStorageDirectory().getAbsolutePath() + \"/BrandManiaPdf\";\r\n\r\n        File dir = new File(path);\r\n        if (!dir.exists())\r\n            dir.mkdirs();\r\n\r\n        File file = new File(dir, \"brandmania.pdf\");\r\n\r\n\r\n        try {\r\n\r\n            ByteArrayOutputStream stream = new ByteArrayOutputStream();\r\n            Bitmap bitmap = BitmapFactory.decodeResource(act.getResources(), R.drawable.pdfbackk);\r\n            bitmap.compress(Bitmap.CompressFormat.JPEG, 100, stream);\r\n            Image img;\r\n\r\n            img = Image.getInstance(stream.toByteArray());\r\n            img.setAbsolutePosition(0, 0);\r\n            img.scalePercent(60f, 60f);\r\n            FileOutputStream fOut = new FileOutputStream(file);\r\n            PdfWriter writer = PdfWriter.getInstance(document, fOut);\r\n            writer.setPageEvent(new MyPdfPageEventHelper(act));\r\n            document.open();\r\n\r\n            //Drawable d = act.getResources().getDrawable(R.drawable.pdf_banner);\r\n            //BitmapDrawable bitDw = ((BitmapDrawable) d);\r\n            Bitmap bmp = brandLogo;// ((BitmapDrawable) binding.pdfLogo.getDrawable()).getBitmap();//bitDw.getBitmap();\r\n            ByteArrayOutputStream stream1 = new ByteArrayOutputStream();\r\n            bmp.compress(Bitmap.CompressFormat.PNG, 100, stream1);\r\n            Image image = Image.getInstance(stream1.toByteArray());\r\n            image.scalePercent(25);\r\n\r\n            image.setAlignment(Element.ALIGN_CENTER);\r\n            image.setAbsolutePosition(240, 670);\r\n\r\n            document.add(image);\r\n\r\n\r\n            Paragraph preface = new Paragraph();\r\n\r\n            //For Brand Name..............\r\n            Font brandName = FontFactory.getFont(\"assets/font/montserrat_bold.ttf\", BaseFont.IDENTITY_H, BaseFont.EMBEDDED, 40); //10 is the size\r\n            brandName.setColor(WebColors.getRGBColor(\"#faa81e\"));\r\n            addEmptyLine(preface, 11);\r\n            preface.add(new Paragraph(preafManager.getActiveBrand().getName(), brandName));\r\n\r\n\r\n            //For Address\r\n            Font address = FontFactory.getFont(\"assets/font/montserrat_medium.ttf\", BaseFont.IDENTITY_H, BaseFont.EMBEDDED, 23); //10 is the size\r\n            preface.add(new Paragraph(preafManager.getActiveBrand().getAddress(), address));\r\n            addEmptyLine(preface, 0);\r\n            preface.setIndentationLeft(0);\r\n            document.add(preface);\r\n\r\n            //For First UnderLine\r\n            PdfContentByte canvas = writer.getDirectContent();\r\n            BaseColor baseColorFirst = new BaseColor(173, 39, 83);\r\n            canvas.setColorStroke(baseColorFirst);\r\n            canvas.moveTo(30, 500);\r\n            canvas.lineTo(570, 500);\r\n            canvas.setLineWidth(2f);\r\n            canvas.closePathStroke();\r\n\r\n            //For Second UnderLine\r\n            PdfContentByte canvasSecond = writer.getDirectContent();\r\n            BaseColor baseColorSecond = new BaseColor(173, 39, 83);\r\n            canvasSecond.setColorStroke(baseColorSecond);\r\n            canvasSecond.moveTo(30, 492);\r\n            canvasSecond.lineTo(570, 492);\r\n            canvasSecond.setLineWidth(5f);\r\n            canvasSecond.closePathStroke();\r\n\r\n            //For Third UnderLine\r\n            PdfContentByte canvasThird = writer.getDirectContent();\r\n            BaseColor baseColorThird = new BaseColor(173, 39, 83);\r\n            canvasThird.setColorStroke(baseColorThird);\r\n            canvasThird.moveTo(30, 484);\r\n            canvasThird.lineTo(570, 484);\r\n            canvasThird.setLineWidth(2f);\r\n            canvasThird.closePathStroke();\r\n\r\n\r\n            //For Contact Number and Contact Logo..........\r\n            if (preafManager.getActiveBrand().getPhonenumber() != null && !preafManager.getActiveBrand().getPhonenumber().isEmpty()) {\r\n                //  Drawable contact = act.getResources().getDrawable(R.drawable.ic_call_for_pdf);\r\n                Paragraph prefaceClicableContact = new Paragraph();\r\n                //BitmapDrawable bitContact = ((BitmapDrawable) contact);\r\n                @SuppressLint(\"UseCompatLoadingForDrawables\") Bitmap bmpContact = HELPER.getBitmapFromDrawable(act.getResources().getDrawable(R.drawable.ic_call_for_pdf));//bitContact.getBitmap();\r\n                ByteArrayOutputStream streamContact = new ByteArrayOutputStream();\r\n                bmpContact.compress(Bitmap.CompressFormat.PNG, 100, streamContact);\r\n                Image imageContact = Image.getInstance(streamContact.toByteArray());\r\n                imageContact.scalePercent(50);\r\n                imageContact.setAbsolutePosition(30f, 415f);\r\n                imageContact.setAlignment(Element.ALIGN_LEFT);\r\n                document.add(imageContact);\r\n                addEmptyLine(prefaceClicableContact, 3);\r\n                prefaceClicableContact.add(new Phrase(\"\"));\r\n                prefaceClicableContact.setIndentationLeft(50);\r\n                Font contactFont = FontFactory.getFont(\"assets/font/montserrat_medium.ttf\", BaseFont.IDENTITY_H, BaseFont.EMBEDDED, 25); //10 is the size\r\n                contactFont.setColor(WebColors.getRGBColor(\"#ad2753\"));\r\n                Anchor anchor = new Anchor(preafManager.getActiveBrand().getPhonenumber(), contactFont);\r\n                anchor.setReference(String.valueOf(Uri.parse(\"tel:\" + 91 + preafManager.getActiveBrand().getPhonenumber())));\r\n                prefaceClicableContact.add(anchor);\r\n                document.add(prefaceClicableContact);\r\n            }\r\n            //For Gmail Id and Gmail logo................\r\n            if (preafManager.getActiveBrand().getEmail() != null && !preafManager.getActiveBrand().getEmail().isEmpty()) {\r\n                Paragraph prefaceClicableEmail = new Paragraph();\r\n                //   Drawable email = act.getResources().getDrawable(R.drawable.ic_call_for_pdf);\r\n                //   BitmapDrawable bitEmail = ((BitmapDrawable) email);\r\n                @SuppressLint(\"UseCompatLoadingForDrawables\") Bitmap bmpEmail = HELPER.getBitmapFromDrawable(act.getResources().getDrawable(R.drawable.ic_gmail_for_pdf)); //bitEmail.getBitmap();\r\n                ByteArrayOutputStream streamEmail = new ByteArrayOutputStream();\r\n                bmpEmail.compress(Bitmap.CompressFormat.PNG, 100, streamEmail);\r\n                Image imageEmail = Image.getInstance(streamEmail.toByteArray());\r\n                imageEmail.scalePercent(50);\r\n                imageEmail.setAbsolutePosition(30f, 358f);\r\n                imageEmail.setAlignment(Element.ALIGN_LEFT);\r\n                document.add(imageEmail);\r\n                addEmptyLine(prefaceClicableEmail, 1);\r\n                prefaceClicableEmail.add(new Phrase(\"\"));\r\n                prefaceClicableEmail.setIndentationLeft(50);\r\n                Font emailFont = FontFactory.getFont(\"assets/font/montserrat_medium.ttf\", BaseFont.IDENTITY_H, BaseFont.EMBEDDED, 25); //10 is the size\r\n                emailFont.setColor(WebColors.getRGBColor(\"#ad2753\"));\r\n                Anchor anchorEmail = new Anchor(preafManager.getActiveBrand().getEmail(), emailFont);\r\n                anchorEmail.setReference(String.valueOf(Uri.parse(\"mailto:\" + preafManager.getActiveBrand().getEmail())));\r\n                prefaceClicableEmail.add(anchorEmail);\r\n                document.add(prefaceClicableEmail);\r\n            }\r\n            //For Website and websiteLogo..................\r\n            if (preafManager.getActiveBrand().getWebsite() != null && !preafManager.getActiveBrand().getWebsite().isEmpty()) {\r\n                Paragraph prefaceClicableWebsite = new Paragraph();\r\n                //  Drawable website = act.getResources().getDrawable(R.drawable.ic_call_for_pdf);\r\n                //   BitmapDrawable bitWebsite = ((BitmapDrawable) website);\r\n                @SuppressLint(\"UseCompatLoadingForDrawables\") Bitmap bmpWebsite = HELPER.getBitmapFromDrawable(act.getResources().getDrawable(R.drawable.ic_website_for_pdf));//bitWebsite.getBitmap();\r\n                ByteArrayOutputStream streamWebsite = new ByteArrayOutputStream();\r\n                bmpWebsite.compress(Bitmap.CompressFormat.PNG, 100, streamWebsite);\r\n                Image imageWebsite = Image.getInstance(streamWebsite.toByteArray());\r\n                imageWebsite.scalePercent(50);\r\n                imageWebsite.setAbsolutePosition(30f, 300f);\r\n                imageWebsite.setAlignment(Element.ALIGN_LEFT);\r\n                addEmptyLine(prefaceClicableWebsite, 1);\r\n                prefaceClicableWebsite.setIndentationLeft(50);\r\n                Font websiteFont = FontFactory.getFont(\"assets/font/montserrat_medium.ttf\", BaseFont.IDENTITY_H, BaseFont.EMBEDDED, 25); //10 is the size\r\n                websiteFont.setColor(WebColors.getRGBColor(\"#ad2753\"));\r\n                Anchor anchorWebsite = new Anchor(preafManager.getActiveBrand().getWebsite(), websiteFont);\r\n                anchorWebsite.setReference(preafManager.getActiveBrand().getWebsite());\r\n                prefaceClicableWebsite.add(anchorWebsite);\r\n                document.add(prefaceClicableWebsite);\r\n                document.add(imageWebsite);\r\n            }\r\n\r\n            if (preafManager.getActiveBrand().getBrandService() != null && !preafManager.getActiveBrand().getBrandService().isEmpty()) {\r\n                Paragraph prefaceClicableServicesTag = new Paragraph();\r\n                addEmptyLine(prefaceClicableServicesTag, 1);\r\n                Font brandServicetag = FontFactory.getFont(\"assets/font/robotobold.ttf\", BaseFont.IDENTITY_H, BaseFont.EMBEDDED, 30); //10 is the size\r\n                brandServicetag.setColor(WebColors.getRGBColor(\"#faa81e\"));\r\n                prefaceClicableServicesTag.add(new Paragraph(\"Service:\", brandServicetag));\r\n                prefaceClicableServicesTag.setIndentationLeft(0);\r\n                document.add(prefaceClicableServicesTag);\r\n\r\n\r\n                Paragraph paragraphClicableService = new Paragraph();\r\n                addEmptyLine(paragraphClicableService, 0);\r\n                paragraphClicableService.setIndentationLeft(0);\r\n                Font bsuinessService = FontFactory.getFont(\"assets/font/montserrat_medium.ttf\", BaseFont.IDENTITY_H, BaseFont.EMBEDDED, 25); //10 is the size\r\n                bsuinessService.setColor(WebColors.getRGBColor(\"#000\"));\r\n                String[] list = preafManager.getActiveBrand().getBrandService().split(\"[,\\n]\");\r\n                for (String s : list) {\r\n                    paragraphClicableService.add(new Paragraph(\"\\u2022\\u00a0\" + s, bsuinessService));\r\n                }\r\n                paragraphClicableService.setIndentationLeft(0);\r\n                document.add(paragraphClicableService);\r\n            }\r\n            document.close();\r\n            viewPdf(act);\r\n        } catch (DocumentException | IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    private static void addEmptyLine(Paragraph paragraph, int number) {\r\n        for (int i = 0; i < number; i++) {\r\n            paragraph.add(new Paragraph(\" \"));\r\n        }\r\n    }\r\n\r\n    public static String getDateAfterSevenDay() {\r\n\r\n//        SimpleDateFormat dateFormat= new SimpleDateFormat(\"EEEE dd.MM.yyyy\");\r\n//        Calendar currentCal = Calendar.getInstance();\r\n//        String currentdate=dateFormat.format(currentCal.getTime());\r\n//        currentCal.add(Calendar.DATE, 7);\r\n//        String toDate=dateFormat.format(currentCal.getTime());\r\n\r\n        Calendar cal = GregorianCalendar.getInstance();\r\n        cal.setTime(new Date());\r\n        cal.add(Calendar.DAY_OF_YEAR, +7);\r\n        Date afterDay = cal.getTime();\r\n        SimpleDateFormat simpleDateFormat = new SimpleDateFormat(\"dd-MM-yyyy\");\r\n        return simpleDateFormat.format(afterDay);\r\n    }\r\n\r\n    public static Date StringToDate(String apiData) {\r\n        String dtStart = apiData;\r\n        Date date = null;\r\n        SimpleDateFormat format = new SimpleDateFormat(\"yyyy-MM-dd\");\r\n        try {\r\n            date = format.parse(dtStart);\r\n            System.out.println(date);\r\n            Log.e(\"DateTimeValue\", String.valueOf(date));\r\n        } catch (ParseException e) {\r\n            e.printStackTrace();\r\n        }\r\n        return date;\r\n    }\r\n\r\n    public static String simpleDateFormat(Date date) {\r\n        DateFormat dateFormat = new SimpleDateFormat(\"dd-MM-yyyy\");\r\n        String strDate = dateFormat.format(date);\r\n        return strDate;\r\n    }\r\n\r\n    public static boolean IsTwoDateComparison(String ApiData, Activity act, String daysCounter) {\r\n        PreafManager pre = new PreafManager(act);\r\n        //startDate\r\n        Calendar c = Calendar.getInstance();\r\n        c.setTime(StringToDate(ApiData));\r\n        Date startDate = c.getTime();\r\n        String SDate = simpleDateFormat(startDate);\r\n        Log.e(\"Created Date\", SDate);\r\n        //TodayDate\r\n        Date TodayDATE = Calendar.getInstance().getTime();\r\n        SimpleDateFormat simpleDateFormat = new SimpleDateFormat(\"dd-MM-yyyy\");\r\n        String TodayDate = simpleDateFormat.format(TodayDATE);\r\n        Log.e(\"TodayDate\", TodayDate);\r\n\r\n        //String todayDate = \"23-06-2022\";\r\n\r\n        //endDate\r\n        Calendar cal = GregorianCalendar.getInstance();\r\n        cal.setTime(c.getTime());\r\n        cal.add(Calendar.DATE, Integer.parseInt(daysCounter));\r\n        //cal.add(Calendar.DATE, 7);\r\n        Date endDate = cal.getTime();\r\n        String eDate = simpleDateFormat(endDate);\r\n        Log.e(\"EndDate\", eDate);\r\n\r\n        try {\r\n            @SuppressLint(\"SimpleDateFormat\") SimpleDateFormat formatter = new SimpleDateFormat(\"dd-MM-yyyy\");\r\n            Date convertedEndDate = formatter.parse(eDate);\r\n            Date convertedStartDate = formatter.parse(SDate);\r\n            Date convertTodayDate = formatter.parse(TodayDate);\r\n            assert convertedStartDate != null;\r\n            assert convertedEndDate != null;\r\n            assert convertTodayDate != null;\r\n\r\n            if (convertTodayDate.compareTo(convertedStartDate) >= 0 && convertTodayDate.compareTo(convertedEndDate) <= 0) {\r\n                Log.e(\"dateIsBetween\", \"true\");\r\n                pre = new PreafManager(act);\r\n                pre.setFreeUserDownloadForOneWeak(true);\r\n                return true;\r\n            } else {\r\n                Log.e(\"dateIsBetween\", \"false\");\r\n                pre.setFreeUserDownloadForOneWeak(false);\r\n                return false;\r\n            }\r\n\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public static Date stringToDaTE(String dates) {\r\n\r\n        Date date = null;\r\n        SimpleDateFormat format = new SimpleDateFormat(\"dd-MM-yyyy\");\r\n        try {\r\n            date = format.parse(dates);\r\n        } catch (ParseException e) {\r\n            e.printStackTrace();\r\n        }\r\n        return date;\r\n    }\r\n\r\n    public static boolean IsDateComparison(String ApiData) {\r\n\r\n        Calendar c = Calendar.getInstance();\r\n        c.setTime(StringToDate(ApiData));\r\n        //c.add(Calendar.DATE, 7);\r\n        Log.e(\"FromDate\", String.valueOf(c.getTime()));\r\n        Calendar cal = GregorianCalendar.getInstance();\r\n        cal.setTime(c.getTime());\r\n        cal.add(Calendar.DATE, 7);\r\n        Date toDate = cal.getTime();\r\n        Log.e(\"toDate\", String.valueOf(toDate));\r\n\r\n        if (c.getTime().compareTo(toDate) < 0) {\r\n            Log.e(\"isDateBetween\", \"yes\");\r\n            return true;\r\n        } else {\r\n            Log.e(\"isDAteBetween\", \"no\");\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public static String DateToStringApi(String apiData) {\r\n        SimpleDateFormat input = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\");\r\n        SimpleDateFormat output = new SimpleDateFormat(\"dd-MM-yyyy\");\r\n\r\n        Date d = null;\r\n        try {\r\n            d = input.parse(apiData);\r\n        } catch (ParseException e) {\r\n            e.printStackTrace();\r\n        }\r\n        if (d != null) {\r\n            Log.e(\"convertDateValue\", output.format(d));\r\n        }\r\n        return output.format(d);\r\n    }\r\n\r\n    public static String DateToStringApis(String apiData) {\r\n        SimpleDateFormat input = new SimpleDateFormat(\"EEE MM dd kk:mm:ss zzzz yyyy\");\r\n        SimpleDateFormat output = new SimpleDateFormat(\"dd-MM-yyyy\");\r\n\r\n        Date d = null;\r\n        try {\r\n            d = input.parse(apiData);\r\n        } catch (ParseException e) {\r\n            e.printStackTrace();\r\n        }\r\n        if (d != null) {\r\n            Log.e(\"convertDateValuesss\", output.format(d));\r\n        }\r\n        return output.format(d);\r\n    }\r\n\r\n    public static void DateToString() {\r\n        SimpleDateFormat dateFormat = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss'Z'\");\r\n        Date date = new Date();\r\n        String dateTime = dateFormat.format(date);\r\n        System.out.println(\"Current Date Time : \" + dateTime);\r\n    }\r\n\r\n    public static void date() {\r\n        Date c = Calendar.getInstance().getTime();\r\n        SimpleDateFormat simpleDateFormat = new SimpleDateFormat(\"dd-MM-yyyy\");\r\n        String formattedDate = simpleDateFormat.format(c);\r\n\r\n        Calendar cal = GregorianCalendar.getInstance();\r\n        cal.setTime(new Date());\r\n        cal.add(Calendar.DAY_OF_YEAR, +7);\r\n        Date afterDay = cal.getTime();\r\n\r\n        String dateStr = \"16-06-2022\";\r\n        SimpleDateFormat curFormater = new SimpleDateFormat(\"dd-MM-yyyy\");\r\n        Date dateObj = null;\r\n        try {\r\n            dateObj = curFormater.parse(dateStr);\r\n        } catch (ParseException e) {\r\n            e.printStackTrace();\r\n        }\r\n        if (c.before(dateObj)) {\r\n            Log.e(\"yesAfter\", \"yes\");\r\n            // In between\r\n        } else {\r\n            Log.e(\"yesAfter\", \"no\");\r\n        }\r\n    }\r\n\r\n    // Method for opening a pdf file\r\n    private static void viewPdf(Activity act) {\r\n        File pdfFile = new File(Environment.getExternalStorageDirectory() + \"/\" + \"BrandManiaPdf\" + \"/\" + \"brandmania.pdf\");\r\n        Uri path = FileProvider.getUriForFile(act, act.getApplicationContext().getPackageName() + \".provider\", pdfFile);\r\n        Intent pdfIntent = new Intent(Intent.ACTION_VIEW);\r\n        pdfIntent.setDataAndType(path, \"application/pdf\");\r\n        pdfIntent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);\r\n        pdfIntent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);\r\n        try {\r\n            act.startActivity(pdfIntent);\r\n        } catch (ActivityNotFoundException e) {\r\n            Toast.makeText(act, \"Can't read pdf file\", Toast.LENGTH_SHORT).show();\r\n        }\r\n    }\r\n\r\n    public static void WHATSAPP_REDIRECTION(Activity act, String businessName, String mobileNumber) {\r\n        try {\r\n            String number = Constant.ADMIN_CONTACT_NUMBER;\r\n            String BrandContact = \"\\nRegistered Number: \";\r\n            String text = \"Hello *BrandMania* ,  \\n\" + \"This is request to add  *Frame* For BrandName:\" + businessName + BrandContact + mobileNumber;\r\n            String toNumber = \"91\" + number;\r\n            Intent intent = new Intent(Intent.ACTION_VIEW);\r\n            intent.setData(Uri.parse(\"http://api.whatsapp.com/send?phone=\" + toNumber + \"&text=\" + text));\r\n            act.startActivity(intent);\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    public static String deviceINFO() {\r\n        return \"VERSION.RELEASE : \" + Build.VERSION.RELEASE + \"- VERSION.SDK.NUMBER : \" + Build.VERSION.SDK_INT + \" - BRAND : \" + Build.BRAND;\r\n    }\r\n\r\n    public static void WHATSAPP_REDIRECTION_2(Activity act, String businessName, String mobileNumber) {\r\n        try {\r\n            String number = Constant.ADMIN_CONTACT_NUMBER;\r\n            String BrandContact = \"\\nRegistered Number Is: \";\r\n            String BusinessName = \"\\nBrand Name: \" + businessName;\r\n            //String text = \"Hello *BrandMania* ,  \\n\" + \"This is request From BrandName: \" +businessName + BrandContact + mobileNumber+\"\\n Issue : \";\r\n            String text = \"Hello *BrandMania*,\\n\" + \"I wish To Purchase a plan,\" + BrandContact + mobileNumber + BusinessName;\r\n            String toNumber = \"91\" + number;\r\n            Intent intent = new Intent(Intent.ACTION_VIEW);\r\n            intent.setData(Uri.parse(\"http://api.whatsapp.com/send?phone=\" + toNumber + \"&text=\" + text));\r\n            act.startActivity(intent);\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n\r\n    public static String realPathForImage(final Context context, final Uri uri) {\r\n\r\n        final boolean isKitKat = true;\r\n\r\n        // DocumentProvider\r\n        if (DocumentsContract.isDocumentUri(context, uri)) {\r\n            // ExternalStorageProvider\r\n            if (isExternalStorageDocument(uri)) {\r\n                final String docId = DocumentsContract.getDocumentId(uri);\r\n                final String[] split = docId.split(\":\");\r\n                final String type = split[0];\r\n\r\n                if (\"primary\".equalsIgnoreCase(type)) {\r\n                    return Environment.getExternalStorageDirectory() + \"/\" + split[1];\r\n                }\r\n\r\n                // TODO handle non-primary volumes\r\n            }\r\n            // DownloadsProvider\r\n            else if (isDownloadsDocument(uri)) {\r\n\r\n                final String id = DocumentsContract.getDocumentId(uri);\r\n                final Uri contentUri = ContentUris.withAppendedId(\r\n                        Uri.parse(\"content://downloads/public_downloads\"), Long.valueOf(id));\r\n\r\n                return getDataColumn(context, contentUri, null, null);\r\n            }\r\n            // MediaProvider\r\n            else if (isMediaDocument(uri)) {\r\n                final String docId = DocumentsContract.getDocumentId(uri);\r\n                final String[] split = docId.split(\":\");\r\n                final String type = split[0];\r\n\r\n                Uri contentUri = null;\r\n                if (\"image\".equals(type)) {\r\n                    contentUri = MediaStore.Images.Media.EXTERNAL_CONTENT_URI;\r\n                } else if (\"video\".equals(type)) {\r\n                    contentUri = MediaStore.Video.Media.EXTERNAL_CONTENT_URI;\r\n                } else if (\"audio\".equals(type)) {\r\n                    contentUri = MediaStore.Audio.Media.EXTERNAL_CONTENT_URI;\r\n                }\r\n\r\n                final String selection = \"_id=?\";\r\n                final String[] selectionArgs = new String[]{\r\n                        split[1]\r\n                };\r\n\r\n                return getDataColumn(context, contentUri, selection, selectionArgs);\r\n            }\r\n        }\r\n        // MediaStore (and general)\r\n        else if (\"content\".equalsIgnoreCase(uri.getScheme())) {\r\n\r\n            // Return the remote address\r\n            if (isGooglePhotosUri(uri))\r\n                return uri.getLastPathSegment();\r\n\r\n            return getDataColumn(context, uri, null, null);\r\n        }\r\n        // File\r\n        else if (\"file\".equalsIgnoreCase(uri.getScheme())) {\r\n            return uri.getPath();\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * @param uri The Uri to check.\r\n     * @return Whether the Uri authority is ExternalStorageProvider.\r\n     */\r\n    public static boolean isExternalStorageDocument(Uri uri) {\r\n        return \"com.android.externalstorage.documents\".equals(uri.getAuthority());\r\n    }\r\n\r\n    /**\r\n     * @param uri The Uri to check.\r\n     * @return Whether the Uri authority is DownloadsProvider.\r\n     */\r\n    public static boolean isDownloadsDocument(Uri uri) {\r\n        return \"com.android.providers.downloads.documents\".equals(uri.getAuthority());\r\n    }\r\n\r\n    /**\r\n     * @param uri The Uri to check.\r\n     * @return Whether the Uri authority is MediaProvider.\r\n     */\r\n    public static boolean isMediaDocument(Uri uri) {\r\n        return \"com.android.providers.media.documents\".equals(uri.getAuthority());\r\n    }\r\n\r\n    /**\r\n     * @param uri The Uri to check.\r\n     * @return Whether the Uri authority is Google Photos.\r\n     */\r\n    public static boolean isGooglePhotosUri(Uri uri) {\r\n        return \"com.google.android.apps.photos.content\".equals(uri.getAuthority());\r\n    }\r\n\r\n    public static String getDataColumn(Context context, Uri uri, String selection,\r\n                                       String[] selectionArgs) {\r\n\r\n        Cursor cursor = null;\r\n        final String column = \"_data\";\r\n        final String[] projection = {\r\n                column\r\n        };\r\n\r\n        try {\r\n            cursor = context.getContentResolver().query(uri, projection, selection, selectionArgs,\r\n                    null);\r\n            if (cursor != null && cursor.moveToFirst()) {\r\n                final int index = cursor.getColumnIndexOrThrow(column);\r\n                return cursor.getString(index);\r\n            }\r\n        } finally {\r\n            if (cursor != null)\r\n                cursor.close();\r\n        }\r\n        return null;\r\n    }\r\n\r\n\r\n    //For CreatFileeDisc For Download Image.........................\r\n    public static File getDisc() {\r\n        File file = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DCIM);\r\n        return new File(file, \"BrandMania\");\r\n    }\r\n\r\n\r\n    public static void _INIT_FOLDER(String folderName) {\r\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {\r\n            String destURL = null;\r\n            File baseFolder;\r\n            if (folderName.equalsIgnoreCase(Constant.ROOT)) {\r\n                destURL = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOWNLOADS) + File.separator + Constant.ROOT;\r\n            }\r\n\r\n            if (folderName.equalsIgnoreCase(Constant.DATA)) {\r\n                destURL = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOWNLOADS) + File.separator + Constant.ROOT + \"/\" + Constant.DATA;\r\n            }\r\n            if (folderName.equalsIgnoreCase(Constant.VIDEOS)) {\r\n                destURL = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOWNLOADS) + File.separator + Constant.ROOT + \"/\" + Constant.VIDEOS;\r\n\r\n            }\r\n            if (folderName.equalsIgnoreCase(Constant.GIF)) {\r\n                destURL = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOWNLOADS) + File.separator + Constant.ROOT + \"/\" + Constant.GIF;\r\n            }\r\n            if (folderName.equalsIgnoreCase(Constant.IMAGES)) {\r\n                destURL = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOWNLOADS) + File.separator + Constant.ROOT + \"/\" + Constant.IMAGES;\r\n            }\r\n\r\n            if (folderName.equalsIgnoreCase(Constant.DOCUMENT)) {\r\n                destURL = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOWNLOADS) + File.separator + Constant.ROOT + \"/\" + Constant.DOCUMENT;\r\n            }\r\n\r\n            if (destURL != null) {\r\n                baseFolder = new File(destURL);\r\n                if (!baseFolder.exists()) {\r\n                    baseFolder.mkdir();\r\n                }\r\n            }\r\n        } else {\r\n            File baseFolder = null;\r\n\r\n            if (folderName.equalsIgnoreCase(Constant.ROOT)) {\r\n                baseFolder = new File(Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOWNLOADS), Constant.ROOT);\r\n            }\r\n            if (folderName.equalsIgnoreCase(Constant.DATA)) {\r\n                baseFolder = new File(Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOWNLOADS) + File.separator + Constant.ROOT + \"/\", Constant.DATA);\r\n            }\r\n            if (folderName.equalsIgnoreCase(Constant.VIDEOS)) {\r\n                baseFolder = new File(Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOWNLOADS) + File.separator + Constant.ROOT + \"/\", Constant.VIDEOS);\r\n            }\r\n            if (folderName.equalsIgnoreCase(Constant.IMAGES)) {\r\n                baseFolder = new File(Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOWNLOADS) + File.separator + Constant.ROOT + \"/\", Constant.IMAGES);\r\n            }\r\n            if (folderName.equalsIgnoreCase(Constant.DOCUMENT)) {\r\n                baseFolder = new File(Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOWNLOADS) + File.separator + Constant.ROOT + \"/\", Constant.DOCUMENT);\r\n            }\r\n            if (folderName.equalsIgnoreCase(Constant.GIF)) {\r\n                baseFolder = new File(Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOWNLOADS) + File.separator + Constant.ROOT + \"/\", Constant.GIF);\r\n            }\r\n\r\n            if (!baseFolder.exists()) {\r\n                baseFolder.mkdirs();\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    public static  boolean canCallApiToday(Activity act) {\r\n        long lastApiCallTimestamp = new PreafManager(act).getLastApiCallTimestamp();\r\n        long currentTime = System.currentTimeMillis();\r\n        long oneDayInMillis = 24 * 60 * 60 * 1000; // One day in milliseconds\r\n        return currentTime - lastApiCallTimestamp >= oneDayInMillis;\r\n    }\r\n\r\n    protected void compareDates(PreafManager prefManager) {\r\n        String previousDate = prefManager.getCurrentDate();\r\n        Calendar calendar = Calendar.getInstance();\r\n        Date cDate = calendar.getTime();\r\n        SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd\", Locale.getDefault());\r\n        String currentDate = sdf.format(cDate);\r\n\r\n        // String previousDate = \"2023-08-02\";\r\n        // String currentDate = \"2023-08-03\";\r\n\r\n        HELPER.print(\"previousDate::::\", previousDate);\r\n        HELPER.print(\"currentDate::::\", currentDate);\r\n\r\n        try {\r\n            Date CurrDate = sdf.parse(currentDate);\r\n            Date PreDate = sdf.parse(previousDate);\r\n\r\n            Calendar cal1 = Calendar.getInstance();\r\n            if (CurrDate != null) {\r\n                cal1.setTime(CurrDate);\r\n            }\r\n            Calendar cal2 = Calendar.getInstance();\r\n            if (PreDate != null) {\r\n                cal2.setTime(PreDate);\r\n            }\r\n            // Compare the two dates\r\n            if (cal1.equals(cal2)) {\r\n                prefManager.setNewOnceApiCall(true);\r\n                HELPER.print(\"Date 1 is equal to Date 2.\", \"DONE\");\r\n            } else if (cal1.before(cal2)) {\r\n                prefManager.setNewOnceApiCall(false);\r\n                HELPER.print(\"Date 1 is before Date 2.\", \"DONE\");\r\n            } else {\r\n                prefManager.setNewOnceApiCall(true);\r\n                HELPER.print(\"Date 1 is after to Date 2.\", \"DONE\");\r\n            }\r\n        } catch (ParseException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/app/brandmania/Common/HELPER.java b/app/src/main/java/com/app/brandmania/Common/HELPER.java
--- a/app/src/main/java/com/app/brandmania/Common/HELPER.java	(revision 52f57d39551c92af55be48aa0d3084a0d48671ed)
+++ b/app/src/main/java/com/app/brandmania/Common/HELPER.java	(date 1691067813676)
@@ -65,7 +65,7 @@
         act.overridePendingTransition(R.anim.slide_right_in, R.anim.slide_right_out);
     }
     public static void print(String tag, String message) {
-        Log.e(tag, message);
+       // Log.e(tag, message);
     }
 
     /**
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"DesignSurface\">\r\n    <option name=\"filePathToZoomLevelMap\">\r\n      <map>\r\n        <entry key=\"..\\:/_ANDROID_PROJECTS/BrandManiaUpdate/app/src/main/res/drawable/digital_card_ovel.xml\" value=\"0.20416666666666666\" />\r\n        <entry key=\"..\\:/_ANDROID_PROJECTS/BrandManiaUpdate/app/src/main/res/drawable/digital_card_round_rect.xml\" value=\"0.20416666666666666\" />\r\n        <entry key=\"..\\:/_ANDROID_PROJECTS/BrandManiaUpdate/app/src/main/res/drawable/digital_card_round_rect_more.xml\" value=\"0.20416666666666666\" />\r\n        <entry key=\"..\\:/_ANDROID_PROJECTS/BrandManiaUpdate/app/src/main/res/drawable/digital_card_round_rect_thin.xml\" value=\"0.20416666666666666\" />\r\n        <entry key=\"..\\:/_ANDROID_PROJECTS/BrandManiaUpdate/app/src/main/res/drawable/digital_card_round_shap.xml\" value=\"0.20416666666666666\" />\r\n        <entry key=\"..\\:/_ANDROID_PROJECTS/BrandManiaUpdate/app/src/main/res/drawable/digital_card_round_shap_icon.xml\" value=\"0.20416666666666666\" />\r\n        <entry key=\"..\\:/_ANDROID_PROJECTS/BrandManiaUpdate/app/src/main/res/drawable/digital_card_top_flat_shap.xml\" value=\"0.20416666666666666\" />\r\n        <entry key=\"..\\:/_ANDROID_PROJECTS/BrandManiaUpdate/app/src/main/res/drawable/digital_round_corner_item_one.xml\" value=\"0.20416666666666666\" />\r\n        <entry key=\"..\\:/_ANDROID_PROJECTS/BrandManiaUpdate/app/src/main/res/drawable/digital_round_corner_one.xml\" value=\"0.20416666666666666\" />\r\n        <entry key=\"..\\:/_ANDROID_PROJECTS/BrandManiaUpdate/app/src/main/res/drawable/digital_round_corner_two.xml\" value=\"0.20416666666666666\" />\r\n        <entry key=\"..\\:/_ANDROID_PROJECTS/BrandManiaUpdate/app/src/main/res/drawable/footer_rect_tri_from_all.xml\" value=\"0.20416666666666666\" />\r\n        <entry key=\"..\\:/_ANDROID_PROJECTS/BrandManiaUpdate/app/src/main/res/drawable/footer_rect_tri_from_left_bottom_top.xml\" value=\"0.20416666666666666\" />\r\n        <entry key=\"..\\:/_ANDROID_PROJECTS/BrandManiaUpdate/app/src/main/res/drawable/footer_rect_tri_from_top_bottom_right.xml\" value=\"0.20416666666666666\" />\r\n        <entry key=\"..\\:/_ANDROID_PROJECTS/BrandManiaUpdate/app/src/main/res/drawable/ic_call_for_pdf.xml\" value=\"0.2125\" />\r\n        <entry key=\"..\\:/_ANDROID_PROJECTS/BrandManiaUpdate/app/src/main/res/drawable/ic_crown.xml\" value=\"0.20416666666666666\" />\r\n        <entry key=\"..\\:/_ANDROID_PROJECTS/BrandManiaUpdate/app/src/main/res/drawable/ic_freee.xml\" value=\"0.20416666666666666\" />\r\n        <entry key=\"..\\:/_ANDROID_PROJECTS/BrandManiaUpdate/app/src/main/res/drawable/ic_outline_call_24.xml\" value=\"0.20416666666666666\" />\r\n        <entry key=\"..\\:/_ANDROID_PROJECTS/BrandManiaUpdate/app/src/main/res/drawable/ic_userrr.xml\" value=\"0.20416666666666666\" />\r\n        <entry key=\"..\\:/_ANDROID_PROJECTS/BrandManiaUpdate/app/src/main/res/drawable/item_round_corner_two.xml\" value=\"0.20416666666666666\" />\r\n        <entry key=\"..\\:/_ANDROID_PROJECTS/BrandManiaUpdate/app/src/main/res/drawable/shapeee_round_one_corner.xml\" value=\"0.20416666666666666\" />\r\n        <entry key=\"..\\:/_ANDROID_PROJECTS/BrandManiaUpdate/app/src/main/res/layout/activity_add_brand_multiple.xml\" value=\"0.18802083333333333\" />\r\n        <entry key=\"..\\:/_ANDROID_PROJECTS/BrandManiaUpdate/app/src/main/res/layout/activity_custom_view_all.xml\" value=\"0.18802083333333333\" />\r\n        <entry key=\"..\\:/_ANDROID_PROJECTS/BrandManiaUpdate/app/src/main/res/layout/activity_pdf.xml\" value=\"0.4409356725146199\" />\r\n        <entry key=\"..\\:/_ANDROID_PROJECTS/BrandManiaUpdate/app/src/main/res/layout/activity_refer.xml\" value=\"0.19635416666666666\" />\r\n        <entry key=\"..\\:/_ANDROID_PROJECTS/BrandManiaUpdate/app/src/main/res/layout/activity_update_band_list.xml\" value=\"0.19635416666666666\" />\r\n        <entry key=\"..\\:/_ANDROID_PROJECTS/BrandManiaUpdate/app/src/main/res/layout/activity_view_all_frame_image.xml\" value=\"0.18802083333333333\" />\r\n        <entry key=\"..\\:/_ANDROID_PROJECTS/BrandManiaUpdate/app/src/main/res/layout/activity_view_all_image.xml\" value=\"0.18802083333333333\" />\r\n        <entry key=\"..\\:/_ANDROID_PROJECTS/BrandManiaUpdate/app/src/main/res/layout/activity_view_brand.xml\" value=\"0.18802083333333333\" />\r\n        <entry key=\"..\\:/_ANDROID_PROJECTS/BrandManiaUpdate/app/src/main/res/layout/category_tab.xml\" value=\"0.18802083333333333\" />\r\n        <entry key=\"..\\:/_ANDROID_PROJECTS/BrandManiaUpdate/app/src/main/res/layout/dashboard_item_layout.xml\" value=\"0.18802083333333333\" />\r\n        <entry key=\"..\\:/_ANDROID_PROJECTS/BrandManiaUpdate/app/src/main/res/layout/dialog_digital_card_layout.xml\" value=\"0.18802083333333333\" />\r\n        <entry key=\"..\\:/_ANDROID_PROJECTS/BrandManiaUpdate/app/src/main/res/layout/footer_tab.xml\" value=\"0.18802083333333333\" />\r\n        <entry key=\"..\\:/_ANDROID_PROJECTS/BrandManiaUpdate/app/src/main/res/layout/fragment_colors_picker.xml\" value=\"0.18802083333333333\" />\r\n        <entry key=\"..\\:/_ANDROID_PROJECTS/BrandManiaUpdate/app/src/main/res/layout/fragment_country_layout.xml\" value=\"0.18802083333333333\" />\r\n        <entry key=\"..\\:/_ANDROID_PROJECTS/BrandManiaUpdate/app/src/main/res/layout/fragment_custom.xml\" value=\"0.18802083333333333\" />\r\n        <entry key=\"..\\:/_ANDROID_PROJECTS/BrandManiaUpdate/app/src/main/res/layout/fragment_home.xml\" value=\"0.18802083333333333\" />\r\n        <entry key=\"..\\:/_ANDROID_PROJECTS/BrandManiaUpdate/app/src/main/res/layout/fragment_list_bottom_list.xml\" value=\"0.18802083333333333\" />\r\n        <entry key=\"..\\:/_ANDROID_PROJECTS/BrandManiaUpdate/app/src/main/res/layout/fragment_profile.xml\" value=\"0.18802083333333333\" />\r\n        <entry key=\"..\\:/_ANDROID_PROJECTS/BrandManiaUpdate/app/src/main/res/layout/item_colors_for_card_layout.xml\" value=\"0.67\" />\r\n        <entry key=\"..\\:/_ANDROID_PROJECTS/BrandManiaUpdate/app/src/main/res/layout/item_digital_card_five.xml\" value=\"0.67\" />\r\n        <entry key=\"..\\:/_ANDROID_PROJECTS/BrandManiaUpdate/app/src/main/res/layout/item_digital_card_four.xml\" value=\"0.5\" />\r\n        <entry key=\"..\\:/_ANDROID_PROJECTS/BrandManiaUpdate/app/src/main/res/layout/item_digital_card_one.xml\" value=\"0.5\" />\r\n        <entry key=\"..\\:/_ANDROID_PROJECTS/BrandManiaUpdate/app/src/main/res/layout/item_digital_card_three.xml\" value=\"0.5\" />\r\n        <entry key=\"..\\:/_ANDROID_PROJECTS/BrandManiaUpdate/app/src/main/res/layout/item_digital_card_two.xml\" value=\"0.75\" />\r\n        <entry key=\"..\\:/_ANDROID_PROJECTS/BrandManiaUpdate/app/src/main/res/layout/item_footer_ten.xml\" value=\"0.18802083333333333\" />\r\n        <entry key=\"..\\:/_ANDROID_PROJECTS/BrandManiaUpdate/app/src/main/res/layout/item_layout_getbrandlist.xml\" value=\"0.19635416666666666\" />\r\n        <entry key=\"..\\:/_ANDROID_PROJECTS/BrandManiaUpdate/app/src/main/res/layout/item_list_layout.xml\" value=\"0.18802083333333333\" />\r\n        <entry key=\"..\\:/_ANDROID_PROJECTS/BrandManiaUpdate/app/src/main/res/layout/item_preview_eighteen.xml\" value=\"0.75\" />\r\n        <entry key=\"..\\:/_ANDROID_PROJECTS/BrandManiaUpdate/app/src/main/res/layout/item_preview_eleven.xml\" value=\"0.33\" />\r\n        <entry key=\"..\\:/_ANDROID_PROJECTS/BrandManiaUpdate/app/src/main/res/layout/item_preview_seventeen.xml\" value=\"0.75\" />\r\n        <entry key=\"..\\:/_ANDROID_PROJECTS/BrandManiaUpdate/app/src/main/res/layout/layout_digital_card_fifth.xml\" value=\"0.33\" />\r\n        <entry key=\"..\\:/_ANDROID_PROJECTS/BrandManiaUpdate/app/src/main/res/layout/layout_digital_card_fourth.xml\" value=\"0.33\" />\r\n        <entry key=\"..\\:/_ANDROID_PROJECTS/BrandManiaUpdate/app/src/main/res/layout/layout_digital_card_one.xml\" value=\"0.37604166666666666\" />\r\n        <entry key=\"..\\:/_ANDROID_PROJECTS/BrandManiaUpdate/app/src/main/res/layout/layout_digital_card_three.xml\" value=\"0.25\" />\r\n        <entry key=\"..\\:/_ANDROID_PROJECTS/BrandManiaUpdate/app/src/main/res/layout/layout_digital_card_two.xml\" value=\"0.37604166666666666\" />\r\n        <entry key=\"..\\:/_ANDROID_PROJECTS/BrandManiaUpdate/app/src/main/res/layout/layout_footer_eightteen.xml\" value=\"0.25\" />\r\n        <entry key=\"..\\:/_ANDROID_PROJECTS/BrandManiaUpdate/app/src/main/res/layout/layout_footer_eleven.xml\" value=\"0.25\" />\r\n        <entry key=\"..\\:/_ANDROID_PROJECTS/BrandManiaUpdate/app/src/main/res/layout/layout_footer_nineteen.xml\" value=\"0.3927083333333333\" />\r\n        <entry key=\"..\\:/_ANDROID_PROJECTS/BrandManiaUpdate/app/src/main/res/layout/layout_footer_seventeen.xml\" value=\"0.5\" />\r\n        <entry key=\"..\\:/_ANDROID_PROJECTS/BrandManiaUpdate/app/src/main/res/layout/layout_footer_sixteen.xml\" value=\"0.18802083333333333\" />\r\n        <entry key=\"..\\:/_ANDROID_PROJECTS/BrandManiaUpdate/app/src/main/res/layout/layout_footer_thirteen.xml\" value=\"0.18802083333333333\" />\r\n        <entry key=\"..\\:/_ANDROID_PROJECTS/BrandManiaUpdate/app/src/main/res/layout/layout_footer_twelone.xml\" value=\"0.18802083333333333\" />\r\n        <entry key=\"..\\:/_ANDROID_PROJECTS/BrandManiaUpdate/app/src/main/res/layout/layout_footer_twenty.xml\" value=\"0.33\" />\r\n        <entry key=\"..\\:/_ANDROID_PROJECTS/BrandManiaUpdate/app/src/main/res/layout/layout_for_load_eight.xml\" value=\"0.18802083333333333\" />\r\n        <entry key=\"..\\:/_ANDROID_PROJECTS/BrandManiaUpdate/app/src/main/res/layout/layout_for_load_one.xml\" value=\"0.18802083333333333\" />\r\n        <entry key=\"..\\:/_ANDROID_PROJECTS/BrandManiaUpdate/app/src/main/res/layout/layout_for_load_ten.xml\" value=\"0.19635416666666666\" />\r\n        <entry key=\"..\\:/__ANDROID_PROJECTS/BrandManiaLive/app/src/main/res/drawable/empty_card.xml\" value=\"0.227\" />\r\n        <entry key=\"..\\:/__ANDROID_PROJECTS/BrandManiaLive/app/src/main/res/drawable/ic_digital_card.xml\" value=\"0.227\" />\r\n        <entry key=\"..\\:/__ANDROID_PROJECTS/BrandManiaLive/app/src/main/res/layout/activity_add_brand_multiple.xml\" value=\"0.2734375\" />\r\n        <entry key=\"..\\:/__ANDROID_PROJECTS/BrandManiaLive/app/src/main/res/layout/activity_add_brandd.xml\" value=\"0.2734375\" />\r\n        <entry key=\"..\\:/__ANDROID_PROJECTS/BrandManiaLive/app/src/main/res/layout/activity_custom_view_all.xml\" value=\"0.2734375\" />\r\n        <entry key=\"..\\:/__ANDROID_PROJECTS/BrandManiaLive/app/src/main/res/layout/activity_edit.xml\" value=\"0.2734375\" />\r\n        <entry key=\"..\\:/__ANDROID_PROJECTS/BrandManiaLive/app/src/main/res/layout/activity_razor_pay.xml\" value=\"0.33\" />\r\n        <entry key=\"..\\:/__ANDROID_PROJECTS/BrandManiaLive/app/src/main/res/layout/activity_view_all_frame_image.xml\" value=\"0.2734375\" />\r\n        <entry key=\"..\\:/__ANDROID_PROJECTS/BrandManiaLive/app/src/main/res/layout/activity_view_all_image.xml\" value=\"0.22\" />\r\n        <entry key=\"..\\:/__ANDROID_PROJECTS/BrandManiaLive/app/src/main/res/layout/activity_view_brand.xml\" value=\"0.2734375\" />\r\n        <entry key=\"..\\:/__ANDROID_PROJECTS/BrandManiaLive/app/src/main/res/layout/dialog_add_brand_fragment_layout.xml\" value=\"0.2734375\" />\r\n        <entry key=\"..\\:/__ANDROID_PROJECTS/BrandManiaLive/app/src/main/res/layout/dialog_discard_image.xml\" value=\"0.2734375\" />\r\n        <entry key=\"..\\:/__ANDROID_PROJECTS/BrandManiaLive/app/src/main/res/layout/dialog_upgrade_download_limit_expire.xml\" value=\"0.2734375\" />\r\n        <entry key=\"..\\:/__ANDROID_PROJECTS/BrandManiaLive/app/src/main/res/layout/dialog_upgrade_layout_enterprise.xml\" value=\"0.2734375\" />\r\n        <entry key=\"..\\:/__ANDROID_PROJECTS/BrandManiaLive/app/src/main/res/layout/dialog_user_new_registration.xml\" value=\"0.2734375\" />\r\n        <entry key=\"..\\:/__ANDROID_PROJECTS/BrandManiaLive/app/src/main/res/layout/fragment_home.xml\" value=\"0.2734375\" />\r\n        <entry key=\"..\\:/__ANDROID_PROJECTS/BrandManiaLive/app/src/main/res/layout/frame_tab.xml\" value=\"0.22\" />\r\n        <entry key=\"..\\:/__ANDROID_PROJECTS/BrandManiaLive/app/src/main/res/layout/image_tab.xml\" value=\"0.2734375\" />\r\n        <entry key=\"..\\:/__ANDROID_PROJECTS/BrandManiaLive/app/src/main/res/layout/item_folder_layout.xml\" value=\"0.2734375\" />\r\n        <entry key=\"..\\:/__ANDROID_PROJECTS/BrandManiaLive/app/src/main/res/layout/item_footer_four.xml\" value=\"0.2734375\" />\r\n        <entry key=\"..\\:/__ANDROID_PROJECTS/BrandManiaLive/app/src/main/res/layout/item_footer_layout_six.xml\" value=\"0.67\" />\r\n        <entry key=\"..\\:/__ANDROID_PROJECTS/BrandManiaLive/app/src/main/res/layout/item_footer_one.xml\" value=\"0.2734375\" />\r\n        <entry key=\"..\\:/__ANDROID_PROJECTS/BrandManiaLive/app/src/main/res/layout/item_footer_seven.xml\" value=\"0.2734375\" />\r\n        <entry key=\"..\\:/__ANDROID_PROJECTS/BrandManiaLive/app/src/main/res/layout/item_layout_daily_images.xml\" value=\"0.2734375\" />\r\n        <entry key=\"..\\:/__ANDROID_PROJECTS/BrandManiaLive/app/src/main/res/layout/item_layout_daily_round_images.xml\" value=\"0.2734375\" />\r\n        <entry key=\"..\\:/__ANDROID_PROJECTS/BrandManiaLive/app/src/main/res/layout/item_layout_getbrandlist.xml\" value=\"0.2734375\" />\r\n        <entry key=\"..\\:/__ANDROID_PROJECTS/BrandManiaLive/app/src/main/res/layout/item_layout_home.xml\" value=\"0.2734375\" />\r\n        <entry key=\"..\\:/__ANDROID_PROJECTS/BrandManiaLive/app/src/main/res/layout/item_layout_viewallimage.xml\" value=\"0.2734375\" />\r\n        <entry key=\"..\\:/__ANDROID_PROJECTS/BrandManiaLive/app/src/main/res/layout/item_list_layout.xml\" value=\"0.2734375\" />\r\n        <entry key=\"..\\:/__ANDROID_PROJECTS/BrandManiaLive/app/src/main/res/layout/item_preview_eighteen.xml\" value=\"0.67\" />\r\n        <entry key=\"..\\:/__ANDROID_PROJECTS/BrandManiaLive/app/src/main/res/layout/item_preview_seventeen.xml\" value=\"0.5\" />\r\n        <entry key=\"..\\:/__ANDROID_PROJECTS/BrandManiaLive/app/src/main/res/layout/item_simmer_visitors_layout.xml\" value=\"0.2734375\" />\r\n        <entry key=\"..\\:/__ANDROID_PROJECTS/BrandManiaLive/app/src/main/res/layout/layout_footer_eightteen.xml\" value=\"0.75\" />\r\n        <entry key=\"..\\:/__ANDROID_PROJECTS/BrandManiaLive/app/src/main/res/layout/layout_footer_seventeen.xml\" value=\"0.9\" />\r\n        <entry key=\"..\\:/__ANDROID_PROJECTS/BrandManiaLive/app/src/main/res/layout/layout_for_load_one.xml\" value=\"0.2734375\" />\r\n        <entry key=\"..\\:/__ANDROID_PROJECTS/BrandManiaLive/app/src/main/res/layout/layout_for_load_six.xml\" value=\"0.2734375\" />\r\n        <entry key=\"..\\:/__ANDROID_PROJECTS/BrandManiaLive/app/src/main/res/layout/package_detail_alert_dialog.xml\" value=\"0.2734375\" />\r\n        <entry key=\"..\\:/__ANDROID_PROJECTS/BrandManiaLive/app/src/main/res/menu/navigation.xml\" value=\"0.2734375\" />\r\n        <entry key=\"..\\:/__ANDROID_PROJECTS/GithubProjects/BrandMania-2.0/app/src/main/res/layout/activity_add_brand.xml\" value=\"0.36666666666666664\" />\r\n        <entry key=\"..\\:/__ANDROID_PROJECTS/GithubProjects/BrandMania-2.0/app/src/main/res/layout/activity_add_brand_multiple.xml\" value=\"0.17269736842105263\" />\r\n        <entry key=\"..\\:/__ANDROID_PROJECTS/GithubProjects/BrandMania-2.0/app/src/main/res/layout/activity_add_brandd.xml\" value=\"0.23190789473684212\" />\r\n        <entry key=\"..\\:/__ANDROID_PROJECTS/GithubProjects/BrandMania-2.0/app/src/main/res/layout/activity_edit.xml\" value=\"0.23190789473684212\" />\r\n        <entry key=\"..\\:/__ANDROID_PROJECTS/GithubProjects/BrandMania-2.0/app/src/main/res/layout/activity_otp_screen.xml\" value=\"0.18802083333333333\" />\r\n        <entry key=\"..\\:/__ANDROID_PROJECTS/GithubProjects/BrandMania-2.0/app/src/main/res/layout/activity_razor_pay.xml\" value=\"0.23190789473684212\" />\r\n        <entry key=\"..\\:/__ANDROID_PROJECTS/GithubProjects/BrandMania-2.0/app/src/main/res/layout/activity_view_all_frame_image.xml\" value=\"0.23190789473684212\" />\r\n        <entry key=\"..\\:/__ANDROID_PROJECTS/GithubProjects/BrandMania-2.0/app/src/main/res/layout/activity_view_all_image.xml\" value=\"0.16282894736842105\" />\r\n        <entry key=\"..\\:/__ANDROID_PROJECTS/GithubProjects/BrandMania-2.0/app/src/main/res/layout/dashboard_item_layout.xml\" value=\"0.23190789473684212\" />\r\n        <entry key=\"..\\:/__ANDROID_PROJECTS/GithubProjects/BrandMania-2.0/app/src/main/res/layout/dialog_add_brand_fragment_layout.xml\" value=\"0.17269736842105263\" />\r\n        <entry key=\"..\\:/__ANDROID_PROJECTS/GithubProjects/BrandMania-2.0/app/src/main/res/layout/dialog_offer.xml\" value=\"0.23190789473684212\" />\r\n        <entry key=\"..\\:/__ANDROID_PROJECTS/GithubProjects/BrandMania-2.0/app/src/main/res/layout/dialog_request_business_category_remarks.xml\" value=\"0.36666666666666664\" />\r\n        <entry key=\"..\\:/__ANDROID_PROJECTS/GithubProjects/BrandMania-2.0/app/src/main/res/layout/dialog_upgrade_download_limit_expire.xml\" value=\"0.23190789473684212\" />\r\n        <entry key=\"..\\:/__ANDROID_PROJECTS/GithubProjects/BrandMania-2.0/app/src/main/res/layout/dialog_upgrade_layout_packege_expired.xml\" value=\"0.23190789473684212\" />\r\n        <entry key=\"..\\:/__ANDROID_PROJECTS/GithubProjects/BrandMania-2.0/app/src/main/res/layout/dialog_upgrade_layout_second.xml\" value=\"0.23190789473684212\" />\r\n        <entry key=\"..\\:/__ANDROID_PROJECTS/GithubProjects/BrandMania-2.0/app/src/main/res/layout/dialog_user_new_registration.xml\" value=\"0.23190789473684212\" />\r\n        <entry key=\"..\\:/__ANDROID_PROJECTS/GithubProjects/BrandMania-2.0/app/src/main/res/layout/dialog_user_registration_layout.xml\" value=\"0.23190789473684212\" />\r\n        <entry key=\"..\\:/__ANDROID_PROJECTS/GithubProjects/BrandMania-2.0/app/src/main/res/layout/fragment_home.xml\" value=\"0.23190789473684212\" />\r\n        <entry key=\"..\\:/__ANDROID_PROJECTS/GithubProjects/BrandMania-2.0/app/src/main/res/layout/fragment_profile.xml\" value=\"0.23190789473684212\" />\r\n        <entry key=\"..\\:/__ANDROID_PROJECTS/GithubProjects/BrandMania-2.0/app/src/main/res/layout/fragment_user_new_registartion.xml\" value=\"0.23190789473684212\" />\r\n        <entry key=\"..\\:/__ANDROID_PROJECTS/GithubProjects/BrandMania-2.0/app/src/main/res/layout/item_layout_daily_images.xml\" value=\"0.23190789473684212\" />\r\n        <entry key=\"..\\:/__ANDROID_PROJECTS/GithubProjects/BrandMania-2.0/app/src/main/res/layout/item_layout_viewallimage.xml\" value=\"0.23190789473684212\" />\r\n        <entry key=\"..\\:/__ANDROID_PROJECTS/GithubProjects/BrandMania-2.0/app/src/main/res/layout/item_package_layout.xml\" value=\"0.36666666666666664\" />\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"ProjectRootManager\" version=\"2\" languageLevel=\"JDK_11\" project-jdk-name=\"1.8\" project-jdk-type=\"JavaSDK\">\r\n    <output url=\"file://$PROJECT_DIR$/build/classes\" />\r\n  </component>\r\n  <component name=\"ProjectType\">\r\n    <option name=\"id\" value=\"Android\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
--- a/.idea/misc.xml	(revision 52f57d39551c92af55be48aa0d3084a0d48671ed)
+++ b/.idea/misc.xml	(date 1691067539386)
@@ -130,6 +130,7 @@
         <entry key="..\:/__ANDROID_PROJECTS/GithubProjects/BrandMania-2.0/app/src/main/res/layout/item_layout_daily_images.xml" value="0.23190789473684212" />
         <entry key="..\:/__ANDROID_PROJECTS/GithubProjects/BrandMania-2.0/app/src/main/res/layout/item_layout_viewallimage.xml" value="0.23190789473684212" />
         <entry key="..\:/__ANDROID_PROJECTS/GithubProjects/BrandMania-2.0/app/src/main/res/layout/item_package_layout.xml" value="0.36666666666666664" />
+        <entry key="..\:/__ANDROID_PROJECTS/GithubProjects/BrandMania-2.0/app/src/main/res/layout/progress_bar_layout.xml" value="0.27291666666666664" />
       </map>
     </option>
   </component>
Index: app/src/main/java/com/app/brandmania/Connection/BaseActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.app.brandmania.Connection;\r\n\r\nimport android.app.Activity;\r\nimport android.app.Dialog;\r\nimport android.content.BroadcastReceiver;\r\nimport android.content.Context;\r\nimport android.content.IntentFilter;\r\nimport android.graphics.drawable.ColorDrawable;\r\nimport android.net.ConnectivityManager;\r\nimport android.os.Build;\r\nimport android.os.Bundle;\r\nimport android.view.MotionEvent;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.view.Window;\r\nimport android.view.WindowManager;\r\nimport android.view.inputmethod.InputMethodManager;\r\nimport android.widget.EditText;\r\n\r\nimport androidx.appcompat.app.AppCompatActivity;\r\n\r\nimport com.app.brandmania.Common.HELPER;\r\nimport com.app.brandmania.Common.MakeMyBrandApp;\r\nimport com.app.brandmania.Common.PreafManager;\r\nimport com.app.brandmania.R;\r\nimport com.google.gson.Gson;\r\n\r\nimport java.text.ParseException;\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.Calendar;\r\nimport java.util.Date;\r\nimport java.util.Locale;\r\nimport java.util.Map;\r\nimport java.util.Observable;\r\nimport java.util.Observer;\r\n\r\npublic class BaseActivity extends AppCompatActivity implements Observer {\r\n    private static final String TAG = BaseActivity.class.getSimpleName();\r\n    private static Dialog noconnectionAlertDialog;\r\n    public Activity act;\r\n    public static Activity staticAct;\r\n    public PreafManager prefManager;\r\n    public MakeMyBrandApp myBrandApp;\r\n    private BroadcastReceiver mNetworkReceiver;\r\n    private boolean LIVE_MODE = true;\r\n    public Gson gson;\r\n\r\n    public BaseActivity() {\r\n    }\r\n\r\n    private static void showNoConnectionDialog() {\r\n        if (!noconnectionAlertDialog.isShowing()) {\r\n            noconnectionAlertDialog.setContentView(R.layout.dialog_no_internet_connection);\r\n            noconnectionAlertDialog.setCancelable(false);\r\n            noconnectionAlertDialog.show();\r\n        }\r\n    }\r\n\r\n    public static void InternetError(boolean value) {\r\n        if (!staticAct.isDestroyed() && !staticAct.isFinishing()) {\r\n            if (value) {\r\n                if (noconnectionAlertDialog.isShowing()) {\r\n                    noconnectionAlertDialog.dismiss();\r\n                }\r\n            } else {\r\n                showNoConnectionDialog();\r\n            }\r\n        }\r\n    }\r\n\r\n    public void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        staticAct = this;\r\n        act = this;\r\n        Window w = getWindow();\r\n        w.setFlags(WindowManager.LayoutParams.FLAG_LAYOUT_IN_SCREEN, WindowManager.LayoutParams.FLAG_LAYOUT_IN_SCREEN);\r\n        prefManager = new PreafManager(this);\r\n        gson = new Gson();\r\n        myBrandApp = (MakeMyBrandApp) this.getApplication();\r\n        myBrandApp.getObserver().addObserver(this);\r\n        noconnectionAlertDialog = new Dialog(this);\r\n        noconnectionAlertDialog.getWindow().setBackgroundDrawable(new ColorDrawable(android.graphics.Color.TRANSPARENT));\r\n\r\n        ConnectivityManager connectivityManager = (ConnectivityManager) getSystemService(Context.CONNECTIVITY_SERVICE);\r\n\r\n        mNetworkReceiver = new NetworkChangeReceiver();\r\n        registerNetworkBroadcastForNougat();\r\n\r\n        if (LIVE_MODE) {\r\n            getWindow().setFlags(WindowManager.LayoutParams.FLAG_SECURE, WindowManager.LayoutParams.FLAG_SECURE);\r\n        }\r\n    }\r\n\r\n    private void registerNetworkBroadcastForNougat() {\r\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {\r\n            registerReceiver(mNetworkReceiver, new IntentFilter(ConnectivityManager.CONNECTIVITY_ACTION));\r\n        }\r\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\r\n            registerReceiver(mNetworkReceiver, new IntentFilter(ConnectivityManager.CONNECTIVITY_ACTION));\r\n        }\r\n    }\r\n\r\n    protected Map<String, String> getHeader(int flag) {\r\n        return MakeMyBrandApp.getInstance().getHeader(flag);\r\n//        Map<String, String> headers = new HashMap<>();\r\n//        if (flag == CodeReUse.GET_JSON_HEADER) {\r\n//            headers.put(\"Accept\", \"application/json\");\r\n//            headers.put(\"Content-Type\", \"application/json\");\r\n//        } else {\r\n//            headers.put(\"Accept\", \"application/x-www-form-urlencoded\");\r\n//            headers.put(\"Content-Type\", \"application/x-www-form-urlencoded\");\r\n//        }\r\n//\r\n//        if (prefManager.getUserToken() != null) {\r\n//            headers.put(\"X-Authorization\", \"Bearer \" + prefManager.getUserToken());\r\n//        }\r\n//        return headers;\r\n    }\r\n\r\n    private void unregisterNetworkChanges() {\r\n        try {\r\n            unregisterReceiver(mNetworkReceiver);\r\n        } catch (IllegalArgumentException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    public void hideKeyboard(View view) {\r\n\r\n        // Set up touch listener for non-text box views to hide keyboard.\r\n        if (!(view instanceof EditText)) {\r\n            view.setOnTouchListener(new View.OnTouchListener() {\r\n                public boolean onTouch(View v, MotionEvent event) {\r\n                    hideKeyboard(act);\r\n                    return false;\r\n                }\r\n            });\r\n        }\r\n\r\n        //If a layout container, iterate over children and seed recursion.\r\n        if (view instanceof ViewGroup) {\r\n            for (int i = 0; i < ((ViewGroup) view).getChildCount(); i++) {\r\n                View innerView = ((ViewGroup) view).getChildAt(i);\r\n                hideKeyboard(innerView);\r\n            }\r\n        }\r\n    }\r\n\r\n    public void hideKeyboard(Activity activity) {\r\n        try {\r\n            View view = activity.getCurrentFocus();\r\n            if (view != null) {\r\n                InputMethodManager imm = (InputMethodManager) activity.getSystemService(Context.INPUT_METHOD_SERVICE);\r\n                imm.hideSoftInputFromWindow(view.getWindowToken(), 0);\r\n            }\r\n            activity.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_HIDDEN);\r\n\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    @Override\r\n    protected void onDestroy() {\r\n        super.onDestroy();\r\n        unregisterNetworkChanges();\r\n    }\r\n\r\n    @Override\r\n    public void onResume() {\r\n        super.onResume();\r\n    }\r\n\r\n    @Override\r\n    public void update(Observable observable, Object data) {\r\n\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/app/brandmania/Connection/BaseActivity.java b/app/src/main/java/com/app/brandmania/Connection/BaseActivity.java
--- a/app/src/main/java/com/app/brandmania/Connection/BaseActivity.java	(revision 52f57d39551c92af55be48aa0d3084a0d48671ed)
+++ b/app/src/main/java/com/app/brandmania/Connection/BaseActivity.java	(date 1691067596420)
@@ -78,6 +78,7 @@
         gson = new Gson();
         myBrandApp = (MakeMyBrandApp) this.getApplication();
         myBrandApp.getObserver().addObserver(this);
+
         noconnectionAlertDialog = new Dialog(this);
         noconnectionAlertDialog.getWindow().setBackgroundDrawable(new ColorDrawable(android.graphics.Color.TRANSPARENT));
 
Index: app/build.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>apply plugin: 'com.android.application'\r\napply plugin: 'com.google.gms.google-services'\r\napply plugin: 'com.google.firebase.crashlytics'\r\napply plugin: 'kotlin-android'\r\napply plugin: 'io.michaelrocks.paranoid'\r\n\r\nandroid {\r\n    compileSdkVersion 33\r\n    buildToolsVersion \"30.0.3\"\r\n\r\n    defaultConfig {\r\n        applicationId \"com.make.mybrand\"\r\n        minSdkVersion 21\r\n        targetSdkVersion 33\r\n        versionCode 41\r\n        versionName \"2.3.3\"\r\n        renderscriptTargetApi 19\r\n        renderscriptSupportModeEnabled true\r\n        testInstrumentationRunner \"androidx.test.runner.AndroidJUnitRunner\"\r\n    }\r\n\r\n    buildTypes {\r\n//        release {\r\n        // proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'\r\n//        }\r\n\r\n        debug {\r\n            minifyEnabled false\r\n            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'\r\n        }\r\n\r\n        release {\r\n            shrinkResources true\r\n            minifyEnabled true\r\n            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'\r\n        }\r\n    }\r\n\r\n    compileOptions {\r\n        sourceCompatibility JavaVersion.VERSION_11\r\n        targetCompatibility JavaVersion.VERSION_11\r\n    }\r\n\r\n    ndkVersion '23.0.7123448'\r\n\r\n    useLibrary 'org.apache.http.legacy'\r\n    buildFeatures {\r\n        dataBinding true\r\n    }\r\n    configurations {\r\n        all {\r\n            //exclude module: 'httpclient'\r\n            exclude module: 'commons-logging'\r\n        }\r\n    }\r\n\r\n    allprojects {\r\n        repositories {\r\n            mavenCentral()\r\n            maven { url \"https://jitpack.io\" }\r\n        }\r\n\r\n    }\r\n}\r\n\r\ndependencies {\r\n    implementation fileTree(dir: \"lib\", include: [\"*.jar\"])\r\n    implementation 'androidx.appcompat:appcompat:1.4.1'\r\n    implementation 'androidx.constraintlayout:constraintlayout:2.1.3'\r\n    implementation 'com.google.android.gms:play-services-appinvite:18.0.0'\r\n    implementation \"org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version\"\r\n    implementation \"com.github.duanhong169:drawabletoolbox:1.0.7\"\r\n\r\n    testImplementation 'junit:junit:4.13.2'\r\n    androidTestImplementation 'androidx.test.ext:junit:1.1.3'\r\n    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'\r\n    implementation 'com.intuit.sdp:sdp-android:1.0.6'\r\n    //noinspection GradleCompatible\r\n    implementation 'com.android.support:design:28.0.0'\r\n    implementation 'androidx.recyclerview:recyclerview:1.2.1'\r\n    // dependencies for legacy-support\r\n    implementation 'androidx.legacy:legacy-support-v4:1.0.0'\r\n\r\n    // dependencies for multidex\r\n    implementation 'androidx.multidex:multidex:2.0.1'\r\n    // dependencies for android material\r\n\r\n    // dependencies for android material\r\n    implementation 'com.google.android.material:material:1.5.0'\r\n\r\n    //for pending intent\r\n\r\n    implementation 'androidx.work:work-runtime-ktx:2.7.1'\r\n\r\n    // dependencies for facebook shimmer\r\n    implementation 'com.facebook.shimmer:shimmer:0.5.0@aar'\r\n\r\n    // dependencies for volley\r\n    implementation 'com.android.volley:volley:1.2.1'\r\n    //noinspection GradleCompatible\r\n    implementation 'com.android.support:design:28.0.0'\r\n    // dependency file for sdp\r\n    implementation 'com.intuit.sdp:sdp-android:1.0.6'\r\n\r\n    // dependency file for gson\r\n    implementation 'com.google.code.gson:gson:2.8.8'\r\n    // dependency file for permission\r\n    implementation 'com.karumi:dexter:6.2.2'\r\n    implementation 'com.amitshekhar.android:android-networking:1.0.2'\r\n     //viewpager material dots\r\n    implementation 'com.tbuonomo.andrui:viewpagerdotsindicator:4.1.2'\r\n    //noinspection GradleCompatible\r\n    implementation 'com.android.support:appcompat-v7:28.0.0'\r\n     implementation 'ja.burhanrashid52:photoeditor:1.0.0'\r\n    implementation 'androidx.cardview:cardview:1.0.0'\r\n\r\n    androidTestImplementation 'androidx.test:runner:1.4.0'\r\n    androidTestImplementation 'androidx.test:rules:1.4.0'\r\n    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'\r\n    androidTestImplementation 'androidx.test.espresso:espresso-contrib:3.4.0'\r\n    //noinspection GradleCompatible\r\n    implementation 'com.android.support:recyclerview-v7:28.0.0'\r\n    implementation 'com.github.clans:fab:1.6.4'\r\n    implementation 'com.tbuonomo.andrui:viewpagerdotsindicator:4.1.2'\r\n    //dependency for image cropping\r\n    api 'com.theartofdev.edmodo:android-image-cropper:2.8.0'\r\n    // dependencies for glide\r\n\r\n    implementation 'com.github.bumptech.glide:glide:4.12.0'\r\n    annotationProcessor 'com.github.bumptech.glide:compiler:4.12.0'\r\n    implementation 'com.google.android.play:core:1.10.3'\r\n    //dependency for image view\r\n    implementation 'com.github.chrisbanes:PhotoView:2.3.0'\r\n\r\n    implementation 'com.github.hotchemi:android-rate:1.0.1'\r\n    implementation 'com.github.Angtrim:Android-Five-Stars-Library:v3.1'\r\n    implementation 'androidx.viewpager2:viewpager2:1.0.0'\r\n    implementation 'com.makeramen:roundedimageview:2.3.0'\r\n    implementation 'com.inkapplications.viewpageindicator:library:2.4.3'\r\n    implementation 'me.relex:circleindicator:2.1.4'\r\n    api 'com.razorpay:checkout:1.6.12'\r\n    implementation 'com.github.mreram:showcaseview:1.1'\r\n    implementation 'com.getkeepsafe.taptargetview:taptargetview:1.13.0'\r\n\r\n    implementation('cn.trinea.android.view.autoscrollviewpager:android-auto-scroll-view-pager:1.1.2') { exclude module: 'support-v4' }\r\n    implementation 'com.theartofdev.edmodo:android-image-cropper:2.8.0'\r\n    implementation 'com.github.vihtarb:tooltip:0.1.9'\r\n\r\n    implementation \"com.github.skydoves:balloon:1.2.7\"\r\n\r\n    //color picker\r\n    implementation 'com.jaredrummler:colorpicker:1.1.0'\r\n\r\n\r\n    implementation 'com.github.yalantis:ucrop:2.2.8'\r\n    implementation 'com.itextpdf:itextg:5.5.10'\r\n    implementation 'com.itextpdf:kernel:7.0.3'\r\n\r\n\r\n    implementation 'com.github.zomato:androidphotofilters:1.0.2'\r\n    implementation 'com.github.barteksc:android-pdf-viewer:2.8.2'\r\n    //    implementation project(':photofilterssdk')\r\n    //video player\r\n    implementation 'com.google.android.exoplayer:exoplayer-core:2.7.3'\r\n    implementation 'com.google.android.exoplayer:exoplayer-ui:2.7.3'\r\n    implementation 'com.github.HaarigerHarald:android-youtubeExtractor:v1.7.0'\r\n    implementation 'com.github.ksoichiro:android-observablescrollview:1.5.2'\r\n\r\n\r\n    //for FFmpeg\r\n//    implementation 'nl.bravobit:android-ffmpeg:1.1.7'\r\n//    implementation project(':android-ffmpeg')\r\n\r\n    implementation 'com.github.virtualvivek:BlurShadowImageView:2.1'\r\n\r\n    implementation 'com.github.mmin18:realtimeblurview:1.2.1'\r\n\r\n    implementation 'de.hdodenhof:circleimageview:3.1.0'\r\n\r\n    //  implementation 'com.airbnb.android:lottie:3.5.0'\r\n    implementation 'commons-validator:commons-validator:1.6'\r\n\r\n    // Import the BoM for the Firebase platform\r\n    implementation platform('com.google.firebase:firebase-bom:28.4.0')\r\n    implementation 'com.google.firebase:firebase-messaging:23.2.0'\r\n    implementation 'com.google.firebase:firebase-core:21.1.1'\r\n    implementation 'com.google.firebase:firebase-dynamic-links'\r\n    implementation 'com.google.firebase:firebase-crashlytics'\r\n    implementation 'com.google.firebase:firebase-analytics'\r\n    implementation 'com.google.firebase:firebase-auth'\r\n\r\n\r\n    implementation 'com.arthenica:mobile-ffmpeg-full:4.4.LTS'\r\n    implementation \"org.jetbrains.kotlin:kotlin-reflect:1.6.10\"\r\n\r\n    implementation 'androidx.palette:palette-ktx:1.0.0'\r\n    implementation 'com.squareup.picasso:picasso:2.71828'\r\n    implementation 'com.github.woxingxiao:BounceScrollView:1.4-androidx'\r\n    implementation \"androidx.recyclerview:recyclerview:1.2.1\"\r\n    implementation \"androidx.work:work-runtime:2.7.0\"\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/build.gradle b/app/build.gradle
--- a/app/build.gradle	(revision 52f57d39551c92af55be48aa0d3084a0d48671ed)
+++ b/app/build.gradle	(date 1691416281013)
@@ -12,23 +12,18 @@
         applicationId "com.make.mybrand"
         minSdkVersion 21
         targetSdkVersion 33
-        versionCode 41
-        versionName "2.3.3"
+        versionCode 43
+        versionName "2.3.5"
         renderscriptTargetApi 19
         renderscriptSupportModeEnabled true
         testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
     }
 
     buildTypes {
-//        release {
-        // proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
-//        }
-
         debug {
             minifyEnabled false
             proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
         }
-
         release {
             shrinkResources true
             minifyEnabled true
